// File generated from our OpenAPI spec by Stainless.

package com.withorb.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.withorb.api.core.BaseDeserializer
import com.withorb.api.core.BaseSerializer
import com.withorb.api.core.Enum
import com.withorb.api.core.ExcludeMissing
import com.withorb.api.core.JsonField
import com.withorb.api.core.JsonMissing
import com.withorb.api.core.JsonValue
import com.withorb.api.core.NoAutoDetect
import com.withorb.api.core.Params
import com.withorb.api.core.checkRequired
import com.withorb.api.core.getOrThrow
import com.withorb.api.core.http.Headers
import com.withorb.api.core.http.QueryParams
import com.withorb.api.core.immutableEmptyMap
import com.withorb.api.core.toImmutable
import com.withorb.api.errors.OrbInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects
import java.util.Optional
import kotlin.jvm.optionals.getOrNull

/**
 * This endpoint can be used to change an existing subscription's plan. It returns the serialized
 * updated subscription object.
 *
 * The body parameter `change_option` determines when the plan change occurrs. Orb supports three
 * options:
 * - `end_of_subscription_term`: changes the plan at the end of the existing plan's term.
 *     - Issuing this plan change request for a monthly subscription will keep the existing plan
 *       active until the start of the subsequent month. Issuing this plan change request for a
 *       yearly subscription will keep the existing plan active for the full year. Charges incurred
 *       in the remaining period will be invoiced as normal.
 *     - Example: The plan is billed monthly on the 1st of the month, the request is made on January
 *       15th, so the plan will be changed on February 1st, and invoice will be issued on February
 *       1st for the last month of the original plan.
 * - `immediate`: changes the plan immediately.
 *     - Subscriptions that have their plan changed with this option will move to the new plan
 *       immediately, and be invoiced immediately.
 *     - This invoice will include any usage fees incurred in the billing period up to the change,
 *       along with any prorated recurring fees for the billing period, if applicable.
 *     - Example: The plan is billed monthly on the 1st of the month, the request is made on January
 *       15th, so the plan will be changed on January 15th, and an invoice will be issued for the
 *       partial month, from January 1 to January 15, on the original plan.
 * - `requested_date`: changes the plan on the requested date (`change_date`).
 *     - If no timezone is provided, the customer's timezone is used. The `change_date` body
 *       parameter is required if this option is chosen.
 *     - Example: The plan is billed monthly on the 1st of the month, the request is made on January
 *       15th, with a requested `change_date` of February 15th, so the plan will be changed on
 *       February 15th, and invoices will be issued on February 1st and February 15th.
 *
 * Note that one of `plan_id` or `external_plan_id` is required in the request body for this
 * operation.
 *
 * ## Customize your customer's subscriptions
 *
 * Prices and adjustments in a plan can be added, removed, or replaced on the subscription when you
 * schedule the plan change. This is useful when a customer has prices that differ from the default
 * prices for a specific plan.
 *
 * <Note> This feature is only available for accounts that have migrated to Subscription Overrides
 * Version 2. You can find your Subscription Overrides Version at the bottom of your
 * [Plans page](https://app.withorb.com/plans) </Note>
 *
 * ### Adding Prices
 *
 * To add prices, provide a list of objects with the key `add_prices`. An object in the list must
 * specify an existing add-on price with a `price_id` or `external_price_id` field, or create a new
 * add-on price by including an object with the key `price`, identical to what would be used in the
 * request body for the [create price endpoint](/api-reference/price/create-price). See the
 * [Price resource](/product-catalog/price-configuration) for the specification of different price
 * model configurations possible in this object.
 *
 * If the plan has phases, each object in the list must include a number with `plan_phase_order` key
 * to indicate which phase the price should be added to.
 *
 * An object in the list can specify an optional `start_date` and optional `end_date`. This is
 * equivalent to creating a price interval with the
 * [add/edit price intervals endpoint](/api-reference/price-interval/add-or-edit-price-intervals).
 * If unspecified, the start or end date of the phase or subscription will be used.
 *
 * An object in the list can specify an optional `minimum_amount`, `maximum_amount`, or `discounts`.
 * This will create adjustments which apply only to this price.
 *
 * Additionally, an object in the list can specify an optional `reference_id`. This ID can be used
 * to reference this price when [adding an adjustment](#adding-adjustments) in the same API call.
 * However the ID is _transient_ and cannot be used to refer to the price in future API calls.
 *
 * ### Removing Prices
 *
 * To remove prices, provide a list of objects with the key `remove_prices`. An object in the list
 * must specify a plan price with either a `price_id` or `external_price_id` field.
 *
 * ### Replacing Prices
 *
 * To replace prices, provide a list of objects with the key `replace_prices`. An object in the list
 * must specify a plan price to replace with the `replaces_price_id` key, and it must specify a
 * price to replace it with by either referencing an existing add-on price with a `price_id` or
 * `external_price_id` field, or by creating a new add-on price by including an object with the key
 * `price`, identical to what would be used in the request body for the
 * [create price endpoint](/api-reference/price/create-price). See the
 * [Price resource](/product-catalog/price-configuration) for the specification of different price
 * model configurations possible in this object.
 *
 * For fixed fees, an object in the list can supply a `fixed_price_quantity` instead of a `price`,
 * `price_id`, or `external_price_id` field. This will update only the quantity for the price,
 * similar to the [Update price quantity](/api-reference/subscription/update-price-quantity)
 * endpoint.
 *
 * The replacement price will have the same phase, if applicable, and the same start and end dates
 * as the price it replaces.
 *
 * An object in the list can specify an optional `minimum_amount`, `maximum_amount`, or `discounts`.
 * This will create adjustments which apply only to this price.
 *
 * Additionally, an object in the list can specify an optional `reference_id`. This ID can be used
 * to reference the replacement price when [adding an adjustment](#adding-adjustments) in the same
 * API call. However the ID is _transient_ and cannot be used to refer to the price in future API
 * calls.
 *
 * ### Adding adjustments
 *
 * To add adjustments, provide a list of objects with the key `add_adjustments`. An object in the
 * list must include an object with the key `adjustment`, identical to the adjustment object in the
 * [add/edit price intervals endpoint](/api-reference/price-interval/add-or-edit-price-intervals).
 *
 * If the plan has phases, each object in the list must include a number with `plan_phase_order` key
 * to indicate which phase the adjustment should be added to.
 *
 * An object in the list can specify an optional `start_date` and optional `end_date`. If
 * unspecified, the start or end date of the phase or subscription will be used.
 *
 * ### Removing adjustments
 *
 * To remove adjustments, provide a list of objects with the key `remove_adjustments`. An object in
 * the list must include a key, `adjustment_id`, with the ID of the adjustment to be removed.
 *
 * ### Replacing adjustments
 *
 * To replace adjustments, provide a list of objects with the key `replace_adjustments`. An object
 * in the list must specify a plan adjustment to replace with the `replaces_adjustment_id` key, and
 * it must specify an adjustment to replace it with by including an object with the key
 * `adjustment`, identical to the adjustment object in the
 * [add/edit price intervals endpoint](/api-reference/price-interval/add-or-edit-price-intervals).
 *
 * The replacement adjustment will have the same phase, if applicable, and the same start and end
 * dates as the adjustment it replaces.
 *
 * ## Price overrides (DEPRECATED)
 *
 * <Note> Price overrides are being phased out in favor adding/removing/replacing prices. (See
 * [Customize your customer's subscriptions](/api-reference/subscription/schedule-plan-change))
 * </Note>
 *
 * Price overrides are used to update some or all prices in a plan for the specific subscription
 * being created. This is useful when a new customer has negotiated a rate that is unique to the
 * customer.
 *
 * To override prices, provide a list of objects with the key `price_overrides`. The price object in
 * the list of overrides is expected to contain the existing price id, the `model_type` and
 * configuration. (See the [Price resource](/product-catalog/price-configuration) for the
 * specification of different price model configurations.) The numerical values can be updated, but
 * the billable metric, cadence, type, and name of a price can not be overridden.
 *
 * ### Maximums, and minimums
 *
 * Price overrides are used to update some or all prices in the target plan. Minimums and maximums,
 * much like price overrides, can be useful when a new customer has negotiated a new or different
 * minimum or maximum spend cap than the default for the plan. The request format for maximums and
 * minimums is the same as those in [subscription creation](create-subscription).
 *
 * ## Scheduling multiple plan changes
 *
 * When scheduling multiple plan changes with the same date, the latest plan change on that day
 * takes effect.
 *
 * ## Prorations for in-advance fees
 *
 * By default, Orb calculates the prorated difference in any fixed fees when making a plan change,
 * adjusting the customer balance as needed. For details on this behavior, see
 * [Modifying subscriptions](/product-catalog/modifying-subscriptions#prorations-for-in-advance-fees).
 */
class SubscriptionSchedulePlanChangeParams
private constructor(
    private val subscriptionId: String,
    private val body: Body,
    private val additionalHeaders: Headers,
    private val additionalQueryParams: QueryParams,
) : Params {

    fun subscriptionId(): String = subscriptionId

    fun changeOption(): ChangeOption = body.changeOption()

    /**
     * Additional adjustments to be added to the subscription. (Only available for accounts that
     * have migrated off of legacy subscription overrides)
     */
    fun addAdjustments(): Optional<List<AddAdjustment>> = body.addAdjustments()

    /**
     * Additional prices to be added to the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun addPrices(): Optional<List<AddPrice>> = body.addPrices()

    /**
     * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned with
     * the plan change's effective date.
     */
    fun alignBillingWithPlanChangeDate(): Optional<Boolean> = body.alignBillingWithPlanChangeDate()

    /**
     * Determines whether issued invoices for this subscription will automatically be charged with
     * the saved payment method on the due date. If not specified, this defaults to the behavior
     * configured for this customer.
     */
    fun autoCollection(): Optional<Boolean> = body.autoCollection()

    /**
     * Reset billing periods to be aligned with the plan change's effective date or start of the
     * month. Defaults to `unchanged` which keeps subscription's existing billing cycle alignment.
     */
    fun billingCycleAlignment(): Optional<BillingCycleAlignment> = body.billingCycleAlignment()

    fun billingCycleAnchorConfiguration(): Optional<BillingCycleAnchorConfiguration> =
        body.billingCycleAnchorConfiguration()

    /**
     * The date that the plan change should take effect. This parameter can only be passed if the
     * `change_option` is `requested_date`. If a date with no time is passed, the plan change will
     * happen at midnight in the customer's timezone.
     */
    fun changeDate(): Optional<OffsetDateTime> = body.changeDate()

    /**
     * Redemption code to be used for this subscription. If the coupon cannot be found by its
     * redemption code, or cannot be redeemed, an error response will be returned and the
     * subscription creation or plan change will not be scheduled.
     */
    fun couponRedemptionCode(): Optional<String> = body.couponRedemptionCode()

    @Deprecated("deprecated") fun creditsOverageRate(): Optional<Double> = body.creditsOverageRate()

    /**
     * Determines the default memo on this subscription's invoices. Note that if this is not
     * provided, it is determined by the plan configuration.
     */
    fun defaultInvoiceMemo(): Optional<String> = body.defaultInvoiceMemo()

    /**
     * The external_plan_id of the plan that the given subscription should be switched to. Note that
     * either this property or `plan_id` must be specified.
     */
    fun externalPlanId(): Optional<String> = body.externalPlanId()

    /**
     * An additional filter to apply to usage queries. This filter must be expressed as a boolean
     * [computed property](/extensibility/advanced-metrics#computed-properties). If null, usage
     * queries will not include any additional filter.
     */
    fun filter(): Optional<String> = body.filter()

    /** The phase of the plan to start with */
    fun initialPhaseOrder(): Optional<Long> = body.initialPhaseOrder()

    /**
     * When this subscription's accrued usage reaches this threshold, an invoice will be issued for
     * the subscription. If not specified, invoices will only be issued at the end of the billing
     * period.
     */
    fun invoicingThreshold(): Optional<String> = body.invoicingThreshold()

    /**
     * The net terms determines the difference between the invoice date and the issue date for the
     * invoice. If you intend the invoice to be due on issue, set this to 0. If not provided, this
     * defaults to the value specified in the plan.
     */
    fun netTerms(): Optional<Long> = body.netTerms()

    @Deprecated("deprecated")
    fun perCreditOverageAmount(): Optional<Double> = body.perCreditOverageAmount()

    /**
     * The plan that the given subscription should be switched to. Note that either this property or
     * `external_plan_id` must be specified.
     */
    fun planId(): Optional<String> = body.planId()

    /**
     * Specifies which version of the plan to change to. If null, the default version will be used.
     */
    fun planVersionNumber(): Optional<Long> = body.planVersionNumber()

    /** Optionally provide a list of overrides for prices on the plan */
    @Deprecated("deprecated")
    fun priceOverrides(): Optional<List<JsonValue>> = body.priceOverrides()

    /**
     * Plan adjustments to be removed from the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun removeAdjustments(): Optional<List<RemoveAdjustment>> = body.removeAdjustments()

    /**
     * Plan prices to be removed from the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun removePrices(): Optional<List<RemovePrice>> = body.removePrices()

    /**
     * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
     * available for accounts that have migrated off of legacy subscription overrides)
     */
    fun replaceAdjustments(): Optional<List<ReplaceAdjustment>> = body.replaceAdjustments()

    /**
     * Plan prices to be replaced with additional prices on the subscription. (Only available for
     * accounts that have migrated off of legacy subscription overrides)
     */
    fun replacePrices(): Optional<List<ReplacePrice>> = body.replacePrices()

    /**
     * The duration of the trial period in days. If not provided, this defaults to the value
     * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
     */
    fun trialDurationDays(): Optional<Long> = body.trialDurationDays()

    fun _changeOption(): JsonField<ChangeOption> = body._changeOption()

    /**
     * Additional adjustments to be added to the subscription. (Only available for accounts that
     * have migrated off of legacy subscription overrides)
     */
    fun _addAdjustments(): JsonField<List<AddAdjustment>> = body._addAdjustments()

    /**
     * Additional prices to be added to the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun _addPrices(): JsonField<List<AddPrice>> = body._addPrices()

    /**
     * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned with
     * the plan change's effective date.
     */
    fun _alignBillingWithPlanChangeDate(): JsonField<Boolean> =
        body._alignBillingWithPlanChangeDate()

    /**
     * Determines whether issued invoices for this subscription will automatically be charged with
     * the saved payment method on the due date. If not specified, this defaults to the behavior
     * configured for this customer.
     */
    fun _autoCollection(): JsonField<Boolean> = body._autoCollection()

    /**
     * Reset billing periods to be aligned with the plan change's effective date or start of the
     * month. Defaults to `unchanged` which keeps subscription's existing billing cycle alignment.
     */
    fun _billingCycleAlignment(): JsonField<BillingCycleAlignment> = body._billingCycleAlignment()

    fun _billingCycleAnchorConfiguration(): JsonField<BillingCycleAnchorConfiguration> =
        body._billingCycleAnchorConfiguration()

    /**
     * The date that the plan change should take effect. This parameter can only be passed if the
     * `change_option` is `requested_date`. If a date with no time is passed, the plan change will
     * happen at midnight in the customer's timezone.
     */
    fun _changeDate(): JsonField<OffsetDateTime> = body._changeDate()

    /**
     * Redemption code to be used for this subscription. If the coupon cannot be found by its
     * redemption code, or cannot be redeemed, an error response will be returned and the
     * subscription creation or plan change will not be scheduled.
     */
    fun _couponRedemptionCode(): JsonField<String> = body._couponRedemptionCode()

    @Deprecated("deprecated")
    fun _creditsOverageRate(): JsonField<Double> = body._creditsOverageRate()

    /**
     * Determines the default memo on this subscription's invoices. Note that if this is not
     * provided, it is determined by the plan configuration.
     */
    fun _defaultInvoiceMemo(): JsonField<String> = body._defaultInvoiceMemo()

    /**
     * The external_plan_id of the plan that the given subscription should be switched to. Note that
     * either this property or `plan_id` must be specified.
     */
    fun _externalPlanId(): JsonField<String> = body._externalPlanId()

    /**
     * An additional filter to apply to usage queries. This filter must be expressed as a boolean
     * [computed property](/extensibility/advanced-metrics#computed-properties). If null, usage
     * queries will not include any additional filter.
     */
    fun _filter(): JsonField<String> = body._filter()

    /** The phase of the plan to start with */
    fun _initialPhaseOrder(): JsonField<Long> = body._initialPhaseOrder()

    /**
     * When this subscription's accrued usage reaches this threshold, an invoice will be issued for
     * the subscription. If not specified, invoices will only be issued at the end of the billing
     * period.
     */
    fun _invoicingThreshold(): JsonField<String> = body._invoicingThreshold()

    /**
     * The net terms determines the difference between the invoice date and the issue date for the
     * invoice. If you intend the invoice to be due on issue, set this to 0. If not provided, this
     * defaults to the value specified in the plan.
     */
    fun _netTerms(): JsonField<Long> = body._netTerms()

    @Deprecated("deprecated")
    fun _perCreditOverageAmount(): JsonField<Double> = body._perCreditOverageAmount()

    /**
     * The plan that the given subscription should be switched to. Note that either this property or
     * `external_plan_id` must be specified.
     */
    fun _planId(): JsonField<String> = body._planId()

    /**
     * Specifies which version of the plan to change to. If null, the default version will be used.
     */
    fun _planVersionNumber(): JsonField<Long> = body._planVersionNumber()

    /** Optionally provide a list of overrides for prices on the plan */
    @Deprecated("deprecated")
    fun _priceOverrides(): JsonField<List<JsonValue>> = body._priceOverrides()

    /**
     * Plan adjustments to be removed from the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun _removeAdjustments(): JsonField<List<RemoveAdjustment>> = body._removeAdjustments()

    /**
     * Plan prices to be removed from the subscription. (Only available for accounts that have
     * migrated off of legacy subscription overrides)
     */
    fun _removePrices(): JsonField<List<RemovePrice>> = body._removePrices()

    /**
     * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
     * available for accounts that have migrated off of legacy subscription overrides)
     */
    fun _replaceAdjustments(): JsonField<List<ReplaceAdjustment>> = body._replaceAdjustments()

    /**
     * Plan prices to be replaced with additional prices on the subscription. (Only available for
     * accounts that have migrated off of legacy subscription overrides)
     */
    fun _replacePrices(): JsonField<List<ReplacePrice>> = body._replacePrices()

    /**
     * The duration of the trial period in days. If not provided, this defaults to the value
     * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
     */
    fun _trialDurationDays(): JsonField<Long> = body._trialDurationDays()

    fun _additionalBodyProperties(): Map<String, JsonValue> = body._additionalProperties()

    fun _additionalHeaders(): Headers = additionalHeaders

    fun _additionalQueryParams(): QueryParams = additionalQueryParams

    @JvmSynthetic internal fun _body(): Body = body

    override fun _headers(): Headers = additionalHeaders

    override fun _queryParams(): QueryParams = additionalQueryParams

    fun getPathParam(index: Int): String {
        return when (index) {
            0 -> subscriptionId
            else -> ""
        }
    }

    @NoAutoDetect
    class Body
    @JsonCreator
    private constructor(
        @JsonProperty("change_option")
        @ExcludeMissing
        private val changeOption: JsonField<ChangeOption> = JsonMissing.of(),
        @JsonProperty("add_adjustments")
        @ExcludeMissing
        private val addAdjustments: JsonField<List<AddAdjustment>> = JsonMissing.of(),
        @JsonProperty("add_prices")
        @ExcludeMissing
        private val addPrices: JsonField<List<AddPrice>> = JsonMissing.of(),
        @JsonProperty("align_billing_with_plan_change_date")
        @ExcludeMissing
        private val alignBillingWithPlanChangeDate: JsonField<Boolean> = JsonMissing.of(),
        @JsonProperty("auto_collection")
        @ExcludeMissing
        private val autoCollection: JsonField<Boolean> = JsonMissing.of(),
        @JsonProperty("billing_cycle_alignment")
        @ExcludeMissing
        private val billingCycleAlignment: JsonField<BillingCycleAlignment> = JsonMissing.of(),
        @JsonProperty("billing_cycle_anchor_configuration")
        @ExcludeMissing
        private val billingCycleAnchorConfiguration: JsonField<BillingCycleAnchorConfiguration> =
            JsonMissing.of(),
        @JsonProperty("change_date")
        @ExcludeMissing
        private val changeDate: JsonField<OffsetDateTime> = JsonMissing.of(),
        @JsonProperty("coupon_redemption_code")
        @ExcludeMissing
        private val couponRedemptionCode: JsonField<String> = JsonMissing.of(),
        @JsonProperty("credits_overage_rate")
        @ExcludeMissing
        private val creditsOverageRate: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("default_invoice_memo")
        @ExcludeMissing
        private val defaultInvoiceMemo: JsonField<String> = JsonMissing.of(),
        @JsonProperty("external_plan_id")
        @ExcludeMissing
        private val externalPlanId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("filter")
        @ExcludeMissing
        private val filter: JsonField<String> = JsonMissing.of(),
        @JsonProperty("initial_phase_order")
        @ExcludeMissing
        private val initialPhaseOrder: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("invoicing_threshold")
        @ExcludeMissing
        private val invoicingThreshold: JsonField<String> = JsonMissing.of(),
        @JsonProperty("net_terms")
        @ExcludeMissing
        private val netTerms: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("per_credit_overage_amount")
        @ExcludeMissing
        private val perCreditOverageAmount: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("plan_id")
        @ExcludeMissing
        private val planId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("plan_version_number")
        @ExcludeMissing
        private val planVersionNumber: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("price_overrides")
        @ExcludeMissing
        private val priceOverrides: JsonField<List<JsonValue>> = JsonMissing.of(),
        @JsonProperty("remove_adjustments")
        @ExcludeMissing
        private val removeAdjustments: JsonField<List<RemoveAdjustment>> = JsonMissing.of(),
        @JsonProperty("remove_prices")
        @ExcludeMissing
        private val removePrices: JsonField<List<RemovePrice>> = JsonMissing.of(),
        @JsonProperty("replace_adjustments")
        @ExcludeMissing
        private val replaceAdjustments: JsonField<List<ReplaceAdjustment>> = JsonMissing.of(),
        @JsonProperty("replace_prices")
        @ExcludeMissing
        private val replacePrices: JsonField<List<ReplacePrice>> = JsonMissing.of(),
        @JsonProperty("trial_duration_days")
        @ExcludeMissing
        private val trialDurationDays: JsonField<Long> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        fun changeOption(): ChangeOption = changeOption.getRequired("change_option")

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(): Optional<List<AddAdjustment>> =
            Optional.ofNullable(addAdjustments.getNullable("add_adjustments"))

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(): Optional<List<AddPrice>> =
            Optional.ofNullable(addPrices.getNullable("add_prices"))

        /**
         * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
         * with the plan change's effective date.
         */
        fun alignBillingWithPlanChangeDate(): Optional<Boolean> =
            Optional.ofNullable(
                alignBillingWithPlanChangeDate.getNullable("align_billing_with_plan_change_date")
            )

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(): Optional<Boolean> =
            Optional.ofNullable(autoCollection.getNullable("auto_collection"))

        /**
         * Reset billing periods to be aligned with the plan change's effective date or start of the
         * month. Defaults to `unchanged` which keeps subscription's existing billing cycle
         * alignment.
         */
        fun billingCycleAlignment(): Optional<BillingCycleAlignment> =
            Optional.ofNullable(billingCycleAlignment.getNullable("billing_cycle_alignment"))

        fun billingCycleAnchorConfiguration(): Optional<BillingCycleAnchorConfiguration> =
            Optional.ofNullable(
                billingCycleAnchorConfiguration.getNullable("billing_cycle_anchor_configuration")
            )

        /**
         * The date that the plan change should take effect. This parameter can only be passed if
         * the `change_option` is `requested_date`. If a date with no time is passed, the plan
         * change will happen at midnight in the customer's timezone.
         */
        fun changeDate(): Optional<OffsetDateTime> =
            Optional.ofNullable(changeDate.getNullable("change_date"))

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(): Optional<String> =
            Optional.ofNullable(couponRedemptionCode.getNullable("coupon_redemption_code"))

        @Deprecated("deprecated")
        fun creditsOverageRate(): Optional<Double> =
            Optional.ofNullable(creditsOverageRate.getNullable("credits_overage_rate"))

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(): Optional<String> =
            Optional.ofNullable(defaultInvoiceMemo.getNullable("default_invoice_memo"))

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(): Optional<String> =
            Optional.ofNullable(externalPlanId.getNullable("external_plan_id"))

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        fun filter(): Optional<String> = Optional.ofNullable(filter.getNullable("filter"))

        /** The phase of the plan to start with */
        fun initialPhaseOrder(): Optional<Long> =
            Optional.ofNullable(initialPhaseOrder.getNullable("initial_phase_order"))

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(): Optional<String> =
            Optional.ofNullable(invoicingThreshold.getNullable("invoicing_threshold"))

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(): Optional<Long> = Optional.ofNullable(netTerms.getNullable("net_terms"))

        @Deprecated("deprecated")
        fun perCreditOverageAmount(): Optional<Double> =
            Optional.ofNullable(perCreditOverageAmount.getNullable("per_credit_overage_amount"))

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(): Optional<String> = Optional.ofNullable(planId.getNullable("plan_id"))

        /**
         * Specifies which version of the plan to change to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(): Optional<Long> =
            Optional.ofNullable(planVersionNumber.getNullable("plan_version_number"))

        /** Optionally provide a list of overrides for prices on the plan */
        @Deprecated("deprecated")
        fun priceOverrides(): Optional<List<JsonValue>> =
            Optional.ofNullable(priceOverrides.getNullable("price_overrides"))

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(): Optional<List<RemoveAdjustment>> =
            Optional.ofNullable(removeAdjustments.getNullable("remove_adjustments"))

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(): Optional<List<RemovePrice>> =
            Optional.ofNullable(removePrices.getNullable("remove_prices"))

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(): Optional<List<ReplaceAdjustment>> =
            Optional.ofNullable(replaceAdjustments.getNullable("replace_adjustments"))

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(): Optional<List<ReplacePrice>> =
            Optional.ofNullable(replacePrices.getNullable("replace_prices"))

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(): Optional<Long> =
            Optional.ofNullable(trialDurationDays.getNullable("trial_duration_days"))

        @JsonProperty("change_option")
        @ExcludeMissing
        fun _changeOption(): JsonField<ChangeOption> = changeOption

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        @JsonProperty("add_adjustments")
        @ExcludeMissing
        fun _addAdjustments(): JsonField<List<AddAdjustment>> = addAdjustments

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        @JsonProperty("add_prices")
        @ExcludeMissing
        fun _addPrices(): JsonField<List<AddPrice>> = addPrices

        /**
         * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
         * with the plan change's effective date.
         */
        @JsonProperty("align_billing_with_plan_change_date")
        @ExcludeMissing
        fun _alignBillingWithPlanChangeDate(): JsonField<Boolean> = alignBillingWithPlanChangeDate

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        @JsonProperty("auto_collection")
        @ExcludeMissing
        fun _autoCollection(): JsonField<Boolean> = autoCollection

        /**
         * Reset billing periods to be aligned with the plan change's effective date or start of the
         * month. Defaults to `unchanged` which keeps subscription's existing billing cycle
         * alignment.
         */
        @JsonProperty("billing_cycle_alignment")
        @ExcludeMissing
        fun _billingCycleAlignment(): JsonField<BillingCycleAlignment> = billingCycleAlignment

        @JsonProperty("billing_cycle_anchor_configuration")
        @ExcludeMissing
        fun _billingCycleAnchorConfiguration(): JsonField<BillingCycleAnchorConfiguration> =
            billingCycleAnchorConfiguration

        /**
         * The date that the plan change should take effect. This parameter can only be passed if
         * the `change_option` is `requested_date`. If a date with no time is passed, the plan
         * change will happen at midnight in the customer's timezone.
         */
        @JsonProperty("change_date")
        @ExcludeMissing
        fun _changeDate(): JsonField<OffsetDateTime> = changeDate

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        @JsonProperty("coupon_redemption_code")
        @ExcludeMissing
        fun _couponRedemptionCode(): JsonField<String> = couponRedemptionCode

        @Deprecated("deprecated")
        @JsonProperty("credits_overage_rate")
        @ExcludeMissing
        fun _creditsOverageRate(): JsonField<Double> = creditsOverageRate

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        @JsonProperty("default_invoice_memo")
        @ExcludeMissing
        fun _defaultInvoiceMemo(): JsonField<String> = defaultInvoiceMemo

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        @JsonProperty("external_plan_id")
        @ExcludeMissing
        fun _externalPlanId(): JsonField<String> = externalPlanId

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        @JsonProperty("filter") @ExcludeMissing fun _filter(): JsonField<String> = filter

        /** The phase of the plan to start with */
        @JsonProperty("initial_phase_order")
        @ExcludeMissing
        fun _initialPhaseOrder(): JsonField<Long> = initialPhaseOrder

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        @JsonProperty("invoicing_threshold")
        @ExcludeMissing
        fun _invoicingThreshold(): JsonField<String> = invoicingThreshold

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        @JsonProperty("net_terms") @ExcludeMissing fun _netTerms(): JsonField<Long> = netTerms

        @Deprecated("deprecated")
        @JsonProperty("per_credit_overage_amount")
        @ExcludeMissing
        fun _perCreditOverageAmount(): JsonField<Double> = perCreditOverageAmount

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        @JsonProperty("plan_id") @ExcludeMissing fun _planId(): JsonField<String> = planId

        /**
         * Specifies which version of the plan to change to. If null, the default version will be
         * used.
         */
        @JsonProperty("plan_version_number")
        @ExcludeMissing
        fun _planVersionNumber(): JsonField<Long> = planVersionNumber

        /** Optionally provide a list of overrides for prices on the plan */
        @Deprecated("deprecated")
        @JsonProperty("price_overrides")
        @ExcludeMissing
        fun _priceOverrides(): JsonField<List<JsonValue>> = priceOverrides

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        @JsonProperty("remove_adjustments")
        @ExcludeMissing
        fun _removeAdjustments(): JsonField<List<RemoveAdjustment>> = removeAdjustments

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        @JsonProperty("remove_prices")
        @ExcludeMissing
        fun _removePrices(): JsonField<List<RemovePrice>> = removePrices

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        @JsonProperty("replace_adjustments")
        @ExcludeMissing
        fun _replaceAdjustments(): JsonField<List<ReplaceAdjustment>> = replaceAdjustments

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        @JsonProperty("replace_prices")
        @ExcludeMissing
        fun _replacePrices(): JsonField<List<ReplacePrice>> = replacePrices

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        @JsonProperty("trial_duration_days")
        @ExcludeMissing
        fun _trialDurationDays(): JsonField<Long> = trialDurationDays

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): Body = apply {
            if (validated) {
                return@apply
            }

            changeOption()
            addAdjustments().ifPresent { it.forEach { it.validate() } }
            addPrices().ifPresent { it.forEach { it.validate() } }
            alignBillingWithPlanChangeDate()
            autoCollection()
            billingCycleAlignment()
            billingCycleAnchorConfiguration().ifPresent { it.validate() }
            changeDate()
            couponRedemptionCode()
            creditsOverageRate()
            defaultInvoiceMemo()
            externalPlanId()
            filter()
            initialPhaseOrder()
            invoicingThreshold()
            netTerms()
            perCreditOverageAmount()
            planId()
            planVersionNumber()
            priceOverrides()
            removeAdjustments().ifPresent { it.forEach { it.validate() } }
            removePrices().ifPresent { it.forEach { it.validate() } }
            replaceAdjustments().ifPresent { it.forEach { it.validate() } }
            replacePrices().ifPresent { it.forEach { it.validate() } }
            trialDurationDays()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [Body]. */
        class Builder internal constructor() {

            private var changeOption: JsonField<ChangeOption>? = null
            private var addAdjustments: JsonField<MutableList<AddAdjustment>>? = null
            private var addPrices: JsonField<MutableList<AddPrice>>? = null
            private var alignBillingWithPlanChangeDate: JsonField<Boolean> = JsonMissing.of()
            private var autoCollection: JsonField<Boolean> = JsonMissing.of()
            private var billingCycleAlignment: JsonField<BillingCycleAlignment> = JsonMissing.of()
            private var billingCycleAnchorConfiguration:
                JsonField<BillingCycleAnchorConfiguration> =
                JsonMissing.of()
            private var changeDate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var couponRedemptionCode: JsonField<String> = JsonMissing.of()
            private var creditsOverageRate: JsonField<Double> = JsonMissing.of()
            private var defaultInvoiceMemo: JsonField<String> = JsonMissing.of()
            private var externalPlanId: JsonField<String> = JsonMissing.of()
            private var filter: JsonField<String> = JsonMissing.of()
            private var initialPhaseOrder: JsonField<Long> = JsonMissing.of()
            private var invoicingThreshold: JsonField<String> = JsonMissing.of()
            private var netTerms: JsonField<Long> = JsonMissing.of()
            private var perCreditOverageAmount: JsonField<Double> = JsonMissing.of()
            private var planId: JsonField<String> = JsonMissing.of()
            private var planVersionNumber: JsonField<Long> = JsonMissing.of()
            private var priceOverrides: JsonField<MutableList<JsonValue>>? = null
            private var removeAdjustments: JsonField<MutableList<RemoveAdjustment>>? = null
            private var removePrices: JsonField<MutableList<RemovePrice>>? = null
            private var replaceAdjustments: JsonField<MutableList<ReplaceAdjustment>>? = null
            private var replacePrices: JsonField<MutableList<ReplacePrice>>? = null
            private var trialDurationDays: JsonField<Long> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(body: Body) = apply {
                changeOption = body.changeOption
                addAdjustments = body.addAdjustments.map { it.toMutableList() }
                addPrices = body.addPrices.map { it.toMutableList() }
                alignBillingWithPlanChangeDate = body.alignBillingWithPlanChangeDate
                autoCollection = body.autoCollection
                billingCycleAlignment = body.billingCycleAlignment
                billingCycleAnchorConfiguration = body.billingCycleAnchorConfiguration
                changeDate = body.changeDate
                couponRedemptionCode = body.couponRedemptionCode
                creditsOverageRate = body.creditsOverageRate
                defaultInvoiceMemo = body.defaultInvoiceMemo
                externalPlanId = body.externalPlanId
                filter = body.filter
                initialPhaseOrder = body.initialPhaseOrder
                invoicingThreshold = body.invoicingThreshold
                netTerms = body.netTerms
                perCreditOverageAmount = body.perCreditOverageAmount
                planId = body.planId
                planVersionNumber = body.planVersionNumber
                priceOverrides = body.priceOverrides.map { it.toMutableList() }
                removeAdjustments = body.removeAdjustments.map { it.toMutableList() }
                removePrices = body.removePrices.map { it.toMutableList() }
                replaceAdjustments = body.replaceAdjustments.map { it.toMutableList() }
                replacePrices = body.replacePrices.map { it.toMutableList() }
                trialDurationDays = body.trialDurationDays
                additionalProperties = body.additionalProperties.toMutableMap()
            }

            fun changeOption(changeOption: ChangeOption) = changeOption(JsonField.of(changeOption))

            fun changeOption(changeOption: JsonField<ChangeOption>) = apply {
                this.changeOption = changeOption
            }

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAdjustments(addAdjustments: List<AddAdjustment>?) =
                addAdjustments(JsonField.ofNullable(addAdjustments))

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAdjustments(addAdjustments: Optional<List<AddAdjustment>>) =
                addAdjustments(addAdjustments.orElse(null))

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAdjustments(addAdjustments: JsonField<List<AddAdjustment>>) = apply {
                this.addAdjustments = addAdjustments.map { it.toMutableList() }
            }

            /**
             * Additional adjustments to be added to the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
                addAdjustments =
                    (addAdjustments ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(addAdjustment)
                    }
            }

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addPrices(addPrices: List<AddPrice>?) = addPrices(JsonField.ofNullable(addPrices))

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addPrices(addPrices: Optional<List<AddPrice>>) = addPrices(addPrices.orElse(null))

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addPrices(addPrices: JsonField<List<AddPrice>>) = apply {
                this.addPrices = addPrices.map { it.toMutableList() }
            }

            /**
             * Additional prices to be added to the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addAddPrice(addPrice: AddPrice) = apply {
                addPrices =
                    (addPrices ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(addPrice)
                    }
            }

            /**
             * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
             * with the plan change's effective date.
             */
            fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: Boolean?) =
                alignBillingWithPlanChangeDate(JsonField.ofNullable(alignBillingWithPlanChangeDate))

            /**
             * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
             * with the plan change's effective date.
             */
            fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: Boolean) =
                alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate as Boolean?)

            /**
             * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
             * with the plan change's effective date.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: Optional<Boolean>) =
                alignBillingWithPlanChangeDate(
                    alignBillingWithPlanChangeDate.orElse(null) as Boolean?
                )

            /**
             * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
             * with the plan change's effective date.
             */
            fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: JsonField<Boolean>) =
                apply {
                    this.alignBillingWithPlanChangeDate = alignBillingWithPlanChangeDate
                }

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            fun autoCollection(autoCollection: Boolean?) =
                autoCollection(JsonField.ofNullable(autoCollection))

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            fun autoCollection(autoCollection: Boolean) = autoCollection(autoCollection as Boolean?)

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun autoCollection(autoCollection: Optional<Boolean>) =
                autoCollection(autoCollection.orElse(null) as Boolean?)

            /**
             * Determines whether issued invoices for this subscription will automatically be
             * charged with the saved payment method on the due date. If not specified, this
             * defaults to the behavior configured for this customer.
             */
            fun autoCollection(autoCollection: JsonField<Boolean>) = apply {
                this.autoCollection = autoCollection
            }

            /**
             * Reset billing periods to be aligned with the plan change's effective date or start of
             * the month. Defaults to `unchanged` which keeps subscription's existing billing cycle
             * alignment.
             */
            fun billingCycleAlignment(billingCycleAlignment: BillingCycleAlignment?) =
                billingCycleAlignment(JsonField.ofNullable(billingCycleAlignment))

            /**
             * Reset billing periods to be aligned with the plan change's effective date or start of
             * the month. Defaults to `unchanged` which keeps subscription's existing billing cycle
             * alignment.
             */
            fun billingCycleAlignment(billingCycleAlignment: Optional<BillingCycleAlignment>) =
                billingCycleAlignment(billingCycleAlignment.orElse(null))

            /**
             * Reset billing periods to be aligned with the plan change's effective date or start of
             * the month. Defaults to `unchanged` which keeps subscription's existing billing cycle
             * alignment.
             */
            fun billingCycleAlignment(billingCycleAlignment: JsonField<BillingCycleAlignment>) =
                apply {
                    this.billingCycleAlignment = billingCycleAlignment
                }

            fun billingCycleAnchorConfiguration(
                billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?
            ) =
                billingCycleAnchorConfiguration(
                    JsonField.ofNullable(billingCycleAnchorConfiguration)
                )

            fun billingCycleAnchorConfiguration(
                billingCycleAnchorConfiguration: Optional<BillingCycleAnchorConfiguration>
            ) = billingCycleAnchorConfiguration(billingCycleAnchorConfiguration.orElse(null))

            fun billingCycleAnchorConfiguration(
                billingCycleAnchorConfiguration: JsonField<BillingCycleAnchorConfiguration>
            ) = apply { this.billingCycleAnchorConfiguration = billingCycleAnchorConfiguration }

            /**
             * The date that the plan change should take effect. This parameter can only be passed
             * if the `change_option` is `requested_date`. If a date with no time is passed, the
             * plan change will happen at midnight in the customer's timezone.
             */
            fun changeDate(changeDate: OffsetDateTime?) =
                changeDate(JsonField.ofNullable(changeDate))

            /**
             * The date that the plan change should take effect. This parameter can only be passed
             * if the `change_option` is `requested_date`. If a date with no time is passed, the
             * plan change will happen at midnight in the customer's timezone.
             */
            fun changeDate(changeDate: Optional<OffsetDateTime>) =
                changeDate(changeDate.orElse(null))

            /**
             * The date that the plan change should take effect. This parameter can only be passed
             * if the `change_option` is `requested_date`. If a date with no time is passed, the
             * plan change will happen at midnight in the customer's timezone.
             */
            fun changeDate(changeDate: JsonField<OffsetDateTime>) = apply {
                this.changeDate = changeDate
            }

            /**
             * Redemption code to be used for this subscription. If the coupon cannot be found by
             * its redemption code, or cannot be redeemed, an error response will be returned and
             * the subscription creation or plan change will not be scheduled.
             */
            fun couponRedemptionCode(couponRedemptionCode: String?) =
                couponRedemptionCode(JsonField.ofNullable(couponRedemptionCode))

            /**
             * Redemption code to be used for this subscription. If the coupon cannot be found by
             * its redemption code, or cannot be redeemed, an error response will be returned and
             * the subscription creation or plan change will not be scheduled.
             */
            fun couponRedemptionCode(couponRedemptionCode: Optional<String>) =
                couponRedemptionCode(couponRedemptionCode.orElse(null))

            /**
             * Redemption code to be used for this subscription. If the coupon cannot be found by
             * its redemption code, or cannot be redeemed, an error response will be returned and
             * the subscription creation or plan change will not be scheduled.
             */
            fun couponRedemptionCode(couponRedemptionCode: JsonField<String>) = apply {
                this.couponRedemptionCode = couponRedemptionCode
            }

            @Deprecated("deprecated")
            fun creditsOverageRate(creditsOverageRate: Double?) =
                creditsOverageRate(JsonField.ofNullable(creditsOverageRate))

            @Deprecated("deprecated")
            fun creditsOverageRate(creditsOverageRate: Double) =
                creditsOverageRate(creditsOverageRate as Double?)

            @Deprecated("deprecated")
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun creditsOverageRate(creditsOverageRate: Optional<Double>) =
                creditsOverageRate(creditsOverageRate.orElse(null) as Double?)

            @Deprecated("deprecated")
            fun creditsOverageRate(creditsOverageRate: JsonField<Double>) = apply {
                this.creditsOverageRate = creditsOverageRate
            }

            /**
             * Determines the default memo on this subscription's invoices. Note that if this is not
             * provided, it is determined by the plan configuration.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: String?) =
                defaultInvoiceMemo(JsonField.ofNullable(defaultInvoiceMemo))

            /**
             * Determines the default memo on this subscription's invoices. Note that if this is not
             * provided, it is determined by the plan configuration.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
                defaultInvoiceMemo(defaultInvoiceMemo.orElse(null))

            /**
             * Determines the default memo on this subscription's invoices. Note that if this is not
             * provided, it is determined by the plan configuration.
             */
            fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) = apply {
                this.defaultInvoiceMemo = defaultInvoiceMemo
            }

            /**
             * The external_plan_id of the plan that the given subscription should be switched to.
             * Note that either this property or `plan_id` must be specified.
             */
            fun externalPlanId(externalPlanId: String?) =
                externalPlanId(JsonField.ofNullable(externalPlanId))

            /**
             * The external_plan_id of the plan that the given subscription should be switched to.
             * Note that either this property or `plan_id` must be specified.
             */
            fun externalPlanId(externalPlanId: Optional<String>) =
                externalPlanId(externalPlanId.orElse(null))

            /**
             * The external_plan_id of the plan that the given subscription should be switched to.
             * Note that either this property or `plan_id` must be specified.
             */
            fun externalPlanId(externalPlanId: JsonField<String>) = apply {
                this.externalPlanId = externalPlanId
            }

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: String?) = filter(JsonField.ofNullable(filter))

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: Optional<String>) = filter(filter.orElse(null))

            /**
             * An additional filter to apply to usage queries. This filter must be expressed as a
             * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
             * null, usage queries will not include any additional filter.
             */
            fun filter(filter: JsonField<String>) = apply { this.filter = filter }

            /** The phase of the plan to start with */
            fun initialPhaseOrder(initialPhaseOrder: Long?) =
                initialPhaseOrder(JsonField.ofNullable(initialPhaseOrder))

            /** The phase of the plan to start with */
            fun initialPhaseOrder(initialPhaseOrder: Long) =
                initialPhaseOrder(initialPhaseOrder as Long?)

            /** The phase of the plan to start with */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun initialPhaseOrder(initialPhaseOrder: Optional<Long>) =
                initialPhaseOrder(initialPhaseOrder.orElse(null) as Long?)

            /** The phase of the plan to start with */
            fun initialPhaseOrder(initialPhaseOrder: JsonField<Long>) = apply {
                this.initialPhaseOrder = initialPhaseOrder
            }

            /**
             * When this subscription's accrued usage reaches this threshold, an invoice will be
             * issued for the subscription. If not specified, invoices will only be issued at the
             * end of the billing period.
             */
            fun invoicingThreshold(invoicingThreshold: String?) =
                invoicingThreshold(JsonField.ofNullable(invoicingThreshold))

            /**
             * When this subscription's accrued usage reaches this threshold, an invoice will be
             * issued for the subscription. If not specified, invoices will only be issued at the
             * end of the billing period.
             */
            fun invoicingThreshold(invoicingThreshold: Optional<String>) =
                invoicingThreshold(invoicingThreshold.orElse(null))

            /**
             * When this subscription's accrued usage reaches this threshold, an invoice will be
             * issued for the subscription. If not specified, invoices will only be issued at the
             * end of the billing period.
             */
            fun invoicingThreshold(invoicingThreshold: JsonField<String>) = apply {
                this.invoicingThreshold = invoicingThreshold
            }

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            fun netTerms(netTerms: Long?) = netTerms(JsonField.ofNullable(netTerms))

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.orElse(null) as Long?)

            /**
             * The net terms determines the difference between the invoice date and the issue date
             * for the invoice. If you intend the invoice to be due on issue, set this to 0. If not
             * provided, this defaults to the value specified in the plan.
             */
            fun netTerms(netTerms: JsonField<Long>) = apply { this.netTerms = netTerms }

            @Deprecated("deprecated")
            fun perCreditOverageAmount(perCreditOverageAmount: Double?) =
                perCreditOverageAmount(JsonField.ofNullable(perCreditOverageAmount))

            @Deprecated("deprecated")
            fun perCreditOverageAmount(perCreditOverageAmount: Double) =
                perCreditOverageAmount(perCreditOverageAmount as Double?)

            @Deprecated("deprecated")
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun perCreditOverageAmount(perCreditOverageAmount: Optional<Double>) =
                perCreditOverageAmount(perCreditOverageAmount.orElse(null) as Double?)

            @Deprecated("deprecated")
            fun perCreditOverageAmount(perCreditOverageAmount: JsonField<Double>) = apply {
                this.perCreditOverageAmount = perCreditOverageAmount
            }

            /**
             * The plan that the given subscription should be switched to. Note that either this
             * property or `external_plan_id` must be specified.
             */
            fun planId(planId: String?) = planId(JsonField.ofNullable(planId))

            /**
             * The plan that the given subscription should be switched to. Note that either this
             * property or `external_plan_id` must be specified.
             */
            fun planId(planId: Optional<String>) = planId(planId.orElse(null))

            /**
             * The plan that the given subscription should be switched to. Note that either this
             * property or `external_plan_id` must be specified.
             */
            fun planId(planId: JsonField<String>) = apply { this.planId = planId }

            /**
             * Specifies which version of the plan to change to. If null, the default version will
             * be used.
             */
            fun planVersionNumber(planVersionNumber: Long?) =
                planVersionNumber(JsonField.ofNullable(planVersionNumber))

            /**
             * Specifies which version of the plan to change to. If null, the default version will
             * be used.
             */
            fun planVersionNumber(planVersionNumber: Long) =
                planVersionNumber(planVersionNumber as Long?)

            /**
             * Specifies which version of the plan to change to. If null, the default version will
             * be used.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun planVersionNumber(planVersionNumber: Optional<Long>) =
                planVersionNumber(planVersionNumber.orElse(null) as Long?)

            /**
             * Specifies which version of the plan to change to. If null, the default version will
             * be used.
             */
            fun planVersionNumber(planVersionNumber: JsonField<Long>) = apply {
                this.planVersionNumber = planVersionNumber
            }

            /** Optionally provide a list of overrides for prices on the plan */
            @Deprecated("deprecated")
            fun priceOverrides(priceOverrides: List<JsonValue>?) =
                priceOverrides(JsonField.ofNullable(priceOverrides))

            /** Optionally provide a list of overrides for prices on the plan */
            @Deprecated("deprecated")
            fun priceOverrides(priceOverrides: Optional<List<JsonValue>>) =
                priceOverrides(priceOverrides.orElse(null))

            /** Optionally provide a list of overrides for prices on the plan */
            @Deprecated("deprecated")
            fun priceOverrides(priceOverrides: JsonField<List<JsonValue>>) = apply {
                this.priceOverrides = priceOverrides.map { it.toMutableList() }
            }

            /** Optionally provide a list of overrides for prices on the plan */
            @Deprecated("deprecated")
            fun addPriceOverride(priceOverride: JsonValue) = apply {
                priceOverrides =
                    (priceOverrides ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(priceOverride)
                    }
            }

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun removeAdjustments(removeAdjustments: List<RemoveAdjustment>?) =
                removeAdjustments(JsonField.ofNullable(removeAdjustments))

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun removeAdjustments(removeAdjustments: Optional<List<RemoveAdjustment>>) =
                removeAdjustments(removeAdjustments.orElse(null))

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun removeAdjustments(removeAdjustments: JsonField<List<RemoveAdjustment>>) = apply {
                this.removeAdjustments = removeAdjustments.map { it.toMutableList() }
            }

            /**
             * Plan adjustments to be removed from the subscription. (Only available for accounts
             * that have migrated off of legacy subscription overrides)
             */
            fun addRemoveAdjustment(removeAdjustment: RemoveAdjustment) = apply {
                removeAdjustments =
                    (removeAdjustments ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(removeAdjustment)
                    }
            }

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun removePrices(removePrices: List<RemovePrice>?) =
                removePrices(JsonField.ofNullable(removePrices))

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun removePrices(removePrices: Optional<List<RemovePrice>>) =
                removePrices(removePrices.orElse(null))

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun removePrices(removePrices: JsonField<List<RemovePrice>>) = apply {
                this.removePrices = removePrices.map { it.toMutableList() }
            }

            /**
             * Plan prices to be removed from the subscription. (Only available for accounts that
             * have migrated off of legacy subscription overrides)
             */
            fun addRemovePrice(removePrice: RemovePrice) = apply {
                removePrices =
                    (removePrices ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(removePrice)
                    }
            }

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replaceAdjustments(replaceAdjustments: List<ReplaceAdjustment>?) =
                replaceAdjustments(JsonField.ofNullable(replaceAdjustments))

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replaceAdjustments(replaceAdjustments: Optional<List<ReplaceAdjustment>>) =
                replaceAdjustments(replaceAdjustments.orElse(null))

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replaceAdjustments(replaceAdjustments: JsonField<List<ReplaceAdjustment>>) = apply {
                this.replaceAdjustments = replaceAdjustments.map { it.toMutableList() }
            }

            /**
             * Plan adjustments to be replaced with additional adjustments on the subscription.
             * (Only available for accounts that have migrated off of legacy subscription overrides)
             */
            fun addReplaceAdjustment(replaceAdjustment: ReplaceAdjustment) = apply {
                replaceAdjustments =
                    (replaceAdjustments ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(replaceAdjustment)
                    }
            }

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replacePrices(replacePrices: List<ReplacePrice>?) =
                replacePrices(JsonField.ofNullable(replacePrices))

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replacePrices(replacePrices: Optional<List<ReplacePrice>>) =
                replacePrices(replacePrices.orElse(null))

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun replacePrices(replacePrices: JsonField<List<ReplacePrice>>) = apply {
                this.replacePrices = replacePrices.map { it.toMutableList() }
            }

            /**
             * Plan prices to be replaced with additional prices on the subscription. (Only
             * available for accounts that have migrated off of legacy subscription overrides)
             */
            fun addReplacePrice(replacePrice: ReplacePrice) = apply {
                replacePrices =
                    (replacePrices ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(replacePrice)
                    }
            }

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            fun trialDurationDays(trialDurationDays: Long?) =
                trialDurationDays(JsonField.ofNullable(trialDurationDays))

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            fun trialDurationDays(trialDurationDays: Long) =
                trialDurationDays(trialDurationDays as Long?)

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun trialDurationDays(trialDurationDays: Optional<Long>) =
                trialDurationDays(trialDurationDays.orElse(null) as Long?)

            /**
             * The duration of the trial period in days. If not provided, this defaults to the value
             * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
             */
            fun trialDurationDays(trialDurationDays: JsonField<Long>) = apply {
                this.trialDurationDays = trialDurationDays
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): Body =
                Body(
                    checkRequired("changeOption", changeOption),
                    (addAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    (addPrices ?: JsonMissing.of()).map { it.toImmutable() },
                    alignBillingWithPlanChangeDate,
                    autoCollection,
                    billingCycleAlignment,
                    billingCycleAnchorConfiguration,
                    changeDate,
                    couponRedemptionCode,
                    creditsOverageRate,
                    defaultInvoiceMemo,
                    externalPlanId,
                    filter,
                    initialPhaseOrder,
                    invoicingThreshold,
                    netTerms,
                    perCreditOverageAmount,
                    planId,
                    planVersionNumber,
                    (priceOverrides ?: JsonMissing.of()).map { it.toImmutable() },
                    (removeAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    (removePrices ?: JsonMissing.of()).map { it.toImmutable() },
                    (replaceAdjustments ?: JsonMissing.of()).map { it.toImmutable() },
                    (replacePrices ?: JsonMissing.of()).map { it.toImmutable() },
                    trialDurationDays,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Body && changeOption == other.changeOption && addAdjustments == other.addAdjustments && addPrices == other.addPrices && alignBillingWithPlanChangeDate == other.alignBillingWithPlanChangeDate && autoCollection == other.autoCollection && billingCycleAlignment == other.billingCycleAlignment && billingCycleAnchorConfiguration == other.billingCycleAnchorConfiguration && changeDate == other.changeDate && couponRedemptionCode == other.couponRedemptionCode && creditsOverageRate == other.creditsOverageRate && defaultInvoiceMemo == other.defaultInvoiceMemo && externalPlanId == other.externalPlanId && filter == other.filter && initialPhaseOrder == other.initialPhaseOrder && invoicingThreshold == other.invoicingThreshold && netTerms == other.netTerms && perCreditOverageAmount == other.perCreditOverageAmount && planId == other.planId && planVersionNumber == other.planVersionNumber && priceOverrides == other.priceOverrides && removeAdjustments == other.removeAdjustments && removePrices == other.removePrices && replaceAdjustments == other.replaceAdjustments && replacePrices == other.replacePrices && trialDurationDays == other.trialDurationDays && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(changeOption, addAdjustments, addPrices, alignBillingWithPlanChangeDate, autoCollection, billingCycleAlignment, billingCycleAnchorConfiguration, changeDate, couponRedemptionCode, creditsOverageRate, defaultInvoiceMemo, externalPlanId, filter, initialPhaseOrder, invoicingThreshold, netTerms, perCreditOverageAmount, planId, planVersionNumber, priceOverrides, removeAdjustments, removePrices, replaceAdjustments, replacePrices, trialDurationDays, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "Body{changeOption=$changeOption, addAdjustments=$addAdjustments, addPrices=$addPrices, alignBillingWithPlanChangeDate=$alignBillingWithPlanChangeDate, autoCollection=$autoCollection, billingCycleAlignment=$billingCycleAlignment, billingCycleAnchorConfiguration=$billingCycleAnchorConfiguration, changeDate=$changeDate, couponRedemptionCode=$couponRedemptionCode, creditsOverageRate=$creditsOverageRate, defaultInvoiceMemo=$defaultInvoiceMemo, externalPlanId=$externalPlanId, filter=$filter, initialPhaseOrder=$initialPhaseOrder, invoicingThreshold=$invoicingThreshold, netTerms=$netTerms, perCreditOverageAmount=$perCreditOverageAmount, planId=$planId, planVersionNumber=$planVersionNumber, priceOverrides=$priceOverrides, removeAdjustments=$removeAdjustments, removePrices=$removePrices, replaceAdjustments=$replaceAdjustments, replacePrices=$replacePrices, trialDurationDays=$trialDurationDays, additionalProperties=$additionalProperties}"
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        @JvmStatic fun builder() = Builder()
    }

    /** A builder for [SubscriptionSchedulePlanChangeParams]. */
    @NoAutoDetect
    class Builder internal constructor() {

        private var subscriptionId: String? = null
        private var body: Body.Builder = Body.builder()
        private var additionalHeaders: Headers.Builder = Headers.builder()
        private var additionalQueryParams: QueryParams.Builder = QueryParams.builder()

        @JvmSynthetic
        internal fun from(
            subscriptionSchedulePlanChangeParams: SubscriptionSchedulePlanChangeParams
        ) = apply {
            subscriptionId = subscriptionSchedulePlanChangeParams.subscriptionId
            body = subscriptionSchedulePlanChangeParams.body.toBuilder()
            additionalHeaders = subscriptionSchedulePlanChangeParams.additionalHeaders.toBuilder()
            additionalQueryParams =
                subscriptionSchedulePlanChangeParams.additionalQueryParams.toBuilder()
        }

        fun subscriptionId(subscriptionId: String) = apply { this.subscriptionId = subscriptionId }

        fun changeOption(changeOption: ChangeOption) = apply { body.changeOption(changeOption) }

        fun changeOption(changeOption: JsonField<ChangeOption>) = apply {
            body.changeOption(changeOption)
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(addAdjustments: List<AddAdjustment>?) = apply {
            body.addAdjustments(addAdjustments)
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(addAdjustments: Optional<List<AddAdjustment>>) =
            addAdjustments(addAdjustments.orElse(null))

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAdjustments(addAdjustments: JsonField<List<AddAdjustment>>) = apply {
            body.addAdjustments(addAdjustments)
        }

        /**
         * Additional adjustments to be added to the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addAddAdjustment(addAdjustment: AddAdjustment) = apply {
            body.addAddAdjustment(addAdjustment)
        }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(addPrices: List<AddPrice>?) = apply { body.addPrices(addPrices) }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(addPrices: Optional<List<AddPrice>>) = addPrices(addPrices.orElse(null))

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addPrices(addPrices: JsonField<List<AddPrice>>) = apply { body.addPrices(addPrices) }

        /**
         * Additional prices to be added to the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addAddPrice(addPrice: AddPrice) = apply { body.addAddPrice(addPrice) }

        /**
         * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
         * with the plan change's effective date.
         */
        fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: Boolean?) = apply {
            body.alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate)
        }

        /**
         * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
         * with the plan change's effective date.
         */
        fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: Boolean) =
            alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate as Boolean?)

        /**
         * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
         * with the plan change's effective date.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: Optional<Boolean>) =
            alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate.orElse(null) as Boolean?)

        /**
         * [DEPRECATED] Use billing_cycle_alignment instead. Reset billing periods to be aligned
         * with the plan change's effective date.
         */
        fun alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate: JsonField<Boolean>) =
            apply {
                body.alignBillingWithPlanChangeDate(alignBillingWithPlanChangeDate)
            }

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(autoCollection: Boolean?) = apply { body.autoCollection(autoCollection) }

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(autoCollection: Boolean) = autoCollection(autoCollection as Boolean?)

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun autoCollection(autoCollection: Optional<Boolean>) =
            autoCollection(autoCollection.orElse(null) as Boolean?)

        /**
         * Determines whether issued invoices for this subscription will automatically be charged
         * with the saved payment method on the due date. If not specified, this defaults to the
         * behavior configured for this customer.
         */
        fun autoCollection(autoCollection: JsonField<Boolean>) = apply {
            body.autoCollection(autoCollection)
        }

        /**
         * Reset billing periods to be aligned with the plan change's effective date or start of the
         * month. Defaults to `unchanged` which keeps subscription's existing billing cycle
         * alignment.
         */
        fun billingCycleAlignment(billingCycleAlignment: BillingCycleAlignment?) = apply {
            body.billingCycleAlignment(billingCycleAlignment)
        }

        /**
         * Reset billing periods to be aligned with the plan change's effective date or start of the
         * month. Defaults to `unchanged` which keeps subscription's existing billing cycle
         * alignment.
         */
        fun billingCycleAlignment(billingCycleAlignment: Optional<BillingCycleAlignment>) =
            billingCycleAlignment(billingCycleAlignment.orElse(null))

        /**
         * Reset billing periods to be aligned with the plan change's effective date or start of the
         * month. Defaults to `unchanged` which keeps subscription's existing billing cycle
         * alignment.
         */
        fun billingCycleAlignment(billingCycleAlignment: JsonField<BillingCycleAlignment>) = apply {
            body.billingCycleAlignment(billingCycleAlignment)
        }

        fun billingCycleAnchorConfiguration(
            billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration?
        ) = apply { body.billingCycleAnchorConfiguration(billingCycleAnchorConfiguration) }

        fun billingCycleAnchorConfiguration(
            billingCycleAnchorConfiguration: Optional<BillingCycleAnchorConfiguration>
        ) = billingCycleAnchorConfiguration(billingCycleAnchorConfiguration.orElse(null))

        fun billingCycleAnchorConfiguration(
            billingCycleAnchorConfiguration: JsonField<BillingCycleAnchorConfiguration>
        ) = apply { body.billingCycleAnchorConfiguration(billingCycleAnchorConfiguration) }

        /**
         * The date that the plan change should take effect. This parameter can only be passed if
         * the `change_option` is `requested_date`. If a date with no time is passed, the plan
         * change will happen at midnight in the customer's timezone.
         */
        fun changeDate(changeDate: OffsetDateTime?) = apply { body.changeDate(changeDate) }

        /**
         * The date that the plan change should take effect. This parameter can only be passed if
         * the `change_option` is `requested_date`. If a date with no time is passed, the plan
         * change will happen at midnight in the customer's timezone.
         */
        fun changeDate(changeDate: Optional<OffsetDateTime>) = changeDate(changeDate.orElse(null))

        /**
         * The date that the plan change should take effect. This parameter can only be passed if
         * the `change_option` is `requested_date`. If a date with no time is passed, the plan
         * change will happen at midnight in the customer's timezone.
         */
        fun changeDate(changeDate: JsonField<OffsetDateTime>) = apply {
            body.changeDate(changeDate)
        }

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(couponRedemptionCode: String?) = apply {
            body.couponRedemptionCode(couponRedemptionCode)
        }

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(couponRedemptionCode: Optional<String>) =
            couponRedemptionCode(couponRedemptionCode.orElse(null))

        /**
         * Redemption code to be used for this subscription. If the coupon cannot be found by its
         * redemption code, or cannot be redeemed, an error response will be returned and the
         * subscription creation or plan change will not be scheduled.
         */
        fun couponRedemptionCode(couponRedemptionCode: JsonField<String>) = apply {
            body.couponRedemptionCode(couponRedemptionCode)
        }

        @Deprecated("deprecated")
        fun creditsOverageRate(creditsOverageRate: Double?) = apply {
            body.creditsOverageRate(creditsOverageRate)
        }

        @Deprecated("deprecated")
        fun creditsOverageRate(creditsOverageRate: Double) =
            creditsOverageRate(creditsOverageRate as Double?)

        @Deprecated("deprecated")
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun creditsOverageRate(creditsOverageRate: Optional<Double>) =
            creditsOverageRate(creditsOverageRate.orElse(null) as Double?)

        @Deprecated("deprecated")
        fun creditsOverageRate(creditsOverageRate: JsonField<Double>) = apply {
            body.creditsOverageRate(creditsOverageRate)
        }

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: String?) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: Optional<String>) =
            defaultInvoiceMemo(defaultInvoiceMemo.orElse(null))

        /**
         * Determines the default memo on this subscription's invoices. Note that if this is not
         * provided, it is determined by the plan configuration.
         */
        fun defaultInvoiceMemo(defaultInvoiceMemo: JsonField<String>) = apply {
            body.defaultInvoiceMemo(defaultInvoiceMemo)
        }

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(externalPlanId: String?) = apply { body.externalPlanId(externalPlanId) }

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(externalPlanId: Optional<String>) =
            externalPlanId(externalPlanId.orElse(null))

        /**
         * The external_plan_id of the plan that the given subscription should be switched to. Note
         * that either this property or `plan_id` must be specified.
         */
        fun externalPlanId(externalPlanId: JsonField<String>) = apply {
            body.externalPlanId(externalPlanId)
        }

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        fun filter(filter: String?) = apply { body.filter(filter) }

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        fun filter(filter: Optional<String>) = filter(filter.orElse(null))

        /**
         * An additional filter to apply to usage queries. This filter must be expressed as a
         * boolean [computed property](/extensibility/advanced-metrics#computed-properties). If
         * null, usage queries will not include any additional filter.
         */
        fun filter(filter: JsonField<String>) = apply { body.filter(filter) }

        /** The phase of the plan to start with */
        fun initialPhaseOrder(initialPhaseOrder: Long?) = apply {
            body.initialPhaseOrder(initialPhaseOrder)
        }

        /** The phase of the plan to start with */
        fun initialPhaseOrder(initialPhaseOrder: Long) =
            initialPhaseOrder(initialPhaseOrder as Long?)

        /** The phase of the plan to start with */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun initialPhaseOrder(initialPhaseOrder: Optional<Long>) =
            initialPhaseOrder(initialPhaseOrder.orElse(null) as Long?)

        /** The phase of the plan to start with */
        fun initialPhaseOrder(initialPhaseOrder: JsonField<Long>) = apply {
            body.initialPhaseOrder(initialPhaseOrder)
        }

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(invoicingThreshold: String?) = apply {
            body.invoicingThreshold(invoicingThreshold)
        }

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(invoicingThreshold: Optional<String>) =
            invoicingThreshold(invoicingThreshold.orElse(null))

        /**
         * When this subscription's accrued usage reaches this threshold, an invoice will be issued
         * for the subscription. If not specified, invoices will only be issued at the end of the
         * billing period.
         */
        fun invoicingThreshold(invoicingThreshold: JsonField<String>) = apply {
            body.invoicingThreshold(invoicingThreshold)
        }

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(netTerms: Long?) = apply { body.netTerms(netTerms) }

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(netTerms: Long) = netTerms(netTerms as Long?)

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun netTerms(netTerms: Optional<Long>) = netTerms(netTerms.orElse(null) as Long?)

        /**
         * The net terms determines the difference between the invoice date and the issue date for
         * the invoice. If you intend the invoice to be due on issue, set this to 0. If not
         * provided, this defaults to the value specified in the plan.
         */
        fun netTerms(netTerms: JsonField<Long>) = apply { body.netTerms(netTerms) }

        @Deprecated("deprecated")
        fun perCreditOverageAmount(perCreditOverageAmount: Double?) = apply {
            body.perCreditOverageAmount(perCreditOverageAmount)
        }

        @Deprecated("deprecated")
        fun perCreditOverageAmount(perCreditOverageAmount: Double) =
            perCreditOverageAmount(perCreditOverageAmount as Double?)

        @Deprecated("deprecated")
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun perCreditOverageAmount(perCreditOverageAmount: Optional<Double>) =
            perCreditOverageAmount(perCreditOverageAmount.orElse(null) as Double?)

        @Deprecated("deprecated")
        fun perCreditOverageAmount(perCreditOverageAmount: JsonField<Double>) = apply {
            body.perCreditOverageAmount(perCreditOverageAmount)
        }

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(planId: String?) = apply { body.planId(planId) }

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(planId: Optional<String>) = planId(planId.orElse(null))

        /**
         * The plan that the given subscription should be switched to. Note that either this
         * property or `external_plan_id` must be specified.
         */
        fun planId(planId: JsonField<String>) = apply { body.planId(planId) }

        /**
         * Specifies which version of the plan to change to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(planVersionNumber: Long?) = apply {
            body.planVersionNumber(planVersionNumber)
        }

        /**
         * Specifies which version of the plan to change to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(planVersionNumber: Long) =
            planVersionNumber(planVersionNumber as Long?)

        /**
         * Specifies which version of the plan to change to. If null, the default version will be
         * used.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun planVersionNumber(planVersionNumber: Optional<Long>) =
            planVersionNumber(planVersionNumber.orElse(null) as Long?)

        /**
         * Specifies which version of the plan to change to. If null, the default version will be
         * used.
         */
        fun planVersionNumber(planVersionNumber: JsonField<Long>) = apply {
            body.planVersionNumber(planVersionNumber)
        }

        /** Optionally provide a list of overrides for prices on the plan */
        @Deprecated("deprecated")
        fun priceOverrides(priceOverrides: List<JsonValue>?) = apply {
            body.priceOverrides(priceOverrides)
        }

        /** Optionally provide a list of overrides for prices on the plan */
        @Deprecated("deprecated")
        fun priceOverrides(priceOverrides: Optional<List<JsonValue>>) =
            priceOverrides(priceOverrides.orElse(null))

        /** Optionally provide a list of overrides for prices on the plan */
        @Deprecated("deprecated")
        fun priceOverrides(priceOverrides: JsonField<List<JsonValue>>) = apply {
            body.priceOverrides(priceOverrides)
        }

        /** Optionally provide a list of overrides for prices on the plan */
        @Deprecated("deprecated")
        fun addPriceOverride(priceOverride: JsonValue) = apply {
            body.addPriceOverride(priceOverride)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(removeAdjustments: List<RemoveAdjustment>?) = apply {
            body.removeAdjustments(removeAdjustments)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(removeAdjustments: Optional<List<RemoveAdjustment>>) =
            removeAdjustments(removeAdjustments.orElse(null))

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun removeAdjustments(removeAdjustments: JsonField<List<RemoveAdjustment>>) = apply {
            body.removeAdjustments(removeAdjustments)
        }

        /**
         * Plan adjustments to be removed from the subscription. (Only available for accounts that
         * have migrated off of legacy subscription overrides)
         */
        fun addRemoveAdjustment(removeAdjustment: RemoveAdjustment) = apply {
            body.addRemoveAdjustment(removeAdjustment)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(removePrices: List<RemovePrice>?) = apply {
            body.removePrices(removePrices)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(removePrices: Optional<List<RemovePrice>>) =
            removePrices(removePrices.orElse(null))

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun removePrices(removePrices: JsonField<List<RemovePrice>>) = apply {
            body.removePrices(removePrices)
        }

        /**
         * Plan prices to be removed from the subscription. (Only available for accounts that have
         * migrated off of legacy subscription overrides)
         */
        fun addRemovePrice(removePrice: RemovePrice) = apply { body.addRemovePrice(removePrice) }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(replaceAdjustments: List<ReplaceAdjustment>?) = apply {
            body.replaceAdjustments(replaceAdjustments)
        }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(replaceAdjustments: Optional<List<ReplaceAdjustment>>) =
            replaceAdjustments(replaceAdjustments.orElse(null))

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun replaceAdjustments(replaceAdjustments: JsonField<List<ReplaceAdjustment>>) = apply {
            body.replaceAdjustments(replaceAdjustments)
        }

        /**
         * Plan adjustments to be replaced with additional adjustments on the subscription. (Only
         * available for accounts that have migrated off of legacy subscription overrides)
         */
        fun addReplaceAdjustment(replaceAdjustment: ReplaceAdjustment) = apply {
            body.addReplaceAdjustment(replaceAdjustment)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(replacePrices: List<ReplacePrice>?) = apply {
            body.replacePrices(replacePrices)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(replacePrices: Optional<List<ReplacePrice>>) =
            replacePrices(replacePrices.orElse(null))

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun replacePrices(replacePrices: JsonField<List<ReplacePrice>>) = apply {
            body.replacePrices(replacePrices)
        }

        /**
         * Plan prices to be replaced with additional prices on the subscription. (Only available
         * for accounts that have migrated off of legacy subscription overrides)
         */
        fun addReplacePrice(replacePrice: ReplacePrice) = apply {
            body.addReplacePrice(replacePrice)
        }

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(trialDurationDays: Long?) = apply {
            body.trialDurationDays(trialDurationDays)
        }

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(trialDurationDays: Long) =
            trialDurationDays(trialDurationDays as Long?)

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
        fun trialDurationDays(trialDurationDays: Optional<Long>) =
            trialDurationDays(trialDurationDays.orElse(null) as Long?)

        /**
         * The duration of the trial period in days. If not provided, this defaults to the value
         * specified in the plan. If `0` is provided, the trial on the plan will be skipped.
         */
        fun trialDurationDays(trialDurationDays: JsonField<Long>) = apply {
            body.trialDurationDays(trialDurationDays)
        }

        fun additionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) = apply {
            body.additionalProperties(additionalBodyProperties)
        }

        fun putAdditionalBodyProperty(key: String, value: JsonValue) = apply {
            body.putAdditionalProperty(key, value)
        }

        fun putAllAdditionalBodyProperties(additionalBodyProperties: Map<String, JsonValue>) =
            apply {
                body.putAllAdditionalProperties(additionalBodyProperties)
            }

        fun removeAdditionalBodyProperty(key: String) = apply { body.removeAdditionalProperty(key) }

        fun removeAllAdditionalBodyProperties(keys: Set<String>) = apply {
            body.removeAllAdditionalProperties(keys)
        }

        fun additionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun additionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.clear()
            putAllAdditionalHeaders(additionalHeaders)
        }

        fun putAdditionalHeader(name: String, value: String) = apply {
            additionalHeaders.put(name, value)
        }

        fun putAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.put(name, values)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun putAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.putAll(additionalHeaders)
        }

        fun replaceAdditionalHeaders(name: String, value: String) = apply {
            additionalHeaders.replace(name, value)
        }

        fun replaceAdditionalHeaders(name: String, values: Iterable<String>) = apply {
            additionalHeaders.replace(name, values)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Headers) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun replaceAllAdditionalHeaders(additionalHeaders: Map<String, Iterable<String>>) = apply {
            this.additionalHeaders.replaceAll(additionalHeaders)
        }

        fun removeAdditionalHeaders(name: String) = apply { additionalHeaders.remove(name) }

        fun removeAllAdditionalHeaders(names: Set<String>) = apply {
            additionalHeaders.removeAll(names)
        }

        fun additionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun additionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) = apply {
            this.additionalQueryParams.clear()
            putAllAdditionalQueryParams(additionalQueryParams)
        }

        fun putAdditionalQueryParam(key: String, value: String) = apply {
            additionalQueryParams.put(key, value)
        }

        fun putAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.put(key, values)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.putAll(additionalQueryParams)
        }

        fun putAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.putAll(additionalQueryParams)
            }

        fun replaceAdditionalQueryParams(key: String, value: String) = apply {
            additionalQueryParams.replace(key, value)
        }

        fun replaceAdditionalQueryParams(key: String, values: Iterable<String>) = apply {
            additionalQueryParams.replace(key, values)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: QueryParams) = apply {
            this.additionalQueryParams.replaceAll(additionalQueryParams)
        }

        fun replaceAllAdditionalQueryParams(additionalQueryParams: Map<String, Iterable<String>>) =
            apply {
                this.additionalQueryParams.replaceAll(additionalQueryParams)
            }

        fun removeAdditionalQueryParams(key: String) = apply { additionalQueryParams.remove(key) }

        fun removeAllAdditionalQueryParams(keys: Set<String>) = apply {
            additionalQueryParams.removeAll(keys)
        }

        fun build(): SubscriptionSchedulePlanChangeParams =
            SubscriptionSchedulePlanChangeParams(
                checkRequired("subscriptionId", subscriptionId),
                body.build(),
                additionalHeaders.build(),
                additionalQueryParams.build(),
            )
    }

    class ChangeOption @JsonCreator private constructor(private val value: JsonField<String>) :
        Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val REQUESTED_DATE = of("requested_date")

            @JvmField val END_OF_SUBSCRIPTION_TERM = of("end_of_subscription_term")

            @JvmField val IMMEDIATE = of("immediate")

            @JvmStatic fun of(value: String) = ChangeOption(JsonField.of(value))
        }

        /** An enum containing [ChangeOption]'s known values. */
        enum class Known {
            REQUESTED_DATE,
            END_OF_SUBSCRIPTION_TERM,
            IMMEDIATE,
        }

        /**
         * An enum containing [ChangeOption]'s known values, as well as an [_UNKNOWN] member.
         *
         * An instance of [ChangeOption] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            REQUESTED_DATE,
            END_OF_SUBSCRIPTION_TERM,
            IMMEDIATE,
            /**
             * An enum member indicating that [ChangeOption] was instantiated with an unknown value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                REQUESTED_DATE -> Value.REQUESTED_DATE
                END_OF_SUBSCRIPTION_TERM -> Value.END_OF_SUBSCRIPTION_TERM
                IMMEDIATE -> Value.IMMEDIATE
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws OrbInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                REQUESTED_DATE -> Known.REQUESTED_DATE
                END_OF_SUBSCRIPTION_TERM -> Known.END_OF_SUBSCRIPTION_TERM
                IMMEDIATE -> Known.IMMEDIATE
                else -> throw OrbInvalidDataException("Unknown ChangeOption: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ChangeOption && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    @NoAutoDetect
    class AddAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment")
        @ExcludeMissing
        private val adjustment: JsonField<Adjustment> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<OffsetDateTime> = JsonMissing.of(),
        @JsonProperty("plan_phase_order")
        @ExcludeMissing
        private val planPhaseOrder: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<OffsetDateTime> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        fun adjustment(): Adjustment = adjustment.getRequired("adjustment")

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription.
         */
        fun endDate(): Optional<OffsetDateTime> =
            Optional.ofNullable(endDate.getNullable("end_date"))

        /** The phase to add this adjustment to. */
        fun planPhaseOrder(): Optional<Long> =
            Optional.ofNullable(planPhaseOrder.getNullable("plan_phase_order"))

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription. If null, the adjustment will start when the
         * phase or subscription starts.
         */
        fun startDate(): Optional<OffsetDateTime> =
            Optional.ofNullable(startDate.getNullable("start_date"))

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment")
        @ExcludeMissing
        fun _adjustment(): JsonField<Adjustment> = adjustment

        /**
         * The end date of the adjustment interval. This is the date that the adjustment will stop
         * affecting prices on the subscription.
         */
        @JsonProperty("end_date")
        @ExcludeMissing
        fun _endDate(): JsonField<OffsetDateTime> = endDate

        /** The phase to add this adjustment to. */
        @JsonProperty("plan_phase_order")
        @ExcludeMissing
        fun _planPhaseOrder(): JsonField<Long> = planPhaseOrder

        /**
         * The start date of the adjustment interval. This is the date that the adjustment will
         * start affecting prices on the subscription. If null, the adjustment will start when the
         * phase or subscription starts.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<OffsetDateTime> = startDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): AddAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustment().validate()
            endDate()
            planPhaseOrder()
            startDate()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AddAdjustment]. */
        class Builder internal constructor() {

            private var adjustment: JsonField<Adjustment>? = null
            private var endDate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var planPhaseOrder: JsonField<Long> = JsonMissing.of()
            private var startDate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addAdjustment: AddAdjustment) = apply {
                adjustment = addAdjustment.adjustment
                endDate = addAdjustment.endDate
                planPhaseOrder = addAdjustment.planPhaseOrder
                startDate = addAdjustment.startDate
                additionalProperties = addAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = adjustment(JsonField.of(adjustment))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: JsonField<Adjustment>) = apply {
                this.adjustment = adjustment
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newPercentageDiscount: Adjustment.NewPercentageDiscount) =
                adjustment(Adjustment.ofNewPercentageDiscount(newPercentageDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newUsageDiscount: Adjustment.NewUsageDiscount) =
                adjustment(Adjustment.ofNewUsageDiscount(newUsageDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newAmountDiscount: Adjustment.NewAmountDiscount) =
                adjustment(Adjustment.ofNewAmountDiscount(newAmountDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newMinimum: Adjustment.NewMinimum) =
                adjustment(Adjustment.ofNewMinimum(newMinimum))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newMaximum: Adjustment.NewMaximum) =
                adjustment(Adjustment.ofNewMaximum(newMaximum))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: OffsetDateTime?) = endDate(JsonField.ofNullable(endDate))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: Optional<OffsetDateTime>) = endDate(endDate.orElse(null))

            /**
             * The end date of the adjustment interval. This is the date that the adjustment will
             * stop affecting prices on the subscription.
             */
            fun endDate(endDate: JsonField<OffsetDateTime>) = apply { this.endDate = endDate }

            /** The phase to add this adjustment to. */
            fun planPhaseOrder(planPhaseOrder: Long?) =
                planPhaseOrder(JsonField.ofNullable(planPhaseOrder))

            /** The phase to add this adjustment to. */
            fun planPhaseOrder(planPhaseOrder: Long) = planPhaseOrder(planPhaseOrder as Long?)

            /** The phase to add this adjustment to. */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun planPhaseOrder(planPhaseOrder: Optional<Long>) =
                planPhaseOrder(planPhaseOrder.orElse(null) as Long?)

            /** The phase to add this adjustment to. */
            fun planPhaseOrder(planPhaseOrder: JsonField<Long>) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun startDate(startDate: OffsetDateTime?) = startDate(JsonField.ofNullable(startDate))

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun startDate(startDate: Optional<OffsetDateTime>) = startDate(startDate.orElse(null))

            /**
             * The start date of the adjustment interval. This is the date that the adjustment will
             * start affecting prices on the subscription. If null, the adjustment will start when
             * the phase or subscription starts.
             */
            fun startDate(startDate: JsonField<OffsetDateTime>) = apply {
                this.startDate = startDate
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddAdjustment =
                AddAdjustment(
                    checkRequired("adjustment", adjustment),
                    endDate,
                    planPhaseOrder,
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Adjustment = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewPercentageDiscount(
                            newPercentageDiscount: NewPercentageDiscount
                        ) {
                            newPercentageDiscount.validate()
                        }

                        override fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount) {
                            newUsageDiscount.validate()
                        }

                        override fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount) {
                            newAmountDiscount.validate()
                        }

                        override fun visitNewMinimum(newMinimum: NewMinimum) {
                            newMinimum.validate()
                        }

                        override fun visitNewMaximum(newMaximum: NewMaximum) {
                            newMaximum.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            /**
             * An interface that defines how to map each variant of [Adjustment] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                /**
                 * Maps an unknown variant of [Adjustment] to a value of type [T].
                 *
                 * An instance of [Adjustment] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newPercentageDiscount = it, _json = json)
                                }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newUsageDiscount = it, _json = json)
                                }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newAmountDiscount = it, _json = json)
                                }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMinimum = it, _json = json)
                                }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMaximum = it, _json = json)
                                }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount(): JsonField<Double> = percentageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewPercentageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    percentageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewPercentageDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var percentageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        adjustmentType = newPercentageDiscount.adjustmentType
                        appliesToPriceIds =
                            newPercentageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("percentageDiscount", percentageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        PERCENTAGE_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && percentageDiscount == other.percentageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, percentageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, percentageDiscount=$percentageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("usage_discount")
                @ExcludeMissing
                private val usageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun usageDiscount(): Double = usageDiscount.getRequired("usage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("usage_discount")
                @ExcludeMissing
                fun _usageDiscount(): JsonField<Double> = usageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewUsageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    usageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewUsageDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var usageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        adjustmentType = newUsageDiscount.adjustmentType
                        appliesToPriceIds =
                            newUsageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        usageDiscount = newUsageDiscount.usageDiscount
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun usageDiscount(usageDiscount: Double) =
                        usageDiscount(JsonField.of(usageDiscount))

                    fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("usageDiscount", usageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        USAGE_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        USAGE_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && usageDiscount == other.usageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, usageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, usageDiscount=$usageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("amount_discount")
                @ExcludeMissing
                private val amountDiscount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun amountDiscount(): String = amountDiscount.getRequired("amount_discount")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount(): JsonField<String> = amountDiscount

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewAmountDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    amountDiscount()
                    appliesToPriceIds()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewAmountDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var amountDiscount: JsonField<String>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        appliesToPriceIds =
                            newAmountDiscount.appliesToPriceIds.map { it.toMutableList() }
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) =
                        amountDiscount(JsonField.of(amountDiscount))

                    fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("amountDiscount", amountDiscount),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        AMOUNT_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        AMOUNT_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, amountDiscount, appliesToPriceIds, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("minimum_amount")
                @ExcludeMissing
                private val minimumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /** The item ID that revenue from this minimum will be attributed to. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("minimum_amount")
                @ExcludeMissing
                fun _minimumAmount(): JsonField<String> = minimumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMinimum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    itemId()
                    minimumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewMinimum]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var itemId: JsonField<String>? = null
                    private var minimumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        adjustmentType = newMinimum.adjustmentType
                        appliesToPriceIds = newMinimum.appliesToPriceIds.map { it.toMutableList() }
                        itemId = newMinimum.itemId
                        minimumAmount = newMinimum.minimumAmount
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun minimumAmount(minimumAmount: String) =
                        minimumAmount(JsonField.of(minimumAmount))

                    fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("itemId", itemId),
                            checkRequired("minimumAmount", minimumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        MINIMUM
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MINIMUM,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && itemId == other.itemId && minimumAmount == other.minimumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, itemId, minimumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, itemId=$itemId, minimumAmount=$minimumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("maximum_amount")
                @ExcludeMissing
                private val maximumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun maximumAmount(): String = maximumAmount.getRequired("maximum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("maximum_amount")
                @ExcludeMissing
                fun _maximumAmount(): JsonField<String> = maximumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMaximum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    maximumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewMaximum]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var maximumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        adjustmentType = newMaximum.adjustmentType
                        appliesToPriceIds = newMaximum.appliesToPriceIds.map { it.toMutableList() }
                        maximumAmount = newMaximum.maximumAmount
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun maximumAmount(maximumAmount: String) =
                        maximumAmount(JsonField.of(maximumAmount))

                    fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("maximumAmount", maximumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        MAXIMUM
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MAXIMUM,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && maximumAmount == other.maximumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, maximumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, maximumAmount=$maximumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddAdjustment && adjustment == other.adjustment && endDate == other.endDate && planPhaseOrder == other.planPhaseOrder && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, endDate, planPhaseOrder, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddAdjustment{adjustment=$adjustment, endDate=$endDate, planPhaseOrder=$planPhaseOrder, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class AddPrice
    @JsonCreator
    private constructor(
        @JsonProperty("allocation_price")
        @ExcludeMissing
        private val allocationPrice: JsonField<AllocationPrice> = JsonMissing.of(),
        @JsonProperty("discounts")
        @ExcludeMissing
        private val discounts: JsonField<List<Discount>> = JsonMissing.of(),
        @JsonProperty("end_date")
        @ExcludeMissing
        private val endDate: JsonField<OffsetDateTime> = JsonMissing.of(),
        @JsonProperty("external_price_id")
        @ExcludeMissing
        private val externalPriceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        private val maximumAmount: JsonField<String> = JsonMissing.of(),
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        private val minimumAmount: JsonField<String> = JsonMissing.of(),
        @JsonProperty("plan_phase_order")
        @ExcludeMissing
        private val planPhaseOrder: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("price")
        @ExcludeMissing
        private val price: JsonField<Price> = JsonMissing.of(),
        @JsonProperty("price_id")
        @ExcludeMissing
        private val priceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("start_date")
        @ExcludeMissing
        private val startDate: JsonField<OffsetDateTime> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new allocation price to create and add to the subscription. */
        fun allocationPrice(): Optional<AllocationPrice> =
            Optional.ofNullable(allocationPrice.getNullable("allocation_price"))

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this price.
         */
        @Deprecated("deprecated")
        fun discounts(): Optional<List<Discount>> =
            Optional.ofNullable(discounts.getNullable("discounts"))

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription. If null, billing will end when the phase or subscription ends.
         */
        fun endDate(): Optional<OffsetDateTime> =
            Optional.ofNullable(endDate.getNullable("end_date"))

        /** The external price id of the price to add to the subscription. */
        fun externalPriceId(): Optional<String> =
            Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
         * price.
         */
        @Deprecated("deprecated")
        fun maximumAmount(): Optional<String> =
            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
         * price.
         */
        @Deprecated("deprecated")
        fun minimumAmount(): Optional<String> =
            Optional.ofNullable(minimumAmount.getNullable("minimum_amount"))

        /** The phase to add this price to. */
        fun planPhaseOrder(): Optional<Long> =
            Optional.ofNullable(planPhaseOrder.getNullable("plan_phase_order"))

        /** The definition of a new price to create and add to the subscription. */
        fun price(): Optional<Price> = Optional.ofNullable(price.getNullable("price"))

        /** The id of the price to add to the subscription. */
        fun priceId(): Optional<String> = Optional.ofNullable(priceId.getNullable("price_id"))

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription. If null, billing will start when the phase or subscription starts.
         */
        fun startDate(): Optional<OffsetDateTime> =
            Optional.ofNullable(startDate.getNullable("start_date"))

        /** The definition of a new allocation price to create and add to the subscription. */
        @JsonProperty("allocation_price")
        @ExcludeMissing
        fun _allocationPrice(): JsonField<AllocationPrice> = allocationPrice

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this price.
         */
        @Deprecated("deprecated")
        @JsonProperty("discounts")
        @ExcludeMissing
        fun _discounts(): JsonField<List<Discount>> = discounts

        /**
         * The end date of the price interval. This is the date that the price will stop billing on
         * the subscription. If null, billing will end when the phase or subscription ends.
         */
        @JsonProperty("end_date")
        @ExcludeMissing
        fun _endDate(): JsonField<OffsetDateTime> = endDate

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id")
        @ExcludeMissing
        fun _externalPriceId(): JsonField<String> = externalPriceId

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
         * price.
         */
        @Deprecated("deprecated")
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        fun _maximumAmount(): JsonField<String> = maximumAmount

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
         * price.
         */
        @Deprecated("deprecated")
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        fun _minimumAmount(): JsonField<String> = minimumAmount

        /** The phase to add this price to. */
        @JsonProperty("plan_phase_order")
        @ExcludeMissing
        fun _planPhaseOrder(): JsonField<Long> = planPhaseOrder

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") @ExcludeMissing fun _price(): JsonField<Price> = price

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") @ExcludeMissing fun _priceId(): JsonField<String> = priceId

        /**
         * The start date of the price interval. This is the date that the price will start billing
         * on the subscription. If null, billing will start when the phase or subscription starts.
         */
        @JsonProperty("start_date")
        @ExcludeMissing
        fun _startDate(): JsonField<OffsetDateTime> = startDate

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): AddPrice = apply {
            if (validated) {
                return@apply
            }

            allocationPrice().ifPresent { it.validate() }
            discounts().ifPresent { it.forEach { it.validate() } }
            endDate()
            externalPriceId()
            maximumAmount()
            minimumAmount()
            planPhaseOrder()
            price().ifPresent { it.validate() }
            priceId()
            startDate()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [AddPrice]. */
        class Builder internal constructor() {

            private var allocationPrice: JsonField<AllocationPrice> = JsonMissing.of()
            private var discounts: JsonField<MutableList<Discount>>? = null
            private var endDate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var externalPriceId: JsonField<String> = JsonMissing.of()
            private var maximumAmount: JsonField<String> = JsonMissing.of()
            private var minimumAmount: JsonField<String> = JsonMissing.of()
            private var planPhaseOrder: JsonField<Long> = JsonMissing.of()
            private var price: JsonField<Price> = JsonMissing.of()
            private var priceId: JsonField<String> = JsonMissing.of()
            private var startDate: JsonField<OffsetDateTime> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(addPrice: AddPrice) = apply {
                allocationPrice = addPrice.allocationPrice
                discounts = addPrice.discounts.map { it.toMutableList() }
                endDate = addPrice.endDate
                externalPriceId = addPrice.externalPriceId
                maximumAmount = addPrice.maximumAmount
                minimumAmount = addPrice.minimumAmount
                planPhaseOrder = addPrice.planPhaseOrder
                price = addPrice.price
                priceId = addPrice.priceId
                startDate = addPrice.startDate
                additionalProperties = addPrice.additionalProperties.toMutableMap()
            }

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: AllocationPrice?) =
                allocationPrice(JsonField.ofNullable(allocationPrice))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: Optional<AllocationPrice>) =
                allocationPrice(allocationPrice.orElse(null))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: JsonField<AllocationPrice>) = apply {
                this.allocationPrice = allocationPrice
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            @Deprecated("deprecated")
            fun discounts(discounts: List<Discount>?) = discounts(JsonField.ofNullable(discounts))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            @Deprecated("deprecated")
            fun discounts(discounts: Optional<List<Discount>>) = discounts(discounts.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            @Deprecated("deprecated")
            fun discounts(discounts: JsonField<List<Discount>>) = apply {
                this.discounts = discounts.map { it.toMutableList() }
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for this
             * price.
             */
            @Deprecated("deprecated")
            fun addDiscount(discount: Discount) = apply {
                discounts =
                    (discounts ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(discount)
                    }
            }

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription. If null, billing will end when the phase or subscription ends.
             */
            fun endDate(endDate: OffsetDateTime?) = endDate(JsonField.ofNullable(endDate))

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription. If null, billing will end when the phase or subscription ends.
             */
            fun endDate(endDate: Optional<OffsetDateTime>) = endDate(endDate.orElse(null))

            /**
             * The end date of the price interval. This is the date that the price will stop billing
             * on the subscription. If null, billing will end when the phase or subscription ends.
             */
            fun endDate(endDate: JsonField<OffsetDateTime>) = apply { this.endDate = endDate }

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String?) =
                externalPriceId(JsonField.ofNullable(externalPriceId))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                this.externalPriceId = externalPriceId
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
             * price.
             */
            @Deprecated("deprecated")
            fun maximumAmount(maximumAmount: String?) =
                maximumAmount(JsonField.ofNullable(maximumAmount))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
             * price.
             */
            @Deprecated("deprecated")
            fun maximumAmount(maximumAmount: Optional<String>) =
                maximumAmount(maximumAmount.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for this
             * price.
             */
            @Deprecated("deprecated")
            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                this.maximumAmount = maximumAmount
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
             * price.
             */
            @Deprecated("deprecated")
            fun minimumAmount(minimumAmount: String?) =
                minimumAmount(JsonField.ofNullable(minimumAmount))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
             * price.
             */
            @Deprecated("deprecated")
            fun minimumAmount(minimumAmount: Optional<String>) =
                minimumAmount(minimumAmount.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for this
             * price.
             */
            @Deprecated("deprecated")
            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                this.minimumAmount = minimumAmount
            }

            /** The phase to add this price to. */
            fun planPhaseOrder(planPhaseOrder: Long?) =
                planPhaseOrder(JsonField.ofNullable(planPhaseOrder))

            /** The phase to add this price to. */
            fun planPhaseOrder(planPhaseOrder: Long) = planPhaseOrder(planPhaseOrder as Long?)

            /** The phase to add this price to. */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun planPhaseOrder(planPhaseOrder: Optional<Long>) =
                planPhaseOrder(planPhaseOrder.orElse(null) as Long?)

            /** The phase to add this price to. */
            fun planPhaseOrder(planPhaseOrder: JsonField<Long>) = apply {
                this.planPhaseOrder = planPhaseOrder
            }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price?) = price(JsonField.ofNullable(price))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Optional<Price>) = price(price.orElse(null))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: JsonField<Price>) = apply { this.price = price }

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionUnit: Price.NewSubscriptionUnitPrice) =
                price(Price.ofNewSubscriptionUnit(newSubscriptionUnit))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionPackage: Price.NewSubscriptionPackagePrice) =
                price(Price.ofNewSubscriptionPackage(newSubscriptionPackage))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionMatrix: Price.NewSubscriptionMatrixPrice) =
                price(Price.ofNewSubscriptionMatrix(newSubscriptionMatrix))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionTiered: Price.NewSubscriptionTieredPrice) =
                price(Price.ofNewSubscriptionTiered(newSubscriptionTiered))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionTieredBps: Price.NewSubscriptionTieredBpsPrice) =
                price(Price.ofNewSubscriptionTieredBps(newSubscriptionTieredBps))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionBps: Price.NewSubscriptionBpsPrice) =
                price(Price.ofNewSubscriptionBps(newSubscriptionBps))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionBulkBps: Price.NewSubscriptionBulkBpsPrice) =
                price(Price.ofNewSubscriptionBulkBps(newSubscriptionBulkBps))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionBulk: Price.NewSubscriptionBulkPrice) =
                price(Price.ofNewSubscriptionBulk(newSubscriptionBulk))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionThresholdTotalAmount: Price.NewSubscriptionThresholdTotalAmountPrice
            ) =
                price(
                    Price.ofNewSubscriptionThresholdTotalAmount(newSubscriptionThresholdTotalAmount)
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionTieredPackage: Price.NewSubscriptionTieredPackagePrice) =
                price(Price.ofNewSubscriptionTieredPackage(newSubscriptionTieredPackage))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionTieredWithMinimum: Price.NewSubscriptionTieredWithMinimumPrice
            ) = price(Price.ofNewSubscriptionTieredWithMinimum(newSubscriptionTieredWithMinimum))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionUnitWithPercent: Price.NewSubscriptionUnitWithPercentPrice) =
                price(Price.ofNewSubscriptionUnitWithPercent(newSubscriptionUnitWithPercent))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionPackageWithAllocation:
                    Price.NewSubscriptionPackageWithAllocationPrice
            ) =
                price(
                    Price.ofNewSubscriptionPackageWithAllocation(
                        newSubscriptionPackageWithAllocation
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionTierWithProration: Price.NewSubscriptionTierWithProrationPrice
            ) = price(Price.ofNewSubscriptionTierWithProration(newSubscriptionTierWithProration))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionUnitWithProration: Price.NewSubscriptionUnitWithProrationPrice
            ) = price(Price.ofNewSubscriptionUnitWithProration(newSubscriptionUnitWithProration))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionGroupedAllocation: Price.NewSubscriptionGroupedAllocationPrice
            ) = price(Price.ofNewSubscriptionGroupedAllocation(newSubscriptionGroupedAllocation))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionGroupedWithProratedMinimum:
                    Price.NewSubscriptionGroupedWithProratedMinimumPrice
            ) =
                price(
                    Price.ofNewSubscriptionGroupedWithProratedMinimum(
                        newSubscriptionGroupedWithProratedMinimum
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionBulkWithProration: Price.NewSubscriptionBulkWithProrationPrice
            ) = price(Price.ofNewSubscriptionBulkWithProration(newSubscriptionBulkWithProration))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String?) = priceId(JsonField.ofNullable(priceId))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: JsonField<String>) = apply { this.priceId = priceId }

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription. If null, billing will start when the phase or
             * subscription starts.
             */
            fun startDate(startDate: OffsetDateTime?) = startDate(JsonField.ofNullable(startDate))

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription. If null, billing will start when the phase or
             * subscription starts.
             */
            fun startDate(startDate: Optional<OffsetDateTime>) = startDate(startDate.orElse(null))

            /**
             * The start date of the price interval. This is the date that the price will start
             * billing on the subscription. If null, billing will start when the phase or
             * subscription starts.
             */
            fun startDate(startDate: JsonField<OffsetDateTime>) = apply {
                this.startDate = startDate
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): AddPrice =
                AddPrice(
                    allocationPrice,
                    (discounts ?: JsonMissing.of()).map { it.toImmutable() },
                    endDate,
                    externalPriceId,
                    maximumAmount,
                    minimumAmount,
                    planPhaseOrder,
                    price,
                    priceId,
                    startDate,
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new allocation price to create and add to the subscription. */
        @NoAutoDetect
        class AllocationPrice
        @JsonCreator
        private constructor(
            @JsonProperty("amount")
            @ExcludeMissing
            private val amount: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cadence")
            @ExcludeMissing
            private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("currency")
            @ExcludeMissing
            private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            private val expiresAtEndOfCadence: JsonField<Boolean> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            fun amount(): String = amount.getRequired("amount")

            /** The cadence at which to allocate the amount to the customer. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            fun expiresAtEndOfCadence(): Boolean =
                expiresAtEndOfCadence.getRequired("expires_at_end_of_cadence")

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            @JsonProperty("amount") @ExcludeMissing fun _amount(): JsonField<String> = amount

            /** The cadence at which to allocate the amount to the customer. */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            fun _expiresAtEndOfCadence(): JsonField<Boolean> = expiresAtEndOfCadence

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): AllocationPrice = apply {
                if (validated) {
                    return@apply
                }

                amount()
                cadence()
                currency()
                expiresAtEndOfCadence()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [AllocationPrice]. */
            class Builder internal constructor() {

                private var amount: JsonField<String>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var expiresAtEndOfCadence: JsonField<Boolean>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(allocationPrice: AllocationPrice) = apply {
                    amount = allocationPrice.amount
                    cadence = allocationPrice.cadence
                    currency = allocationPrice.currency
                    expiresAtEndOfCadence = allocationPrice.expiresAtEndOfCadence
                    additionalProperties = allocationPrice.additionalProperties.toMutableMap()
                }

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: String) = amount(JsonField.of(amount))

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: JsonField<String>) = apply { this.amount = amount }

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: Boolean) =
                    expiresAtEndOfCadence(JsonField.of(expiresAtEndOfCadence))

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: JsonField<Boolean>) = apply {
                    this.expiresAtEndOfCadence = expiresAtEndOfCadence
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): AllocationPrice =
                    AllocationPrice(
                        checkRequired("amount", amount),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("expiresAtEndOfCadence", expiresAtEndOfCadence),
                        additionalProperties.toImmutable(),
                    )
            }

            /** The cadence at which to allocate the amount to the customer. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ONE_TIME -> Value.ONE_TIME
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        ANNUAL -> Value.ANNUAL
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ONE_TIME -> Known.ONE_TIME
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        ANNUAL -> Known.ANNUAL
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is AllocationPrice && amount == other.amount && cadence == other.cadence && currency == other.currency && expiresAtEndOfCadence == other.expiresAtEndOfCadence && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(amount, cadence, currency, expiresAtEndOfCadence, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "AllocationPrice{amount=$amount, cadence=$cadence, currency=$currency, expiresAtEndOfCadence=$expiresAtEndOfCadence, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class Discount
        @JsonCreator
        private constructor(
            @JsonProperty("discount_type")
            @ExcludeMissing
            private val discountType: JsonField<DiscountType> = JsonMissing.of(),
            @JsonProperty("amount_discount")
            @ExcludeMissing
            private val amountDiscount: JsonField<String> = JsonMissing.of(),
            @JsonProperty("percentage_discount")
            @ExcludeMissing
            private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("usage_discount")
            @ExcludeMissing
            private val usageDiscount: JsonField<Double> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            fun discountType(): DiscountType = discountType.getRequired("discount_type")

            /** Only available if discount_type is `amount`. */
            fun amountDiscount(): Optional<String> =
                Optional.ofNullable(amountDiscount.getNullable("amount_discount"))

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            fun percentageDiscount(): Optional<Double> =
                Optional.ofNullable(percentageDiscount.getNullable("percentage_discount"))

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            fun usageDiscount(): Optional<Double> =
                Optional.ofNullable(usageDiscount.getNullable("usage_discount"))

            @JsonProperty("discount_type")
            @ExcludeMissing
            fun _discountType(): JsonField<DiscountType> = discountType

            /** Only available if discount_type is `amount`. */
            @JsonProperty("amount_discount")
            @ExcludeMissing
            fun _amountDiscount(): JsonField<String> = amountDiscount

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            @JsonProperty("percentage_discount")
            @ExcludeMissing
            fun _percentageDiscount(): JsonField<Double> = percentageDiscount

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            @JsonProperty("usage_discount")
            @ExcludeMissing
            fun _usageDiscount(): JsonField<Double> = usageDiscount

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): Discount = apply {
                if (validated) {
                    return@apply
                }

                discountType()
                amountDiscount()
                percentageDiscount()
                usageDiscount()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Discount]. */
            class Builder internal constructor() {

                private var discountType: JsonField<DiscountType>? = null
                private var amountDiscount: JsonField<String> = JsonMissing.of()
                private var percentageDiscount: JsonField<Double> = JsonMissing.of()
                private var usageDiscount: JsonField<Double> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(discount: Discount) = apply {
                    discountType = discount.discountType
                    amountDiscount = discount.amountDiscount
                    percentageDiscount = discount.percentageDiscount
                    usageDiscount = discount.usageDiscount
                    additionalProperties = discount.additionalProperties.toMutableMap()
                }

                fun discountType(discountType: DiscountType) =
                    discountType(JsonField.of(discountType))

                fun discountType(discountType: JsonField<DiscountType>) = apply {
                    this.discountType = discountType
                }

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: String?) =
                    amountDiscount(JsonField.ofNullable(amountDiscount))

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: Optional<String>) =
                    amountDiscount(amountDiscount.orElse(null))

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                    this.amountDiscount = amountDiscount
                }

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double?) =
                    percentageDiscount(JsonField.ofNullable(percentageDiscount))

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double) =
                    percentageDiscount(percentageDiscount as Double?)

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun percentageDiscount(percentageDiscount: Optional<Double>) =
                    percentageDiscount(percentageDiscount.orElse(null) as Double?)

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                    this.percentageDiscount = percentageDiscount
                }

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double?) =
                    usageDiscount(JsonField.ofNullable(usageDiscount))

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double) = usageDiscount(usageDiscount as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun usageDiscount(usageDiscount: Optional<Double>) =
                    usageDiscount(usageDiscount.orElse(null) as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                    this.usageDiscount = usageDiscount
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): Discount =
                    Discount(
                        checkRequired("discountType", discountType),
                        amountDiscount,
                        percentageDiscount,
                        usageDiscount,
                        additionalProperties.toImmutable(),
                    )
            }

            class DiscountType
            @JsonCreator
            private constructor(private val value: JsonField<String>) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val PERCENTAGE = of("percentage")

                    @JvmField val USAGE = of("usage")

                    @JvmField val AMOUNT = of("amount")

                    @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                }

                /** An enum containing [DiscountType]'s known values. */
                enum class Known {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                }

                /**
                 * An enum containing [DiscountType]'s known values, as well as an [_UNKNOWN]
                 * member.
                 *
                 * An instance of [DiscountType] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                    /**
                     * An enum member indicating that [DiscountType] was instantiated with an
                     * unknown value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        PERCENTAGE -> Value.PERCENTAGE
                        USAGE -> Value.USAGE
                        AMOUNT -> Value.AMOUNT
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        PERCENTAGE -> Known.PERCENTAGE
                        USAGE -> Known.USAGE
                        AMOUNT -> Known.AMOUNT
                        else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && discountType == other.discountType && amountDiscount == other.amountDiscount && percentageDiscount == other.percentageDiscount && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(discountType, amountDiscount, percentageDiscount, usageDiscount, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Discount{discountType=$discountType, amountDiscount=$amountDiscount, percentageDiscount=$percentageDiscount, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
        }

        /** The definition of a new price to create and add to the subscription. */
        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newSubscriptionUnit: NewSubscriptionUnitPrice? = null,
            private val newSubscriptionPackage: NewSubscriptionPackagePrice? = null,
            private val newSubscriptionMatrix: NewSubscriptionMatrixPrice? = null,
            private val newSubscriptionTiered: NewSubscriptionTieredPrice? = null,
            private val newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice? = null,
            private val newSubscriptionBps: NewSubscriptionBpsPrice? = null,
            private val newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice? = null,
            private val newSubscriptionBulk: NewSubscriptionBulkPrice? = null,
            private val newSubscriptionThresholdTotalAmount:
                NewSubscriptionThresholdTotalAmountPrice? =
                null,
            private val newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice? = null,
            private val newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice? =
                null,
            private val newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice? = null,
            private val newSubscriptionPackageWithAllocation:
                NewSubscriptionPackageWithAllocationPrice? =
                null,
            private val newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice? =
                null,
            private val newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice? =
                null,
            private val newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice? =
                null,
            private val newSubscriptionGroupedWithProratedMinimum:
                NewSubscriptionGroupedWithProratedMinimumPrice? =
                null,
            private val newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newSubscriptionUnit(): Optional<NewSubscriptionUnitPrice> =
                Optional.ofNullable(newSubscriptionUnit)

            fun newSubscriptionPackage(): Optional<NewSubscriptionPackagePrice> =
                Optional.ofNullable(newSubscriptionPackage)

            fun newSubscriptionMatrix(): Optional<NewSubscriptionMatrixPrice> =
                Optional.ofNullable(newSubscriptionMatrix)

            fun newSubscriptionTiered(): Optional<NewSubscriptionTieredPrice> =
                Optional.ofNullable(newSubscriptionTiered)

            fun newSubscriptionTieredBps(): Optional<NewSubscriptionTieredBpsPrice> =
                Optional.ofNullable(newSubscriptionTieredBps)

            fun newSubscriptionBps(): Optional<NewSubscriptionBpsPrice> =
                Optional.ofNullable(newSubscriptionBps)

            fun newSubscriptionBulkBps(): Optional<NewSubscriptionBulkBpsPrice> =
                Optional.ofNullable(newSubscriptionBulkBps)

            fun newSubscriptionBulk(): Optional<NewSubscriptionBulkPrice> =
                Optional.ofNullable(newSubscriptionBulk)

            fun newSubscriptionThresholdTotalAmount():
                Optional<NewSubscriptionThresholdTotalAmountPrice> =
                Optional.ofNullable(newSubscriptionThresholdTotalAmount)

            fun newSubscriptionTieredPackage(): Optional<NewSubscriptionTieredPackagePrice> =
                Optional.ofNullable(newSubscriptionTieredPackage)

            fun newSubscriptionTieredWithMinimum():
                Optional<NewSubscriptionTieredWithMinimumPrice> =
                Optional.ofNullable(newSubscriptionTieredWithMinimum)

            fun newSubscriptionUnitWithPercent(): Optional<NewSubscriptionUnitWithPercentPrice> =
                Optional.ofNullable(newSubscriptionUnitWithPercent)

            fun newSubscriptionPackageWithAllocation():
                Optional<NewSubscriptionPackageWithAllocationPrice> =
                Optional.ofNullable(newSubscriptionPackageWithAllocation)

            fun newSubscriptionTierWithProration():
                Optional<NewSubscriptionTierWithProrationPrice> =
                Optional.ofNullable(newSubscriptionTierWithProration)

            fun newSubscriptionUnitWithProration():
                Optional<NewSubscriptionUnitWithProrationPrice> =
                Optional.ofNullable(newSubscriptionUnitWithProration)

            fun newSubscriptionGroupedAllocation():
                Optional<NewSubscriptionGroupedAllocationPrice> =
                Optional.ofNullable(newSubscriptionGroupedAllocation)

            fun newSubscriptionGroupedWithProratedMinimum():
                Optional<NewSubscriptionGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newSubscriptionGroupedWithProratedMinimum)

            fun newSubscriptionBulkWithProration():
                Optional<NewSubscriptionBulkWithProrationPrice> =
                Optional.ofNullable(newSubscriptionBulkWithProration)

            fun isNewSubscriptionUnit(): Boolean = newSubscriptionUnit != null

            fun isNewSubscriptionPackage(): Boolean = newSubscriptionPackage != null

            fun isNewSubscriptionMatrix(): Boolean = newSubscriptionMatrix != null

            fun isNewSubscriptionTiered(): Boolean = newSubscriptionTiered != null

            fun isNewSubscriptionTieredBps(): Boolean = newSubscriptionTieredBps != null

            fun isNewSubscriptionBps(): Boolean = newSubscriptionBps != null

            fun isNewSubscriptionBulkBps(): Boolean = newSubscriptionBulkBps != null

            fun isNewSubscriptionBulk(): Boolean = newSubscriptionBulk != null

            fun isNewSubscriptionThresholdTotalAmount(): Boolean =
                newSubscriptionThresholdTotalAmount != null

            fun isNewSubscriptionTieredPackage(): Boolean = newSubscriptionTieredPackage != null

            fun isNewSubscriptionTieredWithMinimum(): Boolean =
                newSubscriptionTieredWithMinimum != null

            fun isNewSubscriptionUnitWithPercent(): Boolean = newSubscriptionUnitWithPercent != null

            fun isNewSubscriptionPackageWithAllocation(): Boolean =
                newSubscriptionPackageWithAllocation != null

            fun isNewSubscriptionTierWithProration(): Boolean =
                newSubscriptionTierWithProration != null

            fun isNewSubscriptionUnitWithProration(): Boolean =
                newSubscriptionUnitWithProration != null

            fun isNewSubscriptionGroupedAllocation(): Boolean =
                newSubscriptionGroupedAllocation != null

            fun isNewSubscriptionGroupedWithProratedMinimum(): Boolean =
                newSubscriptionGroupedWithProratedMinimum != null

            fun isNewSubscriptionBulkWithProration(): Boolean =
                newSubscriptionBulkWithProration != null

            fun asNewSubscriptionUnit(): NewSubscriptionUnitPrice =
                newSubscriptionUnit.getOrThrow("newSubscriptionUnit")

            fun asNewSubscriptionPackage(): NewSubscriptionPackagePrice =
                newSubscriptionPackage.getOrThrow("newSubscriptionPackage")

            fun asNewSubscriptionMatrix(): NewSubscriptionMatrixPrice =
                newSubscriptionMatrix.getOrThrow("newSubscriptionMatrix")

            fun asNewSubscriptionTiered(): NewSubscriptionTieredPrice =
                newSubscriptionTiered.getOrThrow("newSubscriptionTiered")

            fun asNewSubscriptionTieredBps(): NewSubscriptionTieredBpsPrice =
                newSubscriptionTieredBps.getOrThrow("newSubscriptionTieredBps")

            fun asNewSubscriptionBps(): NewSubscriptionBpsPrice =
                newSubscriptionBps.getOrThrow("newSubscriptionBps")

            fun asNewSubscriptionBulkBps(): NewSubscriptionBulkBpsPrice =
                newSubscriptionBulkBps.getOrThrow("newSubscriptionBulkBps")

            fun asNewSubscriptionBulk(): NewSubscriptionBulkPrice =
                newSubscriptionBulk.getOrThrow("newSubscriptionBulk")

            fun asNewSubscriptionThresholdTotalAmount(): NewSubscriptionThresholdTotalAmountPrice =
                newSubscriptionThresholdTotalAmount.getOrThrow(
                    "newSubscriptionThresholdTotalAmount"
                )

            fun asNewSubscriptionTieredPackage(): NewSubscriptionTieredPackagePrice =
                newSubscriptionTieredPackage.getOrThrow("newSubscriptionTieredPackage")

            fun asNewSubscriptionTieredWithMinimum(): NewSubscriptionTieredWithMinimumPrice =
                newSubscriptionTieredWithMinimum.getOrThrow("newSubscriptionTieredWithMinimum")

            fun asNewSubscriptionUnitWithPercent(): NewSubscriptionUnitWithPercentPrice =
                newSubscriptionUnitWithPercent.getOrThrow("newSubscriptionUnitWithPercent")

            fun asNewSubscriptionPackageWithAllocation():
                NewSubscriptionPackageWithAllocationPrice =
                newSubscriptionPackageWithAllocation.getOrThrow(
                    "newSubscriptionPackageWithAllocation"
                )

            fun asNewSubscriptionTierWithProration(): NewSubscriptionTierWithProrationPrice =
                newSubscriptionTierWithProration.getOrThrow("newSubscriptionTierWithProration")

            fun asNewSubscriptionUnitWithProration(): NewSubscriptionUnitWithProrationPrice =
                newSubscriptionUnitWithProration.getOrThrow("newSubscriptionUnitWithProration")

            fun asNewSubscriptionGroupedAllocation(): NewSubscriptionGroupedAllocationPrice =
                newSubscriptionGroupedAllocation.getOrThrow("newSubscriptionGroupedAllocation")

            fun asNewSubscriptionGroupedWithProratedMinimum():
                NewSubscriptionGroupedWithProratedMinimumPrice =
                newSubscriptionGroupedWithProratedMinimum.getOrThrow(
                    "newSubscriptionGroupedWithProratedMinimum"
                )

            fun asNewSubscriptionBulkWithProration(): NewSubscriptionBulkWithProrationPrice =
                newSubscriptionBulkWithProration.getOrThrow("newSubscriptionBulkWithProration")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newSubscriptionUnit != null ->
                        visitor.visitNewSubscriptionUnit(newSubscriptionUnit)
                    newSubscriptionPackage != null ->
                        visitor.visitNewSubscriptionPackage(newSubscriptionPackage)
                    newSubscriptionMatrix != null ->
                        visitor.visitNewSubscriptionMatrix(newSubscriptionMatrix)
                    newSubscriptionTiered != null ->
                        visitor.visitNewSubscriptionTiered(newSubscriptionTiered)
                    newSubscriptionTieredBps != null ->
                        visitor.visitNewSubscriptionTieredBps(newSubscriptionTieredBps)
                    newSubscriptionBps != null ->
                        visitor.visitNewSubscriptionBps(newSubscriptionBps)
                    newSubscriptionBulkBps != null ->
                        visitor.visitNewSubscriptionBulkBps(newSubscriptionBulkBps)
                    newSubscriptionBulk != null ->
                        visitor.visitNewSubscriptionBulk(newSubscriptionBulk)
                    newSubscriptionThresholdTotalAmount != null ->
                        visitor.visitNewSubscriptionThresholdTotalAmount(
                            newSubscriptionThresholdTotalAmount
                        )
                    newSubscriptionTieredPackage != null ->
                        visitor.visitNewSubscriptionTieredPackage(newSubscriptionTieredPackage)
                    newSubscriptionTieredWithMinimum != null ->
                        visitor.visitNewSubscriptionTieredWithMinimum(
                            newSubscriptionTieredWithMinimum
                        )
                    newSubscriptionUnitWithPercent != null ->
                        visitor.visitNewSubscriptionUnitWithPercent(newSubscriptionUnitWithPercent)
                    newSubscriptionPackageWithAllocation != null ->
                        visitor.visitNewSubscriptionPackageWithAllocation(
                            newSubscriptionPackageWithAllocation
                        )
                    newSubscriptionTierWithProration != null ->
                        visitor.visitNewSubscriptionTierWithProration(
                            newSubscriptionTierWithProration
                        )
                    newSubscriptionUnitWithProration != null ->
                        visitor.visitNewSubscriptionUnitWithProration(
                            newSubscriptionUnitWithProration
                        )
                    newSubscriptionGroupedAllocation != null ->
                        visitor.visitNewSubscriptionGroupedAllocation(
                            newSubscriptionGroupedAllocation
                        )
                    newSubscriptionGroupedWithProratedMinimum != null ->
                        visitor.visitNewSubscriptionGroupedWithProratedMinimum(
                            newSubscriptionGroupedWithProratedMinimum
                        )
                    newSubscriptionBulkWithProration != null ->
                        visitor.visitNewSubscriptionBulkWithProration(
                            newSubscriptionBulkWithProration
                        )
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Price = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewSubscriptionUnit(
                            newSubscriptionUnit: NewSubscriptionUnitPrice
                        ) {
                            newSubscriptionUnit.validate()
                        }

                        override fun visitNewSubscriptionPackage(
                            newSubscriptionPackage: NewSubscriptionPackagePrice
                        ) {
                            newSubscriptionPackage.validate()
                        }

                        override fun visitNewSubscriptionMatrix(
                            newSubscriptionMatrix: NewSubscriptionMatrixPrice
                        ) {
                            newSubscriptionMatrix.validate()
                        }

                        override fun visitNewSubscriptionTiered(
                            newSubscriptionTiered: NewSubscriptionTieredPrice
                        ) {
                            newSubscriptionTiered.validate()
                        }

                        override fun visitNewSubscriptionTieredBps(
                            newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice
                        ) {
                            newSubscriptionTieredBps.validate()
                        }

                        override fun visitNewSubscriptionBps(
                            newSubscriptionBps: NewSubscriptionBpsPrice
                        ) {
                            newSubscriptionBps.validate()
                        }

                        override fun visitNewSubscriptionBulkBps(
                            newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice
                        ) {
                            newSubscriptionBulkBps.validate()
                        }

                        override fun visitNewSubscriptionBulk(
                            newSubscriptionBulk: NewSubscriptionBulkPrice
                        ) {
                            newSubscriptionBulk.validate()
                        }

                        override fun visitNewSubscriptionThresholdTotalAmount(
                            newSubscriptionThresholdTotalAmount:
                                NewSubscriptionThresholdTotalAmountPrice
                        ) {
                            newSubscriptionThresholdTotalAmount.validate()
                        }

                        override fun visitNewSubscriptionTieredPackage(
                            newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice
                        ) {
                            newSubscriptionTieredPackage.validate()
                        }

                        override fun visitNewSubscriptionTieredWithMinimum(
                            newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice
                        ) {
                            newSubscriptionTieredWithMinimum.validate()
                        }

                        override fun visitNewSubscriptionUnitWithPercent(
                            newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice
                        ) {
                            newSubscriptionUnitWithPercent.validate()
                        }

                        override fun visitNewSubscriptionPackageWithAllocation(
                            newSubscriptionPackageWithAllocation:
                                NewSubscriptionPackageWithAllocationPrice
                        ) {
                            newSubscriptionPackageWithAllocation.validate()
                        }

                        override fun visitNewSubscriptionTierWithProration(
                            newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice
                        ) {
                            newSubscriptionTierWithProration.validate()
                        }

                        override fun visitNewSubscriptionUnitWithProration(
                            newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice
                        ) {
                            newSubscriptionUnitWithProration.validate()
                        }

                        override fun visitNewSubscriptionGroupedAllocation(
                            newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice
                        ) {
                            newSubscriptionGroupedAllocation.validate()
                        }

                        override fun visitNewSubscriptionGroupedWithProratedMinimum(
                            newSubscriptionGroupedWithProratedMinimum:
                                NewSubscriptionGroupedWithProratedMinimumPrice
                        ) {
                            newSubscriptionGroupedWithProratedMinimum.validate()
                        }

                        override fun visitNewSubscriptionBulkWithProration(
                            newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice
                        ) {
                            newSubscriptionBulkWithProration.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newSubscriptionUnit == other.newSubscriptionUnit && newSubscriptionPackage == other.newSubscriptionPackage && newSubscriptionMatrix == other.newSubscriptionMatrix && newSubscriptionTiered == other.newSubscriptionTiered && newSubscriptionTieredBps == other.newSubscriptionTieredBps && newSubscriptionBps == other.newSubscriptionBps && newSubscriptionBulkBps == other.newSubscriptionBulkBps && newSubscriptionBulk == other.newSubscriptionBulk && newSubscriptionThresholdTotalAmount == other.newSubscriptionThresholdTotalAmount && newSubscriptionTieredPackage == other.newSubscriptionTieredPackage && newSubscriptionTieredWithMinimum == other.newSubscriptionTieredWithMinimum && newSubscriptionUnitWithPercent == other.newSubscriptionUnitWithPercent && newSubscriptionPackageWithAllocation == other.newSubscriptionPackageWithAllocation && newSubscriptionTierWithProration == other.newSubscriptionTierWithProration && newSubscriptionUnitWithProration == other.newSubscriptionUnitWithProration && newSubscriptionGroupedAllocation == other.newSubscriptionGroupedAllocation && newSubscriptionGroupedWithProratedMinimum == other.newSubscriptionGroupedWithProratedMinimum && newSubscriptionBulkWithProration == other.newSubscriptionBulkWithProration /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newSubscriptionUnit, newSubscriptionPackage, newSubscriptionMatrix, newSubscriptionTiered, newSubscriptionTieredBps, newSubscriptionBps, newSubscriptionBulkBps, newSubscriptionBulk, newSubscriptionThresholdTotalAmount, newSubscriptionTieredPackage, newSubscriptionTieredWithMinimum, newSubscriptionUnitWithPercent, newSubscriptionPackageWithAllocation, newSubscriptionTierWithProration, newSubscriptionUnitWithProration, newSubscriptionGroupedAllocation, newSubscriptionGroupedWithProratedMinimum, newSubscriptionBulkWithProration) /* spotless:on */

            override fun toString(): String =
                when {
                    newSubscriptionUnit != null -> "Price{newSubscriptionUnit=$newSubscriptionUnit}"
                    newSubscriptionPackage != null ->
                        "Price{newSubscriptionPackage=$newSubscriptionPackage}"
                    newSubscriptionMatrix != null ->
                        "Price{newSubscriptionMatrix=$newSubscriptionMatrix}"
                    newSubscriptionTiered != null ->
                        "Price{newSubscriptionTiered=$newSubscriptionTiered}"
                    newSubscriptionTieredBps != null ->
                        "Price{newSubscriptionTieredBps=$newSubscriptionTieredBps}"
                    newSubscriptionBps != null -> "Price{newSubscriptionBps=$newSubscriptionBps}"
                    newSubscriptionBulkBps != null ->
                        "Price{newSubscriptionBulkBps=$newSubscriptionBulkBps}"
                    newSubscriptionBulk != null -> "Price{newSubscriptionBulk=$newSubscriptionBulk}"
                    newSubscriptionThresholdTotalAmount != null ->
                        "Price{newSubscriptionThresholdTotalAmount=$newSubscriptionThresholdTotalAmount}"
                    newSubscriptionTieredPackage != null ->
                        "Price{newSubscriptionTieredPackage=$newSubscriptionTieredPackage}"
                    newSubscriptionTieredWithMinimum != null ->
                        "Price{newSubscriptionTieredWithMinimum=$newSubscriptionTieredWithMinimum}"
                    newSubscriptionUnitWithPercent != null ->
                        "Price{newSubscriptionUnitWithPercent=$newSubscriptionUnitWithPercent}"
                    newSubscriptionPackageWithAllocation != null ->
                        "Price{newSubscriptionPackageWithAllocation=$newSubscriptionPackageWithAllocation}"
                    newSubscriptionTierWithProration != null ->
                        "Price{newSubscriptionTierWithProration=$newSubscriptionTierWithProration}"
                    newSubscriptionUnitWithProration != null ->
                        "Price{newSubscriptionUnitWithProration=$newSubscriptionUnitWithProration}"
                    newSubscriptionGroupedAllocation != null ->
                        "Price{newSubscriptionGroupedAllocation=$newSubscriptionGroupedAllocation}"
                    newSubscriptionGroupedWithProratedMinimum != null ->
                        "Price{newSubscriptionGroupedWithProratedMinimum=$newSubscriptionGroupedWithProratedMinimum}"
                    newSubscriptionBulkWithProration != null ->
                        "Price{newSubscriptionBulkWithProration=$newSubscriptionBulkWithProration}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewSubscriptionUnit(newSubscriptionUnit: NewSubscriptionUnitPrice) =
                    Price(newSubscriptionUnit = newSubscriptionUnit)

                @JvmStatic
                fun ofNewSubscriptionPackage(newSubscriptionPackage: NewSubscriptionPackagePrice) =
                    Price(newSubscriptionPackage = newSubscriptionPackage)

                @JvmStatic
                fun ofNewSubscriptionMatrix(newSubscriptionMatrix: NewSubscriptionMatrixPrice) =
                    Price(newSubscriptionMatrix = newSubscriptionMatrix)

                @JvmStatic
                fun ofNewSubscriptionTiered(newSubscriptionTiered: NewSubscriptionTieredPrice) =
                    Price(newSubscriptionTiered = newSubscriptionTiered)

                @JvmStatic
                fun ofNewSubscriptionTieredBps(
                    newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice
                ) = Price(newSubscriptionTieredBps = newSubscriptionTieredBps)

                @JvmStatic
                fun ofNewSubscriptionBps(newSubscriptionBps: NewSubscriptionBpsPrice) =
                    Price(newSubscriptionBps = newSubscriptionBps)

                @JvmStatic
                fun ofNewSubscriptionBulkBps(newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice) =
                    Price(newSubscriptionBulkBps = newSubscriptionBulkBps)

                @JvmStatic
                fun ofNewSubscriptionBulk(newSubscriptionBulk: NewSubscriptionBulkPrice) =
                    Price(newSubscriptionBulk = newSubscriptionBulk)

                @JvmStatic
                fun ofNewSubscriptionThresholdTotalAmount(
                    newSubscriptionThresholdTotalAmount: NewSubscriptionThresholdTotalAmountPrice
                ) = Price(newSubscriptionThresholdTotalAmount = newSubscriptionThresholdTotalAmount)

                @JvmStatic
                fun ofNewSubscriptionTieredPackage(
                    newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice
                ) = Price(newSubscriptionTieredPackage = newSubscriptionTieredPackage)

                @JvmStatic
                fun ofNewSubscriptionTieredWithMinimum(
                    newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice
                ) = Price(newSubscriptionTieredWithMinimum = newSubscriptionTieredWithMinimum)

                @JvmStatic
                fun ofNewSubscriptionUnitWithPercent(
                    newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice
                ) = Price(newSubscriptionUnitWithPercent = newSubscriptionUnitWithPercent)

                @JvmStatic
                fun ofNewSubscriptionPackageWithAllocation(
                    newSubscriptionPackageWithAllocation: NewSubscriptionPackageWithAllocationPrice
                ) =
                    Price(
                        newSubscriptionPackageWithAllocation = newSubscriptionPackageWithAllocation
                    )

                @JvmStatic
                fun ofNewSubscriptionTierWithProration(
                    newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice
                ) = Price(newSubscriptionTierWithProration = newSubscriptionTierWithProration)

                @JvmStatic
                fun ofNewSubscriptionUnitWithProration(
                    newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice
                ) = Price(newSubscriptionUnitWithProration = newSubscriptionUnitWithProration)

                @JvmStatic
                fun ofNewSubscriptionGroupedAllocation(
                    newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice
                ) = Price(newSubscriptionGroupedAllocation = newSubscriptionGroupedAllocation)

                @JvmStatic
                fun ofNewSubscriptionGroupedWithProratedMinimum(
                    newSubscriptionGroupedWithProratedMinimum:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newSubscriptionGroupedWithProratedMinimum =
                            newSubscriptionGroupedWithProratedMinimum
                    )

                @JvmStatic
                fun ofNewSubscriptionBulkWithProration(
                    newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice
                ) = Price(newSubscriptionBulkWithProration = newSubscriptionBulkWithProration)
            }

            /**
             * An interface that defines how to map each variant of [Price] to a value of type [T].
             */
            interface Visitor<out T> {

                fun visitNewSubscriptionUnit(newSubscriptionUnit: NewSubscriptionUnitPrice): T

                fun visitNewSubscriptionPackage(
                    newSubscriptionPackage: NewSubscriptionPackagePrice
                ): T

                fun visitNewSubscriptionMatrix(newSubscriptionMatrix: NewSubscriptionMatrixPrice): T

                fun visitNewSubscriptionTiered(newSubscriptionTiered: NewSubscriptionTieredPrice): T

                fun visitNewSubscriptionTieredBps(
                    newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice
                ): T

                fun visitNewSubscriptionBps(newSubscriptionBps: NewSubscriptionBpsPrice): T

                fun visitNewSubscriptionBulkBps(
                    newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice
                ): T

                fun visitNewSubscriptionBulk(newSubscriptionBulk: NewSubscriptionBulkPrice): T

                fun visitNewSubscriptionThresholdTotalAmount(
                    newSubscriptionThresholdTotalAmount: NewSubscriptionThresholdTotalAmountPrice
                ): T

                fun visitNewSubscriptionTieredPackage(
                    newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice
                ): T

                fun visitNewSubscriptionTieredWithMinimum(
                    newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice
                ): T

                fun visitNewSubscriptionUnitWithPercent(
                    newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice
                ): T

                fun visitNewSubscriptionPackageWithAllocation(
                    newSubscriptionPackageWithAllocation: NewSubscriptionPackageWithAllocationPrice
                ): T

                fun visitNewSubscriptionTierWithProration(
                    newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice
                ): T

                fun visitNewSubscriptionUnitWithProration(
                    newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice
                ): T

                fun visitNewSubscriptionGroupedAllocation(
                    newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice
                ): T

                fun visitNewSubscriptionGroupedWithProratedMinimum(
                    newSubscriptionGroupedWithProratedMinimum:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ): T

                fun visitNewSubscriptionBulkWithProration(
                    newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice
                ): T

                /**
                 * Maps an unknown variant of [Price] to a value of type [T].
                 *
                 * An instance of [Price] can contain an unknown variant if it was deserialized from
                 * data that doesn't match any known variant. For example, if the SDK is on an older
                 * version than the API, then the API may respond with new variants that the SDK is
                 * unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionUnitPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionUnit = it, _json = json)
                                }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionPackage = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionMatrixPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionMatrix = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTiered = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredBps = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBps = it, _json = json)
                                }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulkBps = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulk = it, _json = json)
                                }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionThresholdTotalAmountPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionThresholdTotalAmount = it,
                                        _json = json,
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredPackagePrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredPackage = it, _json = json)
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredWithMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredWithMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithPercentPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionUnitWithPercent = it, _json = json)
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionPackageWithAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionPackageWithAllocation = it,
                                        _json = json,
                                    )
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTierWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTierWithProration = it,
                                        _json = json,
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithProration = it,
                                        _json = json,
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedAllocation = it,
                                        _json = json,
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedWithProratedMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedWithProratedMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionBulkWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionBulkWithProration = it,
                                        _json = json,
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.newSubscriptionUnit != null ->
                            generator.writeObject(value.newSubscriptionUnit)
                        value.newSubscriptionPackage != null ->
                            generator.writeObject(value.newSubscriptionPackage)
                        value.newSubscriptionMatrix != null ->
                            generator.writeObject(value.newSubscriptionMatrix)
                        value.newSubscriptionTiered != null ->
                            generator.writeObject(value.newSubscriptionTiered)
                        value.newSubscriptionTieredBps != null ->
                            generator.writeObject(value.newSubscriptionTieredBps)
                        value.newSubscriptionBps != null ->
                            generator.writeObject(value.newSubscriptionBps)
                        value.newSubscriptionBulkBps != null ->
                            generator.writeObject(value.newSubscriptionBulkBps)
                        value.newSubscriptionBulk != null ->
                            generator.writeObject(value.newSubscriptionBulk)
                        value.newSubscriptionThresholdTotalAmount != null ->
                            generator.writeObject(value.newSubscriptionThresholdTotalAmount)
                        value.newSubscriptionTieredPackage != null ->
                            generator.writeObject(value.newSubscriptionTieredPackage)
                        value.newSubscriptionTieredWithMinimum != null ->
                            generator.writeObject(value.newSubscriptionTieredWithMinimum)
                        value.newSubscriptionUnitWithPercent != null ->
                            generator.writeObject(value.newSubscriptionUnitWithPercent)
                        value.newSubscriptionPackageWithAllocation != null ->
                            generator.writeObject(value.newSubscriptionPackageWithAllocation)
                        value.newSubscriptionTierWithProration != null ->
                            generator.writeObject(value.newSubscriptionTierWithProration)
                        value.newSubscriptionUnitWithProration != null ->
                            generator.writeObject(value.newSubscriptionUnitWithProration)
                        value.newSubscriptionGroupedAllocation != null ->
                            generator.writeObject(value.newSubscriptionGroupedAllocation)
                        value.newSubscriptionGroupedWithProratedMinimum != null ->
                            generator.writeObject(value.newSubscriptionGroupedWithProratedMinimum)
                        value.newSubscriptionBulkWithProration != null ->
                            generator.writeObject(value.newSubscriptionBulkWithProration)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewSubscriptionUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_config")
                @ExcludeMissing
                private val unitConfig: JsonField<UnitConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_config")
                @ExcludeMissing
                fun _unitConfig(): JsonField<UnitConfig> = unitConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionUnitPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionUnitPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitConfig: JsonField<UnitConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) = apply {
                        cadence = newSubscriptionUnitPrice.cadence
                        itemId = newSubscriptionUnitPrice.itemId
                        modelType = newSubscriptionUnitPrice.modelType
                        name = newSubscriptionUnitPrice.name
                        unitConfig = newSubscriptionUnitPrice.unitConfig
                        billableMetricId = newSubscriptionUnitPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitPrice.conversionRate
                        currency = newSubscriptionUnitPrice.currency
                        externalPriceId = newSubscriptionUnitPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitPrice.metadata
                        referenceId = newSubscriptionUnitPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                    fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                        this.unitConfig = unitConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitPrice =
                        NewSubscriptionUnitPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitConfig", unitConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Rate per unit of usage */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        unitAmount()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitConfig]. */
                    class Builder internal constructor() {

                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkRequired("unitAmount", unitAmount),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_config")
                @ExcludeMissing
                private val packageConfig: JsonField<PackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("package_config")
                @ExcludeMissing
                fun _packageConfig(): JsonField<PackageConfig> = packageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    packageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageConfig: JsonField<PackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionPackagePrice: NewSubscriptionPackagePrice) =
                        apply {
                            cadence = newSubscriptionPackagePrice.cadence
                            itemId = newSubscriptionPackagePrice.itemId
                            modelType = newSubscriptionPackagePrice.modelType
                            name = newSubscriptionPackagePrice.name
                            packageConfig = newSubscriptionPackagePrice.packageConfig
                            billableMetricId = newSubscriptionPackagePrice.billableMetricId
                            billedInAdvance = newSubscriptionPackagePrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionPackagePrice.billingCycleConfiguration
                            conversionRate = newSubscriptionPackagePrice.conversionRate
                            currency = newSubscriptionPackagePrice.currency
                            externalPriceId = newSubscriptionPackagePrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionPackagePrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionPackagePrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionPackagePrice.invoicingCycleConfiguration
                            metadata = newSubscriptionPackagePrice.metadata
                            referenceId = newSubscriptionPackagePrice.referenceId
                            additionalProperties =
                                newSubscriptionPackagePrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageConfig(packageConfig: PackageConfig) =
                        packageConfig(JsonField.of(packageConfig))

                    fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackagePrice =
                        NewSubscriptionPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("packageConfig", packageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    private val packageAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    private val packageSize: JsonField<Long> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** A currency amount to rate usage by */
                    fun packageAmount(): String = packageAmount.getRequired("package_amount")

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(): Long = packageSize.getRequired("package_size")

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    fun _packageAmount(): JsonField<String> = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    fun _packageSize(): JsonField<Long> = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        packageAmount()
                        packageSize()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [PackageConfig]. */
                    class Builder internal constructor() {

                        private var packageAmount: JsonField<String>? = null
                        private var packageSize: JsonField<Long>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) =
                            packageAmount(JsonField.of(packageAmount))

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: JsonField<String>) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: JsonField<Long>) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkRequired("packageAmount", packageAmount),
                                checkRequired("packageSize", packageSize),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_config")
                @ExcludeMissing
                private val matrixConfig: JsonField<MatrixConfig> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("matrix_config")
                @ExcludeMissing
                fun _matrixConfig(): JsonField<MatrixConfig> = matrixConfig

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionMatrixPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    matrixConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionMatrixPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixConfig: JsonField<MatrixConfig>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice) =
                        apply {
                            cadence = newSubscriptionMatrixPrice.cadence
                            itemId = newSubscriptionMatrixPrice.itemId
                            matrixConfig = newSubscriptionMatrixPrice.matrixConfig
                            modelType = newSubscriptionMatrixPrice.modelType
                            name = newSubscriptionMatrixPrice.name
                            billableMetricId = newSubscriptionMatrixPrice.billableMetricId
                            billedInAdvance = newSubscriptionMatrixPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionMatrixPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionMatrixPrice.conversionRate
                            currency = newSubscriptionMatrixPrice.currency
                            externalPriceId = newSubscriptionMatrixPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionMatrixPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionMatrixPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionMatrixPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionMatrixPrice.metadata
                            referenceId = newSubscriptionMatrixPrice.referenceId
                            additionalProperties =
                                newSubscriptionMatrixPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixConfig(matrixConfig: MatrixConfig) =
                        matrixConfig(JsonField.of(matrixConfig))

                    fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionMatrixPrice =
                        NewSubscriptionMatrixPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("matrixConfig", matrixConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    fun _dimensions(): JsonField<List<String?>> = dimensions

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixConfig]. */
                    class Builder internal constructor() {

                        private var defaultUnitAmount: JsonField<String>? = null
                        private var dimensions: JsonField<MutableList<String?>>? = null
                        private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.map { it.toMutableList() }
                            matrixValues = matrixConfig.matrixValues.map { it.toMutableList() }
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun addDimension(dimension: String) = apply {
                            dimensions =
                                (dimensions ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(dimension)
                                }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(matrixValue)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkRequired("defaultUnitAmount", defaultUnitAmount),
                                checkRequired("dimensions", dimensions).map { it.toImmutable() },
                                checkRequired("matrixValues", matrixValues).map {
                                    it.toImmutable()
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): MatrixValue = apply {
                            if (validated) {
                                return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [MatrixValue]. */
                        class Builder internal constructor() {

                            private var dimensionValues: JsonField<MutableList<String?>>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues =
                                    matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: JsonField.of(mutableListOf())).apply {
                                        asKnown()
                                            .orElseThrow {
                                                IllegalStateException(
                                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                                )
                                            }
                                            .add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkRequired("dimensionValues", dimensionValues).map {
                                        it.toImmutable()
                                    },
                                    checkRequired("unitAmount", unitAmount),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        MATRIX
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MATRIX,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionMatrixPrice && cadence == other.cadence && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionMatrixPrice{cadence=$cadence, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_config")
                @ExcludeMissing
                private val tieredConfig: JsonField<TieredConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_config")
                @ExcludeMissing
                fun _tieredConfig(): JsonField<TieredConfig> = tieredConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredConfig: JsonField<TieredConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionTieredPrice: NewSubscriptionTieredPrice) =
                        apply {
                            cadence = newSubscriptionTieredPrice.cadence
                            itemId = newSubscriptionTieredPrice.itemId
                            modelType = newSubscriptionTieredPrice.modelType
                            name = newSubscriptionTieredPrice.name
                            tieredConfig = newSubscriptionTieredPrice.tieredConfig
                            billableMetricId = newSubscriptionTieredPrice.billableMetricId
                            billedInAdvance = newSubscriptionTieredPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionTieredPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionTieredPrice.conversionRate
                            currency = newSubscriptionTieredPrice.currency
                            externalPriceId = newSubscriptionTieredPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionTieredPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionTieredPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionTieredPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionTieredPrice.metadata
                            referenceId = newSubscriptionTieredPrice.referenceId
                            additionalProperties =
                                newSubscriptionTieredPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredConfig(tieredConfig: TieredConfig) =
                        tieredConfig(JsonField.of(tieredConfig))

                    fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPrice =
                        NewSubscriptionTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredConfig", tieredConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.map { it.toMutableList() }
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        private val firstUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        private val lastUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        fun lastUnit(): Optional<Double> =
                            Optional.ofNullable(lastUnit.getNullable("last_unit"))

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        fun _firstUnit(): JsonField<Double> = firstUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        fun _lastUnit(): JsonField<Double> = lastUnit

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            firstUnit()
                            unitAmount()
                            lastUnit()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var firstUnit: JsonField<Double>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var lastUnit: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: JsonField<Double>) = apply {
                                this.firstUnit = firstUnit
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double?) =
                                lastUnit(JsonField.ofNullable(lastUnit))

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun lastUnit(lastUnit: Optional<Double>) =
                                lastUnit(lastUnit.orElse(null) as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: JsonField<Double>) = apply {
                                this.lastUnit = lastUnit
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("firstUnit", firstUnit),
                                    checkRequired("unitAmount", unitAmount),
                                    lastUnit,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                private val tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredBpsConfig(): TieredBpsConfig =
                    tieredBpsConfig.getRequired("tiered_bps_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                fun _tieredBpsConfig(): JsonField<TieredBpsConfig> = tieredBpsConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredBpsConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredBpsPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredBpsConfig: JsonField<TieredBpsConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                    ) = apply {
                        cadence = newSubscriptionTieredBpsPrice.cadence
                        itemId = newSubscriptionTieredBpsPrice.itemId
                        modelType = newSubscriptionTieredBpsPrice.modelType
                        name = newSubscriptionTieredBpsPrice.name
                        tieredBpsConfig = newSubscriptionTieredBpsPrice.tieredBpsConfig
                        billableMetricId = newSubscriptionTieredBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredBpsPrice.conversionRate
                        currency = newSubscriptionTieredBpsPrice.currency
                        externalPriceId = newSubscriptionTieredBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredBpsPrice.metadata
                        referenceId = newSubscriptionTieredBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredBpsPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                        tieredBpsConfig(JsonField.of(tieredBpsConfig))

                    fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredBpsPrice =
                        NewSubscriptionTieredBpsPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredBpsConfig", tieredBpsConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredBpsConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        private val minimumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Per-event basis point rate */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Inclusive tier starting value */
                        fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                        /** Exclusive tier ending value */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Per-event basis point rate */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        fun _minimumAmount(): JsonField<String> = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            minimumAmount()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var bps: JsonField<Double>? = null
                            private var minimumAmount: JsonField<String>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Per-event basis point rate */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) =
                                minimumAmount(JsonField.of(minimumAmount))

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    checkRequired("minimumAmount", minimumAmount),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredBpsPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredBpsPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bps_config")
                @ExcludeMissing
                private val bpsConfig: JsonField<BpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bps_config")
                @ExcludeMissing
                fun _bpsConfig(): JsonField<BpsConfig> = bpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bpsConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBpsPrice]. */
                class Builder internal constructor() {

                    private var bpsConfig: JsonField<BpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) = apply {
                        bpsConfig = newSubscriptionBpsPrice.bpsConfig
                        cadence = newSubscriptionBpsPrice.cadence
                        itemId = newSubscriptionBpsPrice.itemId
                        modelType = newSubscriptionBpsPrice.modelType
                        name = newSubscriptionBpsPrice.name
                        billableMetricId = newSubscriptionBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBpsPrice.conversionRate
                        currency = newSubscriptionBpsPrice.currency
                        externalPriceId = newSubscriptionBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBpsPrice.metadata
                        referenceId = newSubscriptionBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                    fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                        this.bpsConfig = bpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBpsPrice =
                        NewSubscriptionBpsPrice(
                            checkRequired("bpsConfig", bpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps")
                    @ExcludeMissing
                    private val bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Basis point take rate per event */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(): Optional<String> =
                        Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Basis point take rate per event */
                    @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        bps()
                        perUnitMaximum()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BpsConfig]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Basis point take rate per event */
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String?) =
                            perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.orElse(null))

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkRequired("bps", bps),
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                private val bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                fun _bulkBpsConfig(): JsonField<BulkBpsConfig> = bulkBpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBulkBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkBpsConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBulkBpsPrice]. */
                class Builder internal constructor() {

                    private var bulkBpsConfig: JsonField<BulkBpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice) =
                        apply {
                            bulkBpsConfig = newSubscriptionBulkBpsPrice.bulkBpsConfig
                            cadence = newSubscriptionBulkBpsPrice.cadence
                            itemId = newSubscriptionBulkBpsPrice.itemId
                            modelType = newSubscriptionBulkBpsPrice.modelType
                            name = newSubscriptionBulkBpsPrice.name
                            billableMetricId = newSubscriptionBulkBpsPrice.billableMetricId
                            billedInAdvance = newSubscriptionBulkBpsPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionBulkBpsPrice.conversionRate
                            currency = newSubscriptionBulkBpsPrice.currency
                            externalPriceId = newSubscriptionBulkBpsPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionBulkBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionBulkBpsPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionBulkBpsPrice.metadata
                            referenceId = newSubscriptionBulkBpsPrice.referenceId
                            additionalProperties =
                                newSubscriptionBulkBpsPrice.additionalProperties.toMutableMap()
                        }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                        bulkBpsConfig(JsonField.of(bulkBpsConfig))

                    fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkBpsPrice =
                        NewSubscriptionBulkBpsPrice(
                            checkRequired("bulkBpsConfig", bulkBpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkBpsConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Basis points to rate on */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Upper bound for tier */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Basis points to rate on */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var bps: JsonField<Double>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Basis points to rate on */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK_BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK_BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config")
                @ExcludeMissing
                private val bulkConfig: JsonField<BulkConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bulk_config")
                @ExcludeMissing
                fun _bulkConfig(): JsonField<BulkConfig> = bulkConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBulkPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBulkPrice]. */
                class Builder internal constructor() {

                    private var bulkConfig: JsonField<BulkConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) = apply {
                        bulkConfig = newSubscriptionBulkPrice.bulkConfig
                        cadence = newSubscriptionBulkPrice.cadence
                        itemId = newSubscriptionBulkPrice.itemId
                        modelType = newSubscriptionBulkPrice.modelType
                        name = newSubscriptionBulkPrice.name
                        billableMetricId = newSubscriptionBulkPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkPrice.conversionRate
                        currency = newSubscriptionBulkPrice.currency
                        externalPriceId = newSubscriptionBulkPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkPrice.metadata
                        referenceId = newSubscriptionBulkPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                    fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                        this.bulkConfig = bulkConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkPrice =
                        NewSubscriptionBulkPrice(
                            checkRequired("bulkConfig", bulkConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        private val maximumUnits: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Upper bound for this tier */
                        fun maximumUnits(): Optional<Double> =
                            Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                        /** Amount per unit */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        fun _maximumUnits(): JsonField<Double> = maximumUnits

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            unitAmount()
                            maximumUnits()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var unitAmount: JsonField<String>? = null
                            private var maximumUnits: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double?) =
                                maximumUnits(JsonField.ofNullable(maximumUnits))

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(maximumUnits as Double?)

                            /** Upper bound for this tier */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun maximumUnits(maximumUnits: Optional<Double>) =
                                maximumUnits(maximumUnits.orElse(null) as Double?)

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("unitAmount", unitAmount),
                                    maximumUnits,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                fun _thresholdTotalAmountConfig(): JsonField<ThresholdTotalAmountConfig> =
                    thresholdTotalAmountConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionThresholdTotalAmountPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    thresholdTotalAmountConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionThresholdTotalAmountPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionThresholdTotalAmountPrice:
                            NewSubscriptionThresholdTotalAmountPrice
                    ) = apply {
                        cadence = newSubscriptionThresholdTotalAmountPrice.cadence
                        itemId = newSubscriptionThresholdTotalAmountPrice.itemId
                        modelType = newSubscriptionThresholdTotalAmountPrice.modelType
                        name = newSubscriptionThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig =
                            newSubscriptionThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newSubscriptionThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newSubscriptionThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionThresholdTotalAmountPrice.conversionRate
                        currency = newSubscriptionThresholdTotalAmountPrice.currency
                        externalPriceId = newSubscriptionThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionThresholdTotalAmountPrice.metadata
                        referenceId = newSubscriptionThresholdTotalAmountPrice.referenceId
                        additionalProperties =
                            newSubscriptionThresholdTotalAmountPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionThresholdTotalAmountPrice =
                        NewSubscriptionThresholdTotalAmountPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("thresholdTotalAmountConfig", thresholdTotalAmountConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): ThresholdTotalAmountConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [ThresholdTotalAmountConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionThresholdTotalAmountPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionThresholdTotalAmountPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                private val tieredPackageConfig: JsonField<TieredPackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredPackageConfig(): TieredPackageConfig =
                    tieredPackageConfig.getRequired("tiered_package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                fun _tieredPackageConfig(): JsonField<TieredPackageConfig> = tieredPackageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredPackageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredPackageConfig: JsonField<TieredPackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                    ) = apply {
                        cadence = newSubscriptionTieredPackagePrice.cadence
                        itemId = newSubscriptionTieredPackagePrice.itemId
                        modelType = newSubscriptionTieredPackagePrice.modelType
                        name = newSubscriptionTieredPackagePrice.name
                        tieredPackageConfig = newSubscriptionTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newSubscriptionTieredPackagePrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredPackagePrice.conversionRate
                        currency = newSubscriptionTieredPackagePrice.currency
                        externalPriceId = newSubscriptionTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredPackagePrice.metadata
                        referenceId = newSubscriptionTieredPackagePrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                        tieredPackageConfig(JsonField.of(tieredPackageConfig))

                    fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                        apply {
                            this.tieredPackageConfig = tieredPackageConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPackagePrice =
                        NewSubscriptionTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredPackageConfig", tieredPackageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredPackageConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                    tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                fun _tieredWithMinimumConfig(): JsonField<TieredWithMinimumConfig> =
                    tieredWithMinimumConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredWithMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredWithMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionTieredWithMinimumPrice.cadence
                        itemId = newSubscriptionTieredWithMinimumPrice.itemId
                        modelType = newSubscriptionTieredWithMinimumPrice.modelType
                        name = newSubscriptionTieredWithMinimumPrice.name
                        tieredWithMinimumConfig =
                            newSubscriptionTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newSubscriptionTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredWithMinimumPrice.conversionRate
                        currency = newSubscriptionTieredWithMinimumPrice.currency
                        externalPriceId = newSubscriptionTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredWithMinimumPrice.metadata
                        referenceId = newSubscriptionTieredWithMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                    fun tieredWithMinimumConfig(
                        tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                    ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredWithMinimumPrice =
                        NewSubscriptionTieredWithMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithMinimumConfig", tieredWithMinimumConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_WITH_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredWithMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredWithMinimumPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredWithMinimumPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                private val unitWithPercentConfig: JsonField<UnitWithPercentConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitWithPercentConfig(): UnitWithPercentConfig =
                    unitWithPercentConfig.getRequired("unit_with_percent_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                fun _unitWithPercentConfig(): JsonField<UnitWithPercentConfig> =
                    unitWithPercentConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionUnitWithPercentPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitWithPercentConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionUnitWithPercentPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithPercentConfig: JsonField<UnitWithPercentConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithPercentPrice.cadence
                        itemId = newSubscriptionUnitWithPercentPrice.itemId
                        modelType = newSubscriptionUnitWithPercentPrice.modelType
                        name = newSubscriptionUnitWithPercentPrice.name
                        unitWithPercentConfig =
                            newSubscriptionUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newSubscriptionUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithPercentPrice.conversionRate
                        currency = newSubscriptionUnitWithPercentPrice.currency
                        externalPriceId = newSubscriptionUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithPercentPrice.metadata
                        referenceId = newSubscriptionUnitWithPercentPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                    fun unitWithPercentConfig(
                        unitWithPercentConfig: JsonField<UnitWithPercentConfig>
                    ) = apply { this.unitWithPercentConfig = unitWithPercentConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithPercentPrice =
                        NewSubscriptionUnitWithPercentPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithPercentConfig", unitWithPercentConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT_WITH_PERCENT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT_WITH_PERCENT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithPercentConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitWithPercentConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithPercentPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithPercentPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig.getRequired("package_with_allocation_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                fun _packageWithAllocationConfig(): JsonField<PackageWithAllocationConfig> =
                    packageWithAllocationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionPackageWithAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    packageWithAllocationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionPackageWithAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageWithAllocationConfig:
                        JsonField<PackageWithAllocationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionPackageWithAllocationPrice:
                            NewSubscriptionPackageWithAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionPackageWithAllocationPrice.cadence
                        itemId = newSubscriptionPackageWithAllocationPrice.itemId
                        modelType = newSubscriptionPackageWithAllocationPrice.modelType
                        name = newSubscriptionPackageWithAllocationPrice.name
                        packageWithAllocationConfig =
                            newSubscriptionPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId =
                            newSubscriptionPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionPackageWithAllocationPrice.conversionRate
                        currency = newSubscriptionPackageWithAllocationPrice.currency
                        externalPriceId = newSubscriptionPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionPackageWithAllocationPrice.metadata
                        referenceId = newSubscriptionPackageWithAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackageWithAllocationPrice =
                        NewSubscriptionPackageWithAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "packageWithAllocationConfig",
                                packageWithAllocationConfig,
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        PACKAGE_WITH_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageWithAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [PackageWithAllocationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackageWithAllocationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackageWithAllocationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTierWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig.getRequired("tiered_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                fun _tieredWithProrationConfig(): JsonField<TieredWithProrationConfig> =
                    tieredWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTierWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTierWithProrationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionTierWithProrationPrice.cadence
                        itemId = newSubscriptionTierWithProrationPrice.itemId
                        modelType = newSubscriptionTierWithProrationPrice.modelType
                        name = newSubscriptionTierWithProrationPrice.name
                        tieredWithProrationConfig =
                            newSubscriptionTierWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newSubscriptionTierWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionTierWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTierWithProrationPrice.conversionRate
                        currency = newSubscriptionTierWithProrationPrice.currency
                        externalPriceId = newSubscriptionTierWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTierWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTierWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTierWithProrationPrice.metadata
                        referenceId = newSubscriptionTierWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionTierWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTierWithProrationPrice =
                        NewSubscriptionTierWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithProrationConfig", tieredWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTierWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTierWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                private val unitWithProrationConfig: JsonField<UnitWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitWithProrationConfig(): UnitWithProrationConfig =
                    unitWithProrationConfig.getRequired("unit_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                fun _unitWithProrationConfig(): JsonField<UnitWithProrationConfig> =
                    unitWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionUnitWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionUnitWithProrationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithProrationConfig: JsonField<UnitWithProrationConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithProrationPrice.cadence
                        itemId = newSubscriptionUnitWithProrationPrice.itemId
                        modelType = newSubscriptionUnitWithProrationPrice.modelType
                        name = newSubscriptionUnitWithProrationPrice.name
                        unitWithProrationConfig =
                            newSubscriptionUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newSubscriptionUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithProrationPrice.conversionRate
                        currency = newSubscriptionUnitWithProrationPrice.currency
                        externalPriceId = newSubscriptionUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithProrationPrice.metadata
                        referenceId = newSubscriptionUnitWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                    fun unitWithProrationConfig(
                        unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                    ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithProrationPrice =
                        NewSubscriptionUnitWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithProrationConfig", unitWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                private val groupedAllocationConfig: JsonField<GroupedAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                fun groupedAllocationConfig(): GroupedAllocationConfig =
                    groupedAllocationConfig.getRequired("grouped_allocation_config")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                fun _groupedAllocationConfig(): JsonField<GroupedAllocationConfig> =
                    groupedAllocationConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionGroupedAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    groupedAllocationConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionGroupedAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var groupedAllocationConfig: JsonField<GroupedAllocationConfig>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedAllocationPrice.cadence
                        groupedAllocationConfig =
                            newSubscriptionGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newSubscriptionGroupedAllocationPrice.itemId
                        modelType = newSubscriptionGroupedAllocationPrice.modelType
                        name = newSubscriptionGroupedAllocationPrice.name
                        billableMetricId = newSubscriptionGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionGroupedAllocationPrice.conversionRate
                        currency = newSubscriptionGroupedAllocationPrice.currency
                        externalPriceId = newSubscriptionGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedAllocationPrice.metadata
                        referenceId = newSubscriptionGroupedAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                    fun groupedAllocationConfig(
                        groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                    ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedAllocationPrice =
                        NewSubscriptionGroupedAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("groupedAllocationConfig", groupedAllocationConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedAllocationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedAllocationPrice && cadence == other.cadence && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedAllocationPrice{cadence=$cadence, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                private val groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig.getRequired(
                        "grouped_with_prorated_minimum_config"
                    )

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                fun _groupedWithProratedMinimumConfig():
                    JsonField<GroupedWithProratedMinimumConfig> = groupedWithProratedMinimumConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionGroupedWithProratedMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    groupedWithProratedMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionGroupedWithProratedMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var groupedWithProratedMinimumConfig:
                        JsonField<GroupedWithProratedMinimumConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedWithProratedMinimumPrice:
                            NewSubscriptionGroupedWithProratedMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedWithProratedMinimumPrice.cadence
                        groupedWithProratedMinimumConfig =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        itemId = newSubscriptionGroupedWithProratedMinimumPrice.itemId
                        modelType = newSubscriptionGroupedWithProratedMinimumPrice.modelType
                        name = newSubscriptionGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newSubscriptionGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance =
                            newSubscriptionGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate =
                            newSubscriptionGroupedWithProratedMinimumPrice.conversionRate
                        currency = newSubscriptionGroupedWithProratedMinimumPrice.currency
                        externalPriceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedWithProratedMinimumPrice.metadata
                        referenceId = newSubscriptionGroupedWithProratedMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) =
                        groupedWithProratedMinimumConfig(
                            JsonField.of(groupedWithProratedMinimumConfig)
                        )

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig:
                            JsonField<GroupedWithProratedMinimumConfig>
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedWithProratedMinimumPrice =
                        NewSubscriptionGroupedWithProratedMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired(
                                "groupedWithProratedMinimumConfig",
                                groupedWithProratedMinimumConfig,
                            ),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedWithProratedMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedWithProratedMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedWithProratedMinimumPrice && cadence == other.cadence && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedWithProratedMinimumPrice{cadence=$cadence, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkWithProrationConfig(): BulkWithProrationConfig =
                    bulkWithProrationConfig.getRequired("bulk_with_proration_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                fun _bulkWithProrationConfig(): JsonField<BulkWithProrationConfig> =
                    bulkWithProrationConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBulkWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkWithProrationConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBulkWithProrationPrice]. */
                class Builder internal constructor() {

                    private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                    ) = apply {
                        bulkWithProrationConfig =
                            newSubscriptionBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newSubscriptionBulkWithProrationPrice.cadence
                        itemId = newSubscriptionBulkWithProrationPrice.itemId
                        modelType = newSubscriptionBulkWithProrationPrice.modelType
                        name = newSubscriptionBulkWithProrationPrice.name
                        billableMetricId = newSubscriptionBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkWithProrationPrice.conversionRate
                        currency = newSubscriptionBulkWithProrationPrice.currency
                        externalPriceId = newSubscriptionBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkWithProrationPrice.metadata
                        referenceId = newSubscriptionBulkWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                    fun bulkWithProrationConfig(
                        bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                    ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkWithProrationPrice =
                        NewSubscriptionBulkWithProrationPrice(
                            checkRequired("bulkWithProrationConfig", bulkWithProrationConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is AddPrice && allocationPrice == other.allocationPrice && discounts == other.discounts && endDate == other.endDate && externalPriceId == other.externalPriceId && maximumAmount == other.maximumAmount && minimumAmount == other.minimumAmount && planPhaseOrder == other.planPhaseOrder && price == other.price && priceId == other.priceId && startDate == other.startDate && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(allocationPrice, discounts, endDate, externalPriceId, maximumAmount, minimumAmount, planPhaseOrder, price, priceId, startDate, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "AddPrice{allocationPrice=$allocationPrice, discounts=$discounts, endDate=$endDate, externalPriceId=$externalPriceId, maximumAmount=$maximumAmount, minimumAmount=$minimumAmount, planPhaseOrder=$planPhaseOrder, price=$price, priceId=$priceId, startDate=$startDate, additionalProperties=$additionalProperties}"
    }

    /**
     * Reset billing periods to be aligned with the plan change's effective date or start of the
     * month. Defaults to `unchanged` which keeps subscription's existing billing cycle alignment.
     */
    class BillingCycleAlignment
    @JsonCreator
    private constructor(private val value: JsonField<String>) : Enum {

        /**
         * Returns this class instance's raw value.
         *
         * This is usually only useful if this instance was deserialized from data that doesn't
         * match any known member, and you want to know that value. For example, if the SDK is on an
         * older version than the API, then the API may respond with new members that the SDK is
         * unaware of.
         */
        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            @JvmField val UNCHANGED = of("unchanged")

            @JvmField val PLAN_CHANGE_DATE = of("plan_change_date")

            @JvmField val START_OF_MONTH = of("start_of_month")

            @JvmStatic fun of(value: String) = BillingCycleAlignment(JsonField.of(value))
        }

        /** An enum containing [BillingCycleAlignment]'s known values. */
        enum class Known {
            UNCHANGED,
            PLAN_CHANGE_DATE,
            START_OF_MONTH,
        }

        /**
         * An enum containing [BillingCycleAlignment]'s known values, as well as an [_UNKNOWN]
         * member.
         *
         * An instance of [BillingCycleAlignment] can contain an unknown value in a couple of cases:
         * - It was deserialized from data that doesn't match any known member. For example, if the
         *   SDK is on an older version than the API, then the API may respond with new members that
         *   the SDK is unaware of.
         * - It was constructed with an arbitrary value using the [of] method.
         */
        enum class Value {
            UNCHANGED,
            PLAN_CHANGE_DATE,
            START_OF_MONTH,
            /**
             * An enum member indicating that [BillingCycleAlignment] was instantiated with an
             * unknown value.
             */
            _UNKNOWN,
        }

        /**
         * Returns an enum member corresponding to this class instance's value, or [Value._UNKNOWN]
         * if the class was instantiated with an unknown value.
         *
         * Use the [known] method instead if you're certain the value is always known or if you want
         * to throw for the unknown case.
         */
        fun value(): Value =
            when (this) {
                UNCHANGED -> Value.UNCHANGED
                PLAN_CHANGE_DATE -> Value.PLAN_CHANGE_DATE
                START_OF_MONTH -> Value.START_OF_MONTH
                else -> Value._UNKNOWN
            }

        /**
         * Returns an enum member corresponding to this class instance's value.
         *
         * Use the [value] method instead if you're uncertain the value is always known and don't
         * want to throw for the unknown case.
         *
         * @throws OrbInvalidDataException if this class instance's value is a not a known member.
         */
        fun known(): Known =
            when (this) {
                UNCHANGED -> Known.UNCHANGED
                PLAN_CHANGE_DATE -> Known.PLAN_CHANGE_DATE
                START_OF_MONTH -> Known.START_OF_MONTH
                else -> throw OrbInvalidDataException("Unknown BillingCycleAlignment: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is BillingCycleAlignment && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    @NoAutoDetect
    class BillingCycleAnchorConfiguration
    @JsonCreator
    private constructor(
        @JsonProperty("day") @ExcludeMissing private val day: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("month")
        @ExcludeMissing
        private val month: JsonField<Long> = JsonMissing.of(),
        @JsonProperty("year") @ExcludeMissing private val year: JsonField<Long> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /**
         * The day of the month on which the billing cycle is anchored. If the maximum number of
         * days in a month is greater than this value, the last day of the month is the billing
         * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
         * 30th.
         */
        fun day(): Long = day.getRequired("day")

        /**
         * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
         * February would have cycles starting February, May, August, and November).
         */
        fun month(): Optional<Long> = Optional.ofNullable(month.getNullable("month"))

        /**
         * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored on
         * 2021 would have cycles starting on 2021, 2023, 2025, etc.).
         */
        fun year(): Optional<Long> = Optional.ofNullable(year.getNullable("year"))

        /**
         * The day of the month on which the billing cycle is anchored. If the maximum number of
         * days in a month is greater than this value, the last day of the month is the billing
         * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
         * 30th.
         */
        @JsonProperty("day") @ExcludeMissing fun _day(): JsonField<Long> = day

        /**
         * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
         * February would have cycles starting February, May, August, and November).
         */
        @JsonProperty("month") @ExcludeMissing fun _month(): JsonField<Long> = month

        /**
         * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored on
         * 2021 would have cycles starting on 2021, 2023, 2025, etc.).
         */
        @JsonProperty("year") @ExcludeMissing fun _year(): JsonField<Long> = year

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): BillingCycleAnchorConfiguration = apply {
            if (validated) {
                return@apply
            }

            day()
            month()
            year()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [BillingCycleAnchorConfiguration]. */
        class Builder internal constructor() {

            private var day: JsonField<Long>? = null
            private var month: JsonField<Long> = JsonMissing.of()
            private var year: JsonField<Long> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(billingCycleAnchorConfiguration: BillingCycleAnchorConfiguration) =
                apply {
                    day = billingCycleAnchorConfiguration.day
                    month = billingCycleAnchorConfiguration.month
                    year = billingCycleAnchorConfiguration.year
                    additionalProperties =
                        billingCycleAnchorConfiguration.additionalProperties.toMutableMap()
                }

            /**
             * The day of the month on which the billing cycle is anchored. If the maximum number of
             * days in a month is greater than this value, the last day of the month is the billing
             * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
             * 30th.
             */
            fun day(day: Long) = day(JsonField.of(day))

            /**
             * The day of the month on which the billing cycle is anchored. If the maximum number of
             * days in a month is greater than this value, the last day of the month is the billing
             * cycle day (e.g. billing_cycle_day=31 for April means the billing period begins on the
             * 30th.
             */
            fun day(day: JsonField<Long>) = apply { this.day = day }

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            fun month(month: Long?) = month(JsonField.ofNullable(month))

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            fun month(month: Long) = month(month as Long?)

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun month(month: Optional<Long>) = month(month.orElse(null) as Long?)

            /**
             * The month on which the billing cycle is anchored (e.g. a quarterly price anchored in
             * February would have cycles starting February, May, August, and November).
             */
            fun month(month: JsonField<Long>) = apply { this.month = month }

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            fun year(year: Long?) = year(JsonField.ofNullable(year))

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            fun year(year: Long) = year(year as Long?)

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun year(year: Optional<Long>) = year(year.orElse(null) as Long?)

            /**
             * The year on which the billing cycle is anchored (e.g. a 2 year billing cycle anchored
             * on 2021 would have cycles starting on 2021, 2023, 2025, etc.).
             */
            fun year(year: JsonField<Long>) = apply { this.year = year }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): BillingCycleAnchorConfiguration =
                BillingCycleAnchorConfiguration(
                    checkRequired("day", day),
                    month,
                    year,
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is BillingCycleAnchorConfiguration && day == other.day && month == other.month && year == other.year && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(day, month, year, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "BillingCycleAnchorConfiguration{day=$day, month=$month, year=$year, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class RemoveAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment_id")
        @ExcludeMissing
        private val adjustmentId: JsonField<String> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the adjustment to remove on the subscription. */
        fun adjustmentId(): String = adjustmentId.getRequired("adjustment_id")

        /** The id of the adjustment to remove on the subscription. */
        @JsonProperty("adjustment_id")
        @ExcludeMissing
        fun _adjustmentId(): JsonField<String> = adjustmentId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): RemoveAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustmentId()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [RemoveAdjustment]. */
        class Builder internal constructor() {

            private var adjustmentId: JsonField<String>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(removeAdjustment: RemoveAdjustment) = apply {
                adjustmentId = removeAdjustment.adjustmentId
                additionalProperties = removeAdjustment.additionalProperties.toMutableMap()
            }

            /** The id of the adjustment to remove on the subscription. */
            fun adjustmentId(adjustmentId: String) = adjustmentId(JsonField.of(adjustmentId))

            /** The id of the adjustment to remove on the subscription. */
            fun adjustmentId(adjustmentId: JsonField<String>) = apply {
                this.adjustmentId = adjustmentId
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): RemoveAdjustment =
                RemoveAdjustment(
                    checkRequired("adjustmentId", adjustmentId),
                    additionalProperties.toImmutable(),
                )
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RemoveAdjustment && adjustmentId == other.adjustmentId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustmentId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "RemoveAdjustment{adjustmentId=$adjustmentId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class RemovePrice
    @JsonCreator
    private constructor(
        @JsonProperty("external_price_id")
        @ExcludeMissing
        private val externalPriceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("price_id")
        @ExcludeMissing
        private val priceId: JsonField<String> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The external price id of the price to remove on the subscription. */
        fun externalPriceId(): Optional<String> =
            Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

        /** The id of the price to remove on the subscription. */
        fun priceId(): Optional<String> = Optional.ofNullable(priceId.getNullable("price_id"))

        /** The external price id of the price to remove on the subscription. */
        @JsonProperty("external_price_id")
        @ExcludeMissing
        fun _externalPriceId(): JsonField<String> = externalPriceId

        /** The id of the price to remove on the subscription. */
        @JsonProperty("price_id") @ExcludeMissing fun _priceId(): JsonField<String> = priceId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): RemovePrice = apply {
            if (validated) {
                return@apply
            }

            externalPriceId()
            priceId()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [RemovePrice]. */
        class Builder internal constructor() {

            private var externalPriceId: JsonField<String> = JsonMissing.of()
            private var priceId: JsonField<String> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(removePrice: RemovePrice) = apply {
                externalPriceId = removePrice.externalPriceId
                priceId = removePrice.priceId
                additionalProperties = removePrice.additionalProperties.toMutableMap()
            }

            /** The external price id of the price to remove on the subscription. */
            fun externalPriceId(externalPriceId: String?) =
                externalPriceId(JsonField.ofNullable(externalPriceId))

            /** The external price id of the price to remove on the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /** The external price id of the price to remove on the subscription. */
            fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The id of the price to remove on the subscription. */
            fun priceId(priceId: String?) = priceId(JsonField.ofNullable(priceId))

            /** The id of the price to remove on the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            /** The id of the price to remove on the subscription. */
            fun priceId(priceId: JsonField<String>) = apply { this.priceId = priceId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): RemovePrice =
                RemovePrice(externalPriceId, priceId, additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RemovePrice && externalPriceId == other.externalPriceId && priceId == other.priceId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(externalPriceId, priceId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "RemovePrice{externalPriceId=$externalPriceId, priceId=$priceId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class ReplaceAdjustment
    @JsonCreator
    private constructor(
        @JsonProperty("adjustment")
        @ExcludeMissing
        private val adjustment: JsonField<Adjustment> = JsonMissing.of(),
        @JsonProperty("replaces_adjustment_id")
        @ExcludeMissing
        private val replacesAdjustmentId: JsonField<String> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The definition of a new adjustment to create and add to the subscription. */
        fun adjustment(): Adjustment = adjustment.getRequired("adjustment")

        /** The id of the adjustment on the plan to replace in the subscription. */
        fun replacesAdjustmentId(): String =
            replacesAdjustmentId.getRequired("replaces_adjustment_id")

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonProperty("adjustment")
        @ExcludeMissing
        fun _adjustment(): JsonField<Adjustment> = adjustment

        /** The id of the adjustment on the plan to replace in the subscription. */
        @JsonProperty("replaces_adjustment_id")
        @ExcludeMissing
        fun _replacesAdjustmentId(): JsonField<String> = replacesAdjustmentId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): ReplaceAdjustment = apply {
            if (validated) {
                return@apply
            }

            adjustment().validate()
            replacesAdjustmentId()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [ReplaceAdjustment]. */
        class Builder internal constructor() {

            private var adjustment: JsonField<Adjustment>? = null
            private var replacesAdjustmentId: JsonField<String>? = null
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(replaceAdjustment: ReplaceAdjustment) = apply {
                adjustment = replaceAdjustment.adjustment
                replacesAdjustmentId = replaceAdjustment.replacesAdjustmentId
                additionalProperties = replaceAdjustment.additionalProperties.toMutableMap()
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: Adjustment) = adjustment(JsonField.of(adjustment))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(adjustment: JsonField<Adjustment>) = apply {
                this.adjustment = adjustment
            }

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newPercentageDiscount: Adjustment.NewPercentageDiscount) =
                adjustment(Adjustment.ofNewPercentageDiscount(newPercentageDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newUsageDiscount: Adjustment.NewUsageDiscount) =
                adjustment(Adjustment.ofNewUsageDiscount(newUsageDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newAmountDiscount: Adjustment.NewAmountDiscount) =
                adjustment(Adjustment.ofNewAmountDiscount(newAmountDiscount))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newMinimum: Adjustment.NewMinimum) =
                adjustment(Adjustment.ofNewMinimum(newMinimum))

            /** The definition of a new adjustment to create and add to the subscription. */
            fun adjustment(newMaximum: Adjustment.NewMaximum) =
                adjustment(Adjustment.ofNewMaximum(newMaximum))

            /** The id of the adjustment on the plan to replace in the subscription. */
            fun replacesAdjustmentId(replacesAdjustmentId: String) =
                replacesAdjustmentId(JsonField.of(replacesAdjustmentId))

            /** The id of the adjustment on the plan to replace in the subscription. */
            fun replacesAdjustmentId(replacesAdjustmentId: JsonField<String>) = apply {
                this.replacesAdjustmentId = replacesAdjustmentId
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): ReplaceAdjustment =
                ReplaceAdjustment(
                    checkRequired("adjustment", adjustment),
                    checkRequired("replacesAdjustmentId", replacesAdjustmentId),
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new adjustment to create and add to the subscription. */
        @JsonDeserialize(using = Adjustment.Deserializer::class)
        @JsonSerialize(using = Adjustment.Serializer::class)
        class Adjustment
        private constructor(
            private val newPercentageDiscount: NewPercentageDiscount? = null,
            private val newUsageDiscount: NewUsageDiscount? = null,
            private val newAmountDiscount: NewAmountDiscount? = null,
            private val newMinimum: NewMinimum? = null,
            private val newMaximum: NewMaximum? = null,
            private val _json: JsonValue? = null,
        ) {

            fun newPercentageDiscount(): Optional<NewPercentageDiscount> =
                Optional.ofNullable(newPercentageDiscount)

            fun newUsageDiscount(): Optional<NewUsageDiscount> =
                Optional.ofNullable(newUsageDiscount)

            fun newAmountDiscount(): Optional<NewAmountDiscount> =
                Optional.ofNullable(newAmountDiscount)

            fun newMinimum(): Optional<NewMinimum> = Optional.ofNullable(newMinimum)

            fun newMaximum(): Optional<NewMaximum> = Optional.ofNullable(newMaximum)

            fun isNewPercentageDiscount(): Boolean = newPercentageDiscount != null

            fun isNewUsageDiscount(): Boolean = newUsageDiscount != null

            fun isNewAmountDiscount(): Boolean = newAmountDiscount != null

            fun isNewMinimum(): Boolean = newMinimum != null

            fun isNewMaximum(): Boolean = newMaximum != null

            fun asNewPercentageDiscount(): NewPercentageDiscount =
                newPercentageDiscount.getOrThrow("newPercentageDiscount")

            fun asNewUsageDiscount(): NewUsageDiscount =
                newUsageDiscount.getOrThrow("newUsageDiscount")

            fun asNewAmountDiscount(): NewAmountDiscount =
                newAmountDiscount.getOrThrow("newAmountDiscount")

            fun asNewMinimum(): NewMinimum = newMinimum.getOrThrow("newMinimum")

            fun asNewMaximum(): NewMaximum = newMaximum.getOrThrow("newMaximum")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newPercentageDiscount != null ->
                        visitor.visitNewPercentageDiscount(newPercentageDiscount)
                    newUsageDiscount != null -> visitor.visitNewUsageDiscount(newUsageDiscount)
                    newAmountDiscount != null -> visitor.visitNewAmountDiscount(newAmountDiscount)
                    newMinimum != null -> visitor.visitNewMinimum(newMinimum)
                    newMaximum != null -> visitor.visitNewMaximum(newMaximum)
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Adjustment = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewPercentageDiscount(
                            newPercentageDiscount: NewPercentageDiscount
                        ) {
                            newPercentageDiscount.validate()
                        }

                        override fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount) {
                            newUsageDiscount.validate()
                        }

                        override fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount) {
                            newAmountDiscount.validate()
                        }

                        override fun visitNewMinimum(newMinimum: NewMinimum) {
                            newMinimum.validate()
                        }

                        override fun visitNewMaximum(newMaximum: NewMaximum) {
                            newMaximum.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Adjustment && newPercentageDiscount == other.newPercentageDiscount && newUsageDiscount == other.newUsageDiscount && newAmountDiscount == other.newAmountDiscount && newMinimum == other.newMinimum && newMaximum == other.newMaximum /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newPercentageDiscount, newUsageDiscount, newAmountDiscount, newMinimum, newMaximum) /* spotless:on */

            override fun toString(): String =
                when {
                    newPercentageDiscount != null ->
                        "Adjustment{newPercentageDiscount=$newPercentageDiscount}"
                    newUsageDiscount != null -> "Adjustment{newUsageDiscount=$newUsageDiscount}"
                    newAmountDiscount != null -> "Adjustment{newAmountDiscount=$newAmountDiscount}"
                    newMinimum != null -> "Adjustment{newMinimum=$newMinimum}"
                    newMaximum != null -> "Adjustment{newMaximum=$newMaximum}"
                    _json != null -> "Adjustment{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Adjustment")
                }

            companion object {

                @JvmStatic
                fun ofNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount) =
                    Adjustment(newPercentageDiscount = newPercentageDiscount)

                @JvmStatic
                fun ofNewUsageDiscount(newUsageDiscount: NewUsageDiscount) =
                    Adjustment(newUsageDiscount = newUsageDiscount)

                @JvmStatic
                fun ofNewAmountDiscount(newAmountDiscount: NewAmountDiscount) =
                    Adjustment(newAmountDiscount = newAmountDiscount)

                @JvmStatic
                fun ofNewMinimum(newMinimum: NewMinimum) = Adjustment(newMinimum = newMinimum)

                @JvmStatic
                fun ofNewMaximum(newMaximum: NewMaximum) = Adjustment(newMaximum = newMaximum)
            }

            /**
             * An interface that defines how to map each variant of [Adjustment] to a value of type
             * [T].
             */
            interface Visitor<out T> {

                fun visitNewPercentageDiscount(newPercentageDiscount: NewPercentageDiscount): T

                fun visitNewUsageDiscount(newUsageDiscount: NewUsageDiscount): T

                fun visitNewAmountDiscount(newAmountDiscount: NewAmountDiscount): T

                fun visitNewMinimum(newMinimum: NewMinimum): T

                fun visitNewMaximum(newMaximum: NewMaximum): T

                /**
                 * Maps an unknown variant of [Adjustment] to a value of type [T].
                 *
                 * An instance of [Adjustment] can contain an unknown variant if it was deserialized
                 * from data that doesn't match any known variant. For example, if the SDK is on an
                 * older version than the API, then the API may respond with new variants that the
                 * SDK is unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Adjustment: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Adjustment>(Adjustment::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Adjustment {
                    val json = JsonValue.fromJsonNode(node)
                    val adjustmentType =
                        json.asObject().getOrNull()?.get("adjustment_type")?.asString()?.getOrNull()

                    when (adjustmentType) {
                        "percentage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewPercentageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newPercentageDiscount = it, _json = json)
                                }
                        }
                        "usage_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewUsageDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newUsageDiscount = it, _json = json)
                                }
                        }
                        "amount_discount" -> {
                            tryDeserialize(node, jacksonTypeRef<NewAmountDiscount>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Adjustment(newAmountDiscount = it, _json = json)
                                }
                        }
                        "minimum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMinimum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMinimum = it, _json = json)
                                }
                        }
                        "maximum" -> {
                            tryDeserialize(node, jacksonTypeRef<NewMaximum>()) { it.validate() }
                                ?.let {
                                    return Adjustment(newMaximum = it, _json = json)
                                }
                        }
                    }

                    return Adjustment(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Adjustment>(Adjustment::class) {

                override fun serialize(
                    value: Adjustment,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.newPercentageDiscount != null ->
                            generator.writeObject(value.newPercentageDiscount)
                        value.newUsageDiscount != null ->
                            generator.writeObject(value.newUsageDiscount)
                        value.newAmountDiscount != null ->
                            generator.writeObject(value.newAmountDiscount)
                        value.newMinimum != null -> generator.writeObject(value.newMinimum)
                        value.newMaximum != null -> generator.writeObject(value.newMaximum)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Adjustment")
                    }
                }
            }

            @NoAutoDetect
            class NewPercentageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("percentage_discount")
                @ExcludeMissing
                private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun percentageDiscount(): Double =
                    percentageDiscount.getRequired("percentage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("percentage_discount")
                @ExcludeMissing
                fun _percentageDiscount(): JsonField<Double> = percentageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewPercentageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    percentageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewPercentageDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var percentageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newPercentageDiscount: NewPercentageDiscount) = apply {
                        adjustmentType = newPercentageDiscount.adjustmentType
                        appliesToPriceIds =
                            newPercentageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        percentageDiscount = newPercentageDiscount.percentageDiscount
                        isInvoiceLevel = newPercentageDiscount.isInvoiceLevel
                        additionalProperties =
                            newPercentageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun percentageDiscount(percentageDiscount: Double) =
                        percentageDiscount(JsonField.of(percentageDiscount))

                    fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                        this.percentageDiscount = percentageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewPercentageDiscount =
                        NewPercentageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("percentageDiscount", percentageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PERCENTAGE_DISCOUNT = of("percentage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        PERCENTAGE_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PERCENTAGE_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Value.PERCENTAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PERCENTAGE_DISCOUNT -> Known.PERCENTAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewPercentageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && percentageDiscount == other.percentageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, percentageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewPercentageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, percentageDiscount=$percentageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewUsageDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("usage_discount")
                @ExcludeMissing
                private val usageDiscount: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun usageDiscount(): Double = usageDiscount.getRequired("usage_discount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("usage_discount")
                @ExcludeMissing
                fun _usageDiscount(): JsonField<Double> = usageDiscount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewUsageDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    usageDiscount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewUsageDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var usageDiscount: JsonField<Double>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newUsageDiscount: NewUsageDiscount) = apply {
                        adjustmentType = newUsageDiscount.adjustmentType
                        appliesToPriceIds =
                            newUsageDiscount.appliesToPriceIds.map { it.toMutableList() }
                        usageDiscount = newUsageDiscount.usageDiscount
                        isInvoiceLevel = newUsageDiscount.isInvoiceLevel
                        additionalProperties = newUsageDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun usageDiscount(usageDiscount: Double) =
                        usageDiscount(JsonField.of(usageDiscount))

                    fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                        this.usageDiscount = usageDiscount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewUsageDiscount =
                        NewUsageDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("usageDiscount", usageDiscount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val USAGE_DISCOUNT = of("usage_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        USAGE_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        USAGE_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            USAGE_DISCOUNT -> Value.USAGE_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            USAGE_DISCOUNT -> Known.USAGE_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewUsageDiscount && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && usageDiscount == other.usageDiscount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, usageDiscount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewUsageDiscount{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, usageDiscount=$usageDiscount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewAmountDiscount
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("amount_discount")
                @ExcludeMissing
                private val amountDiscount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                fun amountDiscount(): String = amountDiscount.getRequired("amount_discount")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                @JsonProperty("amount_discount")
                @ExcludeMissing
                fun _amountDiscount(): JsonField<String> = amountDiscount

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewAmountDiscount = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    amountDiscount()
                    appliesToPriceIds()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewAmountDiscount]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var amountDiscount: JsonField<String>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newAmountDiscount: NewAmountDiscount) = apply {
                        adjustmentType = newAmountDiscount.adjustmentType
                        amountDiscount = newAmountDiscount.amountDiscount
                        appliesToPriceIds =
                            newAmountDiscount.appliesToPriceIds.map { it.toMutableList() }
                        isInvoiceLevel = newAmountDiscount.isInvoiceLevel
                        additionalProperties = newAmountDiscount.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    fun amountDiscount(amountDiscount: String) =
                        amountDiscount(JsonField.of(amountDiscount))

                    fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                        this.amountDiscount = amountDiscount
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewAmountDiscount =
                        NewAmountDiscount(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("amountDiscount", amountDiscount),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val AMOUNT_DISCOUNT = of("amount_discount")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        AMOUNT_DISCOUNT
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        AMOUNT_DISCOUNT,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            AMOUNT_DISCOUNT -> Value.AMOUNT_DISCOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            AMOUNT_DISCOUNT -> Known.AMOUNT_DISCOUNT
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewAmountDiscount && adjustmentType == other.adjustmentType && amountDiscount == other.amountDiscount && appliesToPriceIds == other.appliesToPriceIds && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, amountDiscount, appliesToPriceIds, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewAmountDiscount{adjustmentType=$adjustmentType, amountDiscount=$amountDiscount, appliesToPriceIds=$appliesToPriceIds, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMinimum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("minimum_amount")
                @ExcludeMissing
                private val minimumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                /** The item ID that revenue from this minimum will be attributed to. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                /** The item ID that revenue from this minimum will be attributed to. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("minimum_amount")
                @ExcludeMissing
                fun _minimumAmount(): JsonField<String> = minimumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMinimum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    itemId()
                    minimumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewMinimum]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var itemId: JsonField<String>? = null
                    private var minimumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMinimum: NewMinimum) = apply {
                        adjustmentType = newMinimum.adjustmentType
                        appliesToPriceIds = newMinimum.appliesToPriceIds.map { it.toMutableList() }
                        itemId = newMinimum.itemId
                        minimumAmount = newMinimum.minimumAmount
                        isInvoiceLevel = newMinimum.isInvoiceLevel
                        additionalProperties = newMinimum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The item ID that revenue from this minimum will be attributed to. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun minimumAmount(minimumAmount: String) =
                        minimumAmount(JsonField.of(minimumAmount))

                    fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                        this.minimumAmount = minimumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMinimum =
                        NewMinimum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("itemId", itemId),
                            checkRequired("minimumAmount", minimumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MINIMUM = of("minimum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        MINIMUM
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MINIMUM,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MINIMUM -> Value.MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MINIMUM -> Known.MINIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMinimum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && itemId == other.itemId && minimumAmount == other.minimumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, itemId, minimumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMinimum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, itemId=$itemId, minimumAmount=$minimumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewMaximum
            @JsonCreator
            private constructor(
                @JsonProperty("adjustment_type")
                @ExcludeMissing
                private val adjustmentType: JsonField<AdjustmentType> = JsonMissing.of(),
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                private val appliesToPriceIds: JsonField<List<String>> = JsonMissing.of(),
                @JsonProperty("maximum_amount")
                @ExcludeMissing
                private val maximumAmount: JsonField<String> = JsonMissing.of(),
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                private val isInvoiceLevel: JsonField<Boolean> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun adjustmentType(): AdjustmentType = adjustmentType.getRequired("adjustment_type")

                /** The set of price IDs to which this adjustment applies. */
                fun appliesToPriceIds(): List<String> =
                    appliesToPriceIds.getRequired("applies_to_price_ids")

                fun maximumAmount(): String = maximumAmount.getRequired("maximum_amount")

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                fun isInvoiceLevel(): Optional<Boolean> =
                    Optional.ofNullable(isInvoiceLevel.getNullable("is_invoice_level"))

                @JsonProperty("adjustment_type")
                @ExcludeMissing
                fun _adjustmentType(): JsonField<AdjustmentType> = adjustmentType

                /** The set of price IDs to which this adjustment applies. */
                @JsonProperty("applies_to_price_ids")
                @ExcludeMissing
                fun _appliesToPriceIds(): JsonField<List<String>> = appliesToPriceIds

                @JsonProperty("maximum_amount")
                @ExcludeMissing
                fun _maximumAmount(): JsonField<String> = maximumAmount

                /**
                 * When false, this adjustment will be applied to a single price. Otherwise, it will
                 * be applied at the invoice level, possibly to multiple prices.
                 */
                @JsonProperty("is_invoice_level")
                @ExcludeMissing
                fun _isInvoiceLevel(): JsonField<Boolean> = isInvoiceLevel

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewMaximum = apply {
                    if (validated) {
                        return@apply
                    }

                    adjustmentType()
                    appliesToPriceIds()
                    maximumAmount()
                    isInvoiceLevel()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewMaximum]. */
                class Builder internal constructor() {

                    private var adjustmentType: JsonField<AdjustmentType>? = null
                    private var appliesToPriceIds: JsonField<MutableList<String>>? = null
                    private var maximumAmount: JsonField<String>? = null
                    private var isInvoiceLevel: JsonField<Boolean> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newMaximum: NewMaximum) = apply {
                        adjustmentType = newMaximum.adjustmentType
                        appliesToPriceIds = newMaximum.appliesToPriceIds.map { it.toMutableList() }
                        maximumAmount = newMaximum.maximumAmount
                        isInvoiceLevel = newMaximum.isInvoiceLevel
                        additionalProperties = newMaximum.additionalProperties.toMutableMap()
                    }

                    fun adjustmentType(adjustmentType: AdjustmentType) =
                        adjustmentType(JsonField.of(adjustmentType))

                    fun adjustmentType(adjustmentType: JsonField<AdjustmentType>) = apply {
                        this.adjustmentType = adjustmentType
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: List<String>) =
                        appliesToPriceIds(JsonField.of(appliesToPriceIds))

                    /** The set of price IDs to which this adjustment applies. */
                    fun appliesToPriceIds(appliesToPriceIds: JsonField<List<String>>) = apply {
                        this.appliesToPriceIds = appliesToPriceIds.map { it.toMutableList() }
                    }

                    /** The set of price IDs to which this adjustment applies. */
                    fun addAppliesToPriceId(appliesToPriceId: String) = apply {
                        appliesToPriceIds =
                            (appliesToPriceIds ?: JsonField.of(mutableListOf())).apply {
                                asKnown()
                                    .orElseThrow {
                                        IllegalStateException(
                                            "Field was set to non-list type: ${javaClass.simpleName}"
                                        )
                                    }
                                    .add(appliesToPriceId)
                            }
                    }

                    fun maximumAmount(maximumAmount: String) =
                        maximumAmount(JsonField.of(maximumAmount))

                    fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                        this.maximumAmount = maximumAmount
                    }

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: Boolean) =
                        isInvoiceLevel(JsonField.of(isInvoiceLevel))

                    /**
                     * When false, this adjustment will be applied to a single price. Otherwise, it
                     * will be applied at the invoice level, possibly to multiple prices.
                     */
                    fun isInvoiceLevel(isInvoiceLevel: JsonField<Boolean>) = apply {
                        this.isInvoiceLevel = isInvoiceLevel
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewMaximum =
                        NewMaximum(
                            checkRequired("adjustmentType", adjustmentType),
                            checkRequired("appliesToPriceIds", appliesToPriceIds).map {
                                it.toImmutable()
                            },
                            checkRequired("maximumAmount", maximumAmount),
                            isInvoiceLevel,
                            additionalProperties.toImmutable(),
                        )
                }

                class AdjustmentType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MAXIMUM = of("maximum")

                        @JvmStatic fun of(value: String) = AdjustmentType(JsonField.of(value))
                    }

                    /** An enum containing [AdjustmentType]'s known values. */
                    enum class Known {
                        MAXIMUM
                    }

                    /**
                     * An enum containing [AdjustmentType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [AdjustmentType] can contain an unknown value in a couple of
                     * cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MAXIMUM,
                        /**
                         * An enum member indicating that [AdjustmentType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MAXIMUM -> Value.MAXIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MAXIMUM -> Known.MAXIMUM
                            else -> throw OrbInvalidDataException("Unknown AdjustmentType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is AdjustmentType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewMaximum && adjustmentType == other.adjustmentType && appliesToPriceIds == other.appliesToPriceIds && maximumAmount == other.maximumAmount && isInvoiceLevel == other.isInvoiceLevel && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(adjustmentType, appliesToPriceIds, maximumAmount, isInvoiceLevel, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewMaximum{adjustmentType=$adjustmentType, appliesToPriceIds=$appliesToPriceIds, maximumAmount=$maximumAmount, isInvoiceLevel=$isInvoiceLevel, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ReplaceAdjustment && adjustment == other.adjustment && replacesAdjustmentId == other.replacesAdjustmentId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(adjustment, replacesAdjustmentId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "ReplaceAdjustment{adjustment=$adjustment, replacesAdjustmentId=$replacesAdjustmentId, additionalProperties=$additionalProperties}"
    }

    @NoAutoDetect
    class ReplacePrice
    @JsonCreator
    private constructor(
        @JsonProperty("replaces_price_id")
        @ExcludeMissing
        private val replacesPriceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("allocation_price")
        @ExcludeMissing
        private val allocationPrice: JsonField<AllocationPrice> = JsonMissing.of(),
        @JsonProperty("discounts")
        @ExcludeMissing
        private val discounts: JsonField<List<Discount>> = JsonMissing.of(),
        @JsonProperty("external_price_id")
        @ExcludeMissing
        private val externalPriceId: JsonField<String> = JsonMissing.of(),
        @JsonProperty("fixed_price_quantity")
        @ExcludeMissing
        private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        private val maximumAmount: JsonField<String> = JsonMissing.of(),
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        private val minimumAmount: JsonField<String> = JsonMissing.of(),
        @JsonProperty("price")
        @ExcludeMissing
        private val price: JsonField<Price> = JsonMissing.of(),
        @JsonProperty("price_id")
        @ExcludeMissing
        private val priceId: JsonField<String> = JsonMissing.of(),
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        /** The id of the price on the plan to replace in the subscription. */
        fun replacesPriceId(): String = replacesPriceId.getRequired("replaces_price_id")

        /** The definition of a new allocation price to create and add to the subscription. */
        fun allocationPrice(): Optional<AllocationPrice> =
            Optional.ofNullable(allocationPrice.getNullable("allocation_price"))

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
         * replacement price.
         */
        @Deprecated("deprecated")
        fun discounts(): Optional<List<Discount>> =
            Optional.ofNullable(discounts.getNullable("discounts"))

        /** The external price id of the price to add to the subscription. */
        fun externalPriceId(): Optional<String> =
            Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

        /** The new quantity of the price, if the price is a fixed price. */
        fun fixedPriceQuantity(): Optional<Double> =
            Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
         * replacement price.
         */
        @Deprecated("deprecated")
        fun maximumAmount(): Optional<String> =
            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
         * replacement price.
         */
        @Deprecated("deprecated")
        fun minimumAmount(): Optional<String> =
            Optional.ofNullable(minimumAmount.getNullable("minimum_amount"))

        /** The definition of a new price to create and add to the subscription. */
        fun price(): Optional<Price> = Optional.ofNullable(price.getNullable("price"))

        /** The id of the price to add to the subscription. */
        fun priceId(): Optional<String> = Optional.ofNullable(priceId.getNullable("price_id"))

        /** The id of the price on the plan to replace in the subscription. */
        @JsonProperty("replaces_price_id")
        @ExcludeMissing
        fun _replacesPriceId(): JsonField<String> = replacesPriceId

        /** The definition of a new allocation price to create and add to the subscription. */
        @JsonProperty("allocation_price")
        @ExcludeMissing
        fun _allocationPrice(): JsonField<AllocationPrice> = allocationPrice

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
         * replacement price.
         */
        @Deprecated("deprecated")
        @JsonProperty("discounts")
        @ExcludeMissing
        fun _discounts(): JsonField<List<Discount>> = discounts

        /** The external price id of the price to add to the subscription. */
        @JsonProperty("external_price_id")
        @ExcludeMissing
        fun _externalPriceId(): JsonField<String> = externalPriceId

        /** The new quantity of the price, if the price is a fixed price. */
        @JsonProperty("fixed_price_quantity")
        @ExcludeMissing
        fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
         * replacement price.
         */
        @Deprecated("deprecated")
        @JsonProperty("maximum_amount")
        @ExcludeMissing
        fun _maximumAmount(): JsonField<String> = maximumAmount

        /**
         * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
         * replacement price.
         */
        @Deprecated("deprecated")
        @JsonProperty("minimum_amount")
        @ExcludeMissing
        fun _minimumAmount(): JsonField<String> = minimumAmount

        /** The definition of a new price to create and add to the subscription. */
        @JsonProperty("price") @ExcludeMissing fun _price(): JsonField<Price> = price

        /** The id of the price to add to the subscription. */
        @JsonProperty("price_id") @ExcludeMissing fun _priceId(): JsonField<String> = priceId

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): ReplacePrice = apply {
            if (validated) {
                return@apply
            }

            replacesPriceId()
            allocationPrice().ifPresent { it.validate() }
            discounts().ifPresent { it.forEach { it.validate() } }
            externalPriceId()
            fixedPriceQuantity()
            maximumAmount()
            minimumAmount()
            price().ifPresent { it.validate() }
            priceId()
            validated = true
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            @JvmStatic fun builder() = Builder()
        }

        /** A builder for [ReplacePrice]. */
        class Builder internal constructor() {

            private var replacesPriceId: JsonField<String>? = null
            private var allocationPrice: JsonField<AllocationPrice> = JsonMissing.of()
            private var discounts: JsonField<MutableList<Discount>>? = null
            private var externalPriceId: JsonField<String> = JsonMissing.of()
            private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
            private var maximumAmount: JsonField<String> = JsonMissing.of()
            private var minimumAmount: JsonField<String> = JsonMissing.of()
            private var price: JsonField<Price> = JsonMissing.of()
            private var priceId: JsonField<String> = JsonMissing.of()
            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            @JvmSynthetic
            internal fun from(replacePrice: ReplacePrice) = apply {
                replacesPriceId = replacePrice.replacesPriceId
                allocationPrice = replacePrice.allocationPrice
                discounts = replacePrice.discounts.map { it.toMutableList() }
                externalPriceId = replacePrice.externalPriceId
                fixedPriceQuantity = replacePrice.fixedPriceQuantity
                maximumAmount = replacePrice.maximumAmount
                minimumAmount = replacePrice.minimumAmount
                price = replacePrice.price
                priceId = replacePrice.priceId
                additionalProperties = replacePrice.additionalProperties.toMutableMap()
            }

            /** The id of the price on the plan to replace in the subscription. */
            fun replacesPriceId(replacesPriceId: String) =
                replacesPriceId(JsonField.of(replacesPriceId))

            /** The id of the price on the plan to replace in the subscription. */
            fun replacesPriceId(replacesPriceId: JsonField<String>) = apply {
                this.replacesPriceId = replacesPriceId
            }

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: AllocationPrice?) =
                allocationPrice(JsonField.ofNullable(allocationPrice))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: Optional<AllocationPrice>) =
                allocationPrice(allocationPrice.orElse(null))

            /** The definition of a new allocation price to create and add to the subscription. */
            fun allocationPrice(allocationPrice: JsonField<AllocationPrice>) = apply {
                this.allocationPrice = allocationPrice
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun discounts(discounts: List<Discount>?) = discounts(JsonField.ofNullable(discounts))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun discounts(discounts: Optional<List<Discount>>) = discounts(discounts.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun discounts(discounts: JsonField<List<Discount>>) = apply {
                this.discounts = discounts.map { it.toMutableList() }
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's discounts for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun addDiscount(discount: Discount) = apply {
                discounts =
                    (discounts ?: JsonField.of(mutableListOf())).apply {
                        asKnown()
                            .orElseThrow {
                                IllegalStateException(
                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                )
                            }
                            .add(discount)
                    }
            }

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: String?) =
                externalPriceId(JsonField.ofNullable(externalPriceId))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: Optional<String>) =
                externalPriceId(externalPriceId.orElse(null))

            /** The external price id of the price to add to the subscription. */
            fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                this.externalPriceId = externalPriceId
            }

            /** The new quantity of the price, if the price is a fixed price. */
            fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

            /** The new quantity of the price, if the price is a fixed price. */
            fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                fixedPriceQuantity(fixedPriceQuantity as Double?)

            /** The new quantity of the price, if the price is a fixed price. */
            @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
            fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

            /** The new quantity of the price, if the price is a fixed price. */
            fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                this.fixedPriceQuantity = fixedPriceQuantity
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun maximumAmount(maximumAmount: String?) =
                maximumAmount(JsonField.ofNullable(maximumAmount))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun maximumAmount(maximumAmount: Optional<String>) =
                maximumAmount(maximumAmount.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's maximum amount for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                this.maximumAmount = maximumAmount
            }

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun minimumAmount(minimumAmount: String?) =
                minimumAmount(JsonField.ofNullable(minimumAmount))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun minimumAmount(minimumAmount: Optional<String>) =
                minimumAmount(minimumAmount.orElse(null))

            /**
             * [DEPRECATED] Use add_adjustments instead. The subscription's minimum amount for the
             * replacement price.
             */
            @Deprecated("deprecated")
            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                this.minimumAmount = minimumAmount
            }

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Price?) = price(JsonField.ofNullable(price))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: Optional<Price>) = price(price.orElse(null))

            /** The definition of a new price to create and add to the subscription. */
            fun price(price: JsonField<Price>) = apply { this.price = price }

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionUnit: Price.NewSubscriptionUnitPrice) =
                price(Price.ofNewSubscriptionUnit(newSubscriptionUnit))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionPackage: Price.NewSubscriptionPackagePrice) =
                price(Price.ofNewSubscriptionPackage(newSubscriptionPackage))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionMatrix: Price.NewSubscriptionMatrixPrice) =
                price(Price.ofNewSubscriptionMatrix(newSubscriptionMatrix))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionTiered: Price.NewSubscriptionTieredPrice) =
                price(Price.ofNewSubscriptionTiered(newSubscriptionTiered))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionTieredBps: Price.NewSubscriptionTieredBpsPrice) =
                price(Price.ofNewSubscriptionTieredBps(newSubscriptionTieredBps))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionBps: Price.NewSubscriptionBpsPrice) =
                price(Price.ofNewSubscriptionBps(newSubscriptionBps))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionBulkBps: Price.NewSubscriptionBulkBpsPrice) =
                price(Price.ofNewSubscriptionBulkBps(newSubscriptionBulkBps))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionBulk: Price.NewSubscriptionBulkPrice) =
                price(Price.ofNewSubscriptionBulk(newSubscriptionBulk))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionThresholdTotalAmount: Price.NewSubscriptionThresholdTotalAmountPrice
            ) =
                price(
                    Price.ofNewSubscriptionThresholdTotalAmount(newSubscriptionThresholdTotalAmount)
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionTieredPackage: Price.NewSubscriptionTieredPackagePrice) =
                price(Price.ofNewSubscriptionTieredPackage(newSubscriptionTieredPackage))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionTieredWithMinimum: Price.NewSubscriptionTieredWithMinimumPrice
            ) = price(Price.ofNewSubscriptionTieredWithMinimum(newSubscriptionTieredWithMinimum))

            /** The definition of a new price to create and add to the subscription. */
            fun price(newSubscriptionUnitWithPercent: Price.NewSubscriptionUnitWithPercentPrice) =
                price(Price.ofNewSubscriptionUnitWithPercent(newSubscriptionUnitWithPercent))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionPackageWithAllocation:
                    Price.NewSubscriptionPackageWithAllocationPrice
            ) =
                price(
                    Price.ofNewSubscriptionPackageWithAllocation(
                        newSubscriptionPackageWithAllocation
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionTierWithProration: Price.NewSubscriptionTierWithProrationPrice
            ) = price(Price.ofNewSubscriptionTierWithProration(newSubscriptionTierWithProration))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionUnitWithProration: Price.NewSubscriptionUnitWithProrationPrice
            ) = price(Price.ofNewSubscriptionUnitWithProration(newSubscriptionUnitWithProration))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionGroupedAllocation: Price.NewSubscriptionGroupedAllocationPrice
            ) = price(Price.ofNewSubscriptionGroupedAllocation(newSubscriptionGroupedAllocation))

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionGroupedWithProratedMinimum:
                    Price.NewSubscriptionGroupedWithProratedMinimumPrice
            ) =
                price(
                    Price.ofNewSubscriptionGroupedWithProratedMinimum(
                        newSubscriptionGroupedWithProratedMinimum
                    )
                )

            /** The definition of a new price to create and add to the subscription. */
            fun price(
                newSubscriptionBulkWithProration: Price.NewSubscriptionBulkWithProrationPrice
            ) = price(Price.ofNewSubscriptionBulkWithProration(newSubscriptionBulkWithProration))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: String?) = priceId(JsonField.ofNullable(priceId))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: Optional<String>) = priceId(priceId.orElse(null))

            /** The id of the price to add to the subscription. */
            fun priceId(priceId: JsonField<String>) = apply { this.priceId = priceId }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): ReplacePrice =
                ReplacePrice(
                    checkRequired("replacesPriceId", replacesPriceId),
                    allocationPrice,
                    (discounts ?: JsonMissing.of()).map { it.toImmutable() },
                    externalPriceId,
                    fixedPriceQuantity,
                    maximumAmount,
                    minimumAmount,
                    price,
                    priceId,
                    additionalProperties.toImmutable(),
                )
        }

        /** The definition of a new allocation price to create and add to the subscription. */
        @NoAutoDetect
        class AllocationPrice
        @JsonCreator
        private constructor(
            @JsonProperty("amount")
            @ExcludeMissing
            private val amount: JsonField<String> = JsonMissing.of(),
            @JsonProperty("cadence")
            @ExcludeMissing
            private val cadence: JsonField<Cadence> = JsonMissing.of(),
            @JsonProperty("currency")
            @ExcludeMissing
            private val currency: JsonField<String> = JsonMissing.of(),
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            private val expiresAtEndOfCadence: JsonField<Boolean> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            fun amount(): String = amount.getRequired("amount")

            /** The cadence at which to allocate the amount to the customer. */
            fun cadence(): Cadence = cadence.getRequired("cadence")

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            fun currency(): String = currency.getRequired("currency")

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            fun expiresAtEndOfCadence(): Boolean =
                expiresAtEndOfCadence.getRequired("expires_at_end_of_cadence")

            /** An amount of the currency to allocate to the customer at the specified cadence. */
            @JsonProperty("amount") @ExcludeMissing fun _amount(): JsonField<String> = amount

            /** The cadence at which to allocate the amount to the customer. */
            @JsonProperty("cadence") @ExcludeMissing fun _cadence(): JsonField<Cadence> = cadence

            /**
             * An ISO 4217 currency string or a custom pricing unit identifier in which to bill this
             * price.
             */
            @JsonProperty("currency") @ExcludeMissing fun _currency(): JsonField<String> = currency

            /**
             * Whether the allocated amount should expire at the end of the cadence or roll over to
             * the next period.
             */
            @JsonProperty("expires_at_end_of_cadence")
            @ExcludeMissing
            fun _expiresAtEndOfCadence(): JsonField<Boolean> = expiresAtEndOfCadence

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): AllocationPrice = apply {
                if (validated) {
                    return@apply
                }

                amount()
                cadence()
                currency()
                expiresAtEndOfCadence()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [AllocationPrice]. */
            class Builder internal constructor() {

                private var amount: JsonField<String>? = null
                private var cadence: JsonField<Cadence>? = null
                private var currency: JsonField<String>? = null
                private var expiresAtEndOfCadence: JsonField<Boolean>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(allocationPrice: AllocationPrice) = apply {
                    amount = allocationPrice.amount
                    cadence = allocationPrice.cadence
                    currency = allocationPrice.currency
                    expiresAtEndOfCadence = allocationPrice.expiresAtEndOfCadence
                    additionalProperties = allocationPrice.additionalProperties.toMutableMap()
                }

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: String) = amount(JsonField.of(amount))

                /**
                 * An amount of the currency to allocate to the customer at the specified cadence.
                 */
                fun amount(amount: JsonField<String>) = apply { this.amount = amount }

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                /** The cadence at which to allocate the amount to the customer. */
                fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: String) = currency(JsonField.of(currency))

                /**
                 * An ISO 4217 currency string or a custom pricing unit identifier in which to bill
                 * this price.
                 */
                fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: Boolean) =
                    expiresAtEndOfCadence(JsonField.of(expiresAtEndOfCadence))

                /**
                 * Whether the allocated amount should expire at the end of the cadence or roll over
                 * to the next period.
                 */
                fun expiresAtEndOfCadence(expiresAtEndOfCadence: JsonField<Boolean>) = apply {
                    this.expiresAtEndOfCadence = expiresAtEndOfCadence
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): AllocationPrice =
                    AllocationPrice(
                        checkRequired("amount", amount),
                        checkRequired("cadence", cadence),
                        checkRequired("currency", currency),
                        checkRequired("expiresAtEndOfCadence", expiresAtEndOfCadence),
                        additionalProperties.toImmutable(),
                    )
            }

            /** The cadence at which to allocate the amount to the customer. */
            class Cadence @JsonCreator private constructor(private val value: JsonField<String>) :
                Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val ONE_TIME = of("one_time")

                    @JvmField val MONTHLY = of("monthly")

                    @JvmField val QUARTERLY = of("quarterly")

                    @JvmField val SEMI_ANNUAL = of("semi_annual")

                    @JvmField val ANNUAL = of("annual")

                    @JvmField val CUSTOM = of("custom")

                    @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                }

                /** An enum containing [Cadence]'s known values. */
                enum class Known {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                }

                /**
                 * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                 *
                 * An instance of [Cadence] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    ONE_TIME,
                    MONTHLY,
                    QUARTERLY,
                    SEMI_ANNUAL,
                    ANNUAL,
                    CUSTOM,
                    /**
                     * An enum member indicating that [Cadence] was instantiated with an unknown
                     * value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        ONE_TIME -> Value.ONE_TIME
                        MONTHLY -> Value.MONTHLY
                        QUARTERLY -> Value.QUARTERLY
                        SEMI_ANNUAL -> Value.SEMI_ANNUAL
                        ANNUAL -> Value.ANNUAL
                        CUSTOM -> Value.CUSTOM
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        ONE_TIME -> Known.ONE_TIME
                        MONTHLY -> Known.MONTHLY
                        QUARTERLY -> Known.QUARTERLY
                        SEMI_ANNUAL -> Known.SEMI_ANNUAL
                        ANNUAL -> Known.ANNUAL
                        CUSTOM -> Known.CUSTOM
                        else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is AllocationPrice && amount == other.amount && cadence == other.cadence && currency == other.currency && expiresAtEndOfCadence == other.expiresAtEndOfCadence && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(amount, cadence, currency, expiresAtEndOfCadence, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "AllocationPrice{amount=$amount, cadence=$cadence, currency=$currency, expiresAtEndOfCadence=$expiresAtEndOfCadence, additionalProperties=$additionalProperties}"
        }

        @NoAutoDetect
        class Discount
        @JsonCreator
        private constructor(
            @JsonProperty("discount_type")
            @ExcludeMissing
            private val discountType: JsonField<DiscountType> = JsonMissing.of(),
            @JsonProperty("amount_discount")
            @ExcludeMissing
            private val amountDiscount: JsonField<String> = JsonMissing.of(),
            @JsonProperty("percentage_discount")
            @ExcludeMissing
            private val percentageDiscount: JsonField<Double> = JsonMissing.of(),
            @JsonProperty("usage_discount")
            @ExcludeMissing
            private val usageDiscount: JsonField<Double> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            fun discountType(): DiscountType = discountType.getRequired("discount_type")

            /** Only available if discount_type is `amount`. */
            fun amountDiscount(): Optional<String> =
                Optional.ofNullable(amountDiscount.getNullable("amount_discount"))

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            fun percentageDiscount(): Optional<Double> =
                Optional.ofNullable(percentageDiscount.getNullable("percentage_discount"))

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            fun usageDiscount(): Optional<Double> =
                Optional.ofNullable(usageDiscount.getNullable("usage_discount"))

            @JsonProperty("discount_type")
            @ExcludeMissing
            fun _discountType(): JsonField<DiscountType> = discountType

            /** Only available if discount_type is `amount`. */
            @JsonProperty("amount_discount")
            @ExcludeMissing
            fun _amountDiscount(): JsonField<String> = amountDiscount

            /**
             * Only available if discount_type is `percentage`. This is a number between 0 and 1.
             */
            @JsonProperty("percentage_discount")
            @ExcludeMissing
            fun _percentageDiscount(): JsonField<Double> = percentageDiscount

            /**
             * Only available if discount_type is `usage`. Number of usage units that this discount
             * is for
             */
            @JsonProperty("usage_discount")
            @ExcludeMissing
            fun _usageDiscount(): JsonField<Double> = usageDiscount

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): Discount = apply {
                if (validated) {
                    return@apply
                }

                discountType()
                amountDiscount()
                percentageDiscount()
                usageDiscount()
                validated = true
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                @JvmStatic fun builder() = Builder()
            }

            /** A builder for [Discount]. */
            class Builder internal constructor() {

                private var discountType: JsonField<DiscountType>? = null
                private var amountDiscount: JsonField<String> = JsonMissing.of()
                private var percentageDiscount: JsonField<Double> = JsonMissing.of()
                private var usageDiscount: JsonField<Double> = JsonMissing.of()
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                @JvmSynthetic
                internal fun from(discount: Discount) = apply {
                    discountType = discount.discountType
                    amountDiscount = discount.amountDiscount
                    percentageDiscount = discount.percentageDiscount
                    usageDiscount = discount.usageDiscount
                    additionalProperties = discount.additionalProperties.toMutableMap()
                }

                fun discountType(discountType: DiscountType) =
                    discountType(JsonField.of(discountType))

                fun discountType(discountType: JsonField<DiscountType>) = apply {
                    this.discountType = discountType
                }

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: String?) =
                    amountDiscount(JsonField.ofNullable(amountDiscount))

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: Optional<String>) =
                    amountDiscount(amountDiscount.orElse(null))

                /** Only available if discount_type is `amount`. */
                fun amountDiscount(amountDiscount: JsonField<String>) = apply {
                    this.amountDiscount = amountDiscount
                }

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double?) =
                    percentageDiscount(JsonField.ofNullable(percentageDiscount))

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: Double) =
                    percentageDiscount(percentageDiscount as Double?)

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun percentageDiscount(percentageDiscount: Optional<Double>) =
                    percentageDiscount(percentageDiscount.orElse(null) as Double?)

                /**
                 * Only available if discount_type is `percentage`. This is a number between 0
                 * and 1.
                 */
                fun percentageDiscount(percentageDiscount: JsonField<Double>) = apply {
                    this.percentageDiscount = percentageDiscount
                }

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double?) =
                    usageDiscount(JsonField.ofNullable(usageDiscount))

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: Double) = usageDiscount(usageDiscount as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                fun usageDiscount(usageDiscount: Optional<Double>) =
                    usageDiscount(usageDiscount.orElse(null) as Double?)

                /**
                 * Only available if discount_type is `usage`. Number of usage units that this
                 * discount is for
                 */
                fun usageDiscount(usageDiscount: JsonField<Double>) = apply {
                    this.usageDiscount = usageDiscount
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): Discount =
                    Discount(
                        checkRequired("discountType", discountType),
                        amountDiscount,
                        percentageDiscount,
                        usageDiscount,
                        additionalProperties.toImmutable(),
                    )
            }

            class DiscountType
            @JsonCreator
            private constructor(private val value: JsonField<String>) : Enum {

                /**
                 * Returns this class instance's raw value.
                 *
                 * This is usually only useful if this instance was deserialized from data that
                 * doesn't match any known member, and you want to know that value. For example, if
                 * the SDK is on an older version than the API, then the API may respond with new
                 * members that the SDK is unaware of.
                 */
                @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

                companion object {

                    @JvmField val PERCENTAGE = of("percentage")

                    @JvmField val USAGE = of("usage")

                    @JvmField val AMOUNT = of("amount")

                    @JvmStatic fun of(value: String) = DiscountType(JsonField.of(value))
                }

                /** An enum containing [DiscountType]'s known values. */
                enum class Known {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                }

                /**
                 * An enum containing [DiscountType]'s known values, as well as an [_UNKNOWN]
                 * member.
                 *
                 * An instance of [DiscountType] can contain an unknown value in a couple of cases:
                 * - It was deserialized from data that doesn't match any known member. For example,
                 *   if the SDK is on an older version than the API, then the API may respond with
                 *   new members that the SDK is unaware of.
                 * - It was constructed with an arbitrary value using the [of] method.
                 */
                enum class Value {
                    PERCENTAGE,
                    USAGE,
                    AMOUNT,
                    /**
                     * An enum member indicating that [DiscountType] was instantiated with an
                     * unknown value.
                     */
                    _UNKNOWN,
                }

                /**
                 * Returns an enum member corresponding to this class instance's value, or
                 * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                 *
                 * Use the [known] method instead if you're certain the value is always known or if
                 * you want to throw for the unknown case.
                 */
                fun value(): Value =
                    when (this) {
                        PERCENTAGE -> Value.PERCENTAGE
                        USAGE -> Value.USAGE
                        AMOUNT -> Value.AMOUNT
                        else -> Value._UNKNOWN
                    }

                /**
                 * Returns an enum member corresponding to this class instance's value.
                 *
                 * Use the [value] method instead if you're uncertain the value is always known and
                 * don't want to throw for the unknown case.
                 *
                 * @throws OrbInvalidDataException if this class instance's value is a not a known
                 *   member.
                 */
                fun known(): Known =
                    when (this) {
                        PERCENTAGE -> Known.PERCENTAGE
                        USAGE -> Known.USAGE
                        AMOUNT -> Known.AMOUNT
                        else -> throw OrbInvalidDataException("Unknown DiscountType: $value")
                    }

                fun asString(): String = _value().asStringOrThrow()

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is DiscountType && value == other.value /* spotless:on */
                }

                override fun hashCode() = value.hashCode()

                override fun toString() = value.toString()
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Discount && discountType == other.discountType && amountDiscount == other.amountDiscount && percentageDiscount == other.percentageDiscount && usageDiscount == other.usageDiscount && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(discountType, amountDiscount, percentageDiscount, usageDiscount, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "Discount{discountType=$discountType, amountDiscount=$amountDiscount, percentageDiscount=$percentageDiscount, usageDiscount=$usageDiscount, additionalProperties=$additionalProperties}"
        }

        /** The definition of a new price to create and add to the subscription. */
        @JsonDeserialize(using = Price.Deserializer::class)
        @JsonSerialize(using = Price.Serializer::class)
        class Price
        private constructor(
            private val newSubscriptionUnit: NewSubscriptionUnitPrice? = null,
            private val newSubscriptionPackage: NewSubscriptionPackagePrice? = null,
            private val newSubscriptionMatrix: NewSubscriptionMatrixPrice? = null,
            private val newSubscriptionTiered: NewSubscriptionTieredPrice? = null,
            private val newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice? = null,
            private val newSubscriptionBps: NewSubscriptionBpsPrice? = null,
            private val newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice? = null,
            private val newSubscriptionBulk: NewSubscriptionBulkPrice? = null,
            private val newSubscriptionThresholdTotalAmount:
                NewSubscriptionThresholdTotalAmountPrice? =
                null,
            private val newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice? = null,
            private val newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice? =
                null,
            private val newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice? = null,
            private val newSubscriptionPackageWithAllocation:
                NewSubscriptionPackageWithAllocationPrice? =
                null,
            private val newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice? =
                null,
            private val newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice? =
                null,
            private val newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice? =
                null,
            private val newSubscriptionGroupedWithProratedMinimum:
                NewSubscriptionGroupedWithProratedMinimumPrice? =
                null,
            private val newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice? =
                null,
            private val _json: JsonValue? = null,
        ) {

            fun newSubscriptionUnit(): Optional<NewSubscriptionUnitPrice> =
                Optional.ofNullable(newSubscriptionUnit)

            fun newSubscriptionPackage(): Optional<NewSubscriptionPackagePrice> =
                Optional.ofNullable(newSubscriptionPackage)

            fun newSubscriptionMatrix(): Optional<NewSubscriptionMatrixPrice> =
                Optional.ofNullable(newSubscriptionMatrix)

            fun newSubscriptionTiered(): Optional<NewSubscriptionTieredPrice> =
                Optional.ofNullable(newSubscriptionTiered)

            fun newSubscriptionTieredBps(): Optional<NewSubscriptionTieredBpsPrice> =
                Optional.ofNullable(newSubscriptionTieredBps)

            fun newSubscriptionBps(): Optional<NewSubscriptionBpsPrice> =
                Optional.ofNullable(newSubscriptionBps)

            fun newSubscriptionBulkBps(): Optional<NewSubscriptionBulkBpsPrice> =
                Optional.ofNullable(newSubscriptionBulkBps)

            fun newSubscriptionBulk(): Optional<NewSubscriptionBulkPrice> =
                Optional.ofNullable(newSubscriptionBulk)

            fun newSubscriptionThresholdTotalAmount():
                Optional<NewSubscriptionThresholdTotalAmountPrice> =
                Optional.ofNullable(newSubscriptionThresholdTotalAmount)

            fun newSubscriptionTieredPackage(): Optional<NewSubscriptionTieredPackagePrice> =
                Optional.ofNullable(newSubscriptionTieredPackage)

            fun newSubscriptionTieredWithMinimum():
                Optional<NewSubscriptionTieredWithMinimumPrice> =
                Optional.ofNullable(newSubscriptionTieredWithMinimum)

            fun newSubscriptionUnitWithPercent(): Optional<NewSubscriptionUnitWithPercentPrice> =
                Optional.ofNullable(newSubscriptionUnitWithPercent)

            fun newSubscriptionPackageWithAllocation():
                Optional<NewSubscriptionPackageWithAllocationPrice> =
                Optional.ofNullable(newSubscriptionPackageWithAllocation)

            fun newSubscriptionTierWithProration():
                Optional<NewSubscriptionTierWithProrationPrice> =
                Optional.ofNullable(newSubscriptionTierWithProration)

            fun newSubscriptionUnitWithProration():
                Optional<NewSubscriptionUnitWithProrationPrice> =
                Optional.ofNullable(newSubscriptionUnitWithProration)

            fun newSubscriptionGroupedAllocation():
                Optional<NewSubscriptionGroupedAllocationPrice> =
                Optional.ofNullable(newSubscriptionGroupedAllocation)

            fun newSubscriptionGroupedWithProratedMinimum():
                Optional<NewSubscriptionGroupedWithProratedMinimumPrice> =
                Optional.ofNullable(newSubscriptionGroupedWithProratedMinimum)

            fun newSubscriptionBulkWithProration():
                Optional<NewSubscriptionBulkWithProrationPrice> =
                Optional.ofNullable(newSubscriptionBulkWithProration)

            fun isNewSubscriptionUnit(): Boolean = newSubscriptionUnit != null

            fun isNewSubscriptionPackage(): Boolean = newSubscriptionPackage != null

            fun isNewSubscriptionMatrix(): Boolean = newSubscriptionMatrix != null

            fun isNewSubscriptionTiered(): Boolean = newSubscriptionTiered != null

            fun isNewSubscriptionTieredBps(): Boolean = newSubscriptionTieredBps != null

            fun isNewSubscriptionBps(): Boolean = newSubscriptionBps != null

            fun isNewSubscriptionBulkBps(): Boolean = newSubscriptionBulkBps != null

            fun isNewSubscriptionBulk(): Boolean = newSubscriptionBulk != null

            fun isNewSubscriptionThresholdTotalAmount(): Boolean =
                newSubscriptionThresholdTotalAmount != null

            fun isNewSubscriptionTieredPackage(): Boolean = newSubscriptionTieredPackage != null

            fun isNewSubscriptionTieredWithMinimum(): Boolean =
                newSubscriptionTieredWithMinimum != null

            fun isNewSubscriptionUnitWithPercent(): Boolean = newSubscriptionUnitWithPercent != null

            fun isNewSubscriptionPackageWithAllocation(): Boolean =
                newSubscriptionPackageWithAllocation != null

            fun isNewSubscriptionTierWithProration(): Boolean =
                newSubscriptionTierWithProration != null

            fun isNewSubscriptionUnitWithProration(): Boolean =
                newSubscriptionUnitWithProration != null

            fun isNewSubscriptionGroupedAllocation(): Boolean =
                newSubscriptionGroupedAllocation != null

            fun isNewSubscriptionGroupedWithProratedMinimum(): Boolean =
                newSubscriptionGroupedWithProratedMinimum != null

            fun isNewSubscriptionBulkWithProration(): Boolean =
                newSubscriptionBulkWithProration != null

            fun asNewSubscriptionUnit(): NewSubscriptionUnitPrice =
                newSubscriptionUnit.getOrThrow("newSubscriptionUnit")

            fun asNewSubscriptionPackage(): NewSubscriptionPackagePrice =
                newSubscriptionPackage.getOrThrow("newSubscriptionPackage")

            fun asNewSubscriptionMatrix(): NewSubscriptionMatrixPrice =
                newSubscriptionMatrix.getOrThrow("newSubscriptionMatrix")

            fun asNewSubscriptionTiered(): NewSubscriptionTieredPrice =
                newSubscriptionTiered.getOrThrow("newSubscriptionTiered")

            fun asNewSubscriptionTieredBps(): NewSubscriptionTieredBpsPrice =
                newSubscriptionTieredBps.getOrThrow("newSubscriptionTieredBps")

            fun asNewSubscriptionBps(): NewSubscriptionBpsPrice =
                newSubscriptionBps.getOrThrow("newSubscriptionBps")

            fun asNewSubscriptionBulkBps(): NewSubscriptionBulkBpsPrice =
                newSubscriptionBulkBps.getOrThrow("newSubscriptionBulkBps")

            fun asNewSubscriptionBulk(): NewSubscriptionBulkPrice =
                newSubscriptionBulk.getOrThrow("newSubscriptionBulk")

            fun asNewSubscriptionThresholdTotalAmount(): NewSubscriptionThresholdTotalAmountPrice =
                newSubscriptionThresholdTotalAmount.getOrThrow(
                    "newSubscriptionThresholdTotalAmount"
                )

            fun asNewSubscriptionTieredPackage(): NewSubscriptionTieredPackagePrice =
                newSubscriptionTieredPackage.getOrThrow("newSubscriptionTieredPackage")

            fun asNewSubscriptionTieredWithMinimum(): NewSubscriptionTieredWithMinimumPrice =
                newSubscriptionTieredWithMinimum.getOrThrow("newSubscriptionTieredWithMinimum")

            fun asNewSubscriptionUnitWithPercent(): NewSubscriptionUnitWithPercentPrice =
                newSubscriptionUnitWithPercent.getOrThrow("newSubscriptionUnitWithPercent")

            fun asNewSubscriptionPackageWithAllocation():
                NewSubscriptionPackageWithAllocationPrice =
                newSubscriptionPackageWithAllocation.getOrThrow(
                    "newSubscriptionPackageWithAllocation"
                )

            fun asNewSubscriptionTierWithProration(): NewSubscriptionTierWithProrationPrice =
                newSubscriptionTierWithProration.getOrThrow("newSubscriptionTierWithProration")

            fun asNewSubscriptionUnitWithProration(): NewSubscriptionUnitWithProrationPrice =
                newSubscriptionUnitWithProration.getOrThrow("newSubscriptionUnitWithProration")

            fun asNewSubscriptionGroupedAllocation(): NewSubscriptionGroupedAllocationPrice =
                newSubscriptionGroupedAllocation.getOrThrow("newSubscriptionGroupedAllocation")

            fun asNewSubscriptionGroupedWithProratedMinimum():
                NewSubscriptionGroupedWithProratedMinimumPrice =
                newSubscriptionGroupedWithProratedMinimum.getOrThrow(
                    "newSubscriptionGroupedWithProratedMinimum"
                )

            fun asNewSubscriptionBulkWithProration(): NewSubscriptionBulkWithProrationPrice =
                newSubscriptionBulkWithProration.getOrThrow("newSubscriptionBulkWithProration")

            fun _json(): Optional<JsonValue> = Optional.ofNullable(_json)

            fun <T> accept(visitor: Visitor<T>): T {
                return when {
                    newSubscriptionUnit != null ->
                        visitor.visitNewSubscriptionUnit(newSubscriptionUnit)
                    newSubscriptionPackage != null ->
                        visitor.visitNewSubscriptionPackage(newSubscriptionPackage)
                    newSubscriptionMatrix != null ->
                        visitor.visitNewSubscriptionMatrix(newSubscriptionMatrix)
                    newSubscriptionTiered != null ->
                        visitor.visitNewSubscriptionTiered(newSubscriptionTiered)
                    newSubscriptionTieredBps != null ->
                        visitor.visitNewSubscriptionTieredBps(newSubscriptionTieredBps)
                    newSubscriptionBps != null ->
                        visitor.visitNewSubscriptionBps(newSubscriptionBps)
                    newSubscriptionBulkBps != null ->
                        visitor.visitNewSubscriptionBulkBps(newSubscriptionBulkBps)
                    newSubscriptionBulk != null ->
                        visitor.visitNewSubscriptionBulk(newSubscriptionBulk)
                    newSubscriptionThresholdTotalAmount != null ->
                        visitor.visitNewSubscriptionThresholdTotalAmount(
                            newSubscriptionThresholdTotalAmount
                        )
                    newSubscriptionTieredPackage != null ->
                        visitor.visitNewSubscriptionTieredPackage(newSubscriptionTieredPackage)
                    newSubscriptionTieredWithMinimum != null ->
                        visitor.visitNewSubscriptionTieredWithMinimum(
                            newSubscriptionTieredWithMinimum
                        )
                    newSubscriptionUnitWithPercent != null ->
                        visitor.visitNewSubscriptionUnitWithPercent(newSubscriptionUnitWithPercent)
                    newSubscriptionPackageWithAllocation != null ->
                        visitor.visitNewSubscriptionPackageWithAllocation(
                            newSubscriptionPackageWithAllocation
                        )
                    newSubscriptionTierWithProration != null ->
                        visitor.visitNewSubscriptionTierWithProration(
                            newSubscriptionTierWithProration
                        )
                    newSubscriptionUnitWithProration != null ->
                        visitor.visitNewSubscriptionUnitWithProration(
                            newSubscriptionUnitWithProration
                        )
                    newSubscriptionGroupedAllocation != null ->
                        visitor.visitNewSubscriptionGroupedAllocation(
                            newSubscriptionGroupedAllocation
                        )
                    newSubscriptionGroupedWithProratedMinimum != null ->
                        visitor.visitNewSubscriptionGroupedWithProratedMinimum(
                            newSubscriptionGroupedWithProratedMinimum
                        )
                    newSubscriptionBulkWithProration != null ->
                        visitor.visitNewSubscriptionBulkWithProration(
                            newSubscriptionBulkWithProration
                        )
                    else -> visitor.unknown(_json)
                }
            }

            private var validated: Boolean = false

            fun validate(): Price = apply {
                if (validated) {
                    return@apply
                }

                accept(
                    object : Visitor<Unit> {
                        override fun visitNewSubscriptionUnit(
                            newSubscriptionUnit: NewSubscriptionUnitPrice
                        ) {
                            newSubscriptionUnit.validate()
                        }

                        override fun visitNewSubscriptionPackage(
                            newSubscriptionPackage: NewSubscriptionPackagePrice
                        ) {
                            newSubscriptionPackage.validate()
                        }

                        override fun visitNewSubscriptionMatrix(
                            newSubscriptionMatrix: NewSubscriptionMatrixPrice
                        ) {
                            newSubscriptionMatrix.validate()
                        }

                        override fun visitNewSubscriptionTiered(
                            newSubscriptionTiered: NewSubscriptionTieredPrice
                        ) {
                            newSubscriptionTiered.validate()
                        }

                        override fun visitNewSubscriptionTieredBps(
                            newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice
                        ) {
                            newSubscriptionTieredBps.validate()
                        }

                        override fun visitNewSubscriptionBps(
                            newSubscriptionBps: NewSubscriptionBpsPrice
                        ) {
                            newSubscriptionBps.validate()
                        }

                        override fun visitNewSubscriptionBulkBps(
                            newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice
                        ) {
                            newSubscriptionBulkBps.validate()
                        }

                        override fun visitNewSubscriptionBulk(
                            newSubscriptionBulk: NewSubscriptionBulkPrice
                        ) {
                            newSubscriptionBulk.validate()
                        }

                        override fun visitNewSubscriptionThresholdTotalAmount(
                            newSubscriptionThresholdTotalAmount:
                                NewSubscriptionThresholdTotalAmountPrice
                        ) {
                            newSubscriptionThresholdTotalAmount.validate()
                        }

                        override fun visitNewSubscriptionTieredPackage(
                            newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice
                        ) {
                            newSubscriptionTieredPackage.validate()
                        }

                        override fun visitNewSubscriptionTieredWithMinimum(
                            newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice
                        ) {
                            newSubscriptionTieredWithMinimum.validate()
                        }

                        override fun visitNewSubscriptionUnitWithPercent(
                            newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice
                        ) {
                            newSubscriptionUnitWithPercent.validate()
                        }

                        override fun visitNewSubscriptionPackageWithAllocation(
                            newSubscriptionPackageWithAllocation:
                                NewSubscriptionPackageWithAllocationPrice
                        ) {
                            newSubscriptionPackageWithAllocation.validate()
                        }

                        override fun visitNewSubscriptionTierWithProration(
                            newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice
                        ) {
                            newSubscriptionTierWithProration.validate()
                        }

                        override fun visitNewSubscriptionUnitWithProration(
                            newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice
                        ) {
                            newSubscriptionUnitWithProration.validate()
                        }

                        override fun visitNewSubscriptionGroupedAllocation(
                            newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice
                        ) {
                            newSubscriptionGroupedAllocation.validate()
                        }

                        override fun visitNewSubscriptionGroupedWithProratedMinimum(
                            newSubscriptionGroupedWithProratedMinimum:
                                NewSubscriptionGroupedWithProratedMinimumPrice
                        ) {
                            newSubscriptionGroupedWithProratedMinimum.validate()
                        }

                        override fun visitNewSubscriptionBulkWithProration(
                            newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice
                        ) {
                            newSubscriptionBulkWithProration.validate()
                        }
                    }
                )
                validated = true
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is Price && newSubscriptionUnit == other.newSubscriptionUnit && newSubscriptionPackage == other.newSubscriptionPackage && newSubscriptionMatrix == other.newSubscriptionMatrix && newSubscriptionTiered == other.newSubscriptionTiered && newSubscriptionTieredBps == other.newSubscriptionTieredBps && newSubscriptionBps == other.newSubscriptionBps && newSubscriptionBulkBps == other.newSubscriptionBulkBps && newSubscriptionBulk == other.newSubscriptionBulk && newSubscriptionThresholdTotalAmount == other.newSubscriptionThresholdTotalAmount && newSubscriptionTieredPackage == other.newSubscriptionTieredPackage && newSubscriptionTieredWithMinimum == other.newSubscriptionTieredWithMinimum && newSubscriptionUnitWithPercent == other.newSubscriptionUnitWithPercent && newSubscriptionPackageWithAllocation == other.newSubscriptionPackageWithAllocation && newSubscriptionTierWithProration == other.newSubscriptionTierWithProration && newSubscriptionUnitWithProration == other.newSubscriptionUnitWithProration && newSubscriptionGroupedAllocation == other.newSubscriptionGroupedAllocation && newSubscriptionGroupedWithProratedMinimum == other.newSubscriptionGroupedWithProratedMinimum && newSubscriptionBulkWithProration == other.newSubscriptionBulkWithProration /* spotless:on */
            }

            override fun hashCode(): Int = /* spotless:off */ Objects.hash(newSubscriptionUnit, newSubscriptionPackage, newSubscriptionMatrix, newSubscriptionTiered, newSubscriptionTieredBps, newSubscriptionBps, newSubscriptionBulkBps, newSubscriptionBulk, newSubscriptionThresholdTotalAmount, newSubscriptionTieredPackage, newSubscriptionTieredWithMinimum, newSubscriptionUnitWithPercent, newSubscriptionPackageWithAllocation, newSubscriptionTierWithProration, newSubscriptionUnitWithProration, newSubscriptionGroupedAllocation, newSubscriptionGroupedWithProratedMinimum, newSubscriptionBulkWithProration) /* spotless:on */

            override fun toString(): String =
                when {
                    newSubscriptionUnit != null -> "Price{newSubscriptionUnit=$newSubscriptionUnit}"
                    newSubscriptionPackage != null ->
                        "Price{newSubscriptionPackage=$newSubscriptionPackage}"
                    newSubscriptionMatrix != null ->
                        "Price{newSubscriptionMatrix=$newSubscriptionMatrix}"
                    newSubscriptionTiered != null ->
                        "Price{newSubscriptionTiered=$newSubscriptionTiered}"
                    newSubscriptionTieredBps != null ->
                        "Price{newSubscriptionTieredBps=$newSubscriptionTieredBps}"
                    newSubscriptionBps != null -> "Price{newSubscriptionBps=$newSubscriptionBps}"
                    newSubscriptionBulkBps != null ->
                        "Price{newSubscriptionBulkBps=$newSubscriptionBulkBps}"
                    newSubscriptionBulk != null -> "Price{newSubscriptionBulk=$newSubscriptionBulk}"
                    newSubscriptionThresholdTotalAmount != null ->
                        "Price{newSubscriptionThresholdTotalAmount=$newSubscriptionThresholdTotalAmount}"
                    newSubscriptionTieredPackage != null ->
                        "Price{newSubscriptionTieredPackage=$newSubscriptionTieredPackage}"
                    newSubscriptionTieredWithMinimum != null ->
                        "Price{newSubscriptionTieredWithMinimum=$newSubscriptionTieredWithMinimum}"
                    newSubscriptionUnitWithPercent != null ->
                        "Price{newSubscriptionUnitWithPercent=$newSubscriptionUnitWithPercent}"
                    newSubscriptionPackageWithAllocation != null ->
                        "Price{newSubscriptionPackageWithAllocation=$newSubscriptionPackageWithAllocation}"
                    newSubscriptionTierWithProration != null ->
                        "Price{newSubscriptionTierWithProration=$newSubscriptionTierWithProration}"
                    newSubscriptionUnitWithProration != null ->
                        "Price{newSubscriptionUnitWithProration=$newSubscriptionUnitWithProration}"
                    newSubscriptionGroupedAllocation != null ->
                        "Price{newSubscriptionGroupedAllocation=$newSubscriptionGroupedAllocation}"
                    newSubscriptionGroupedWithProratedMinimum != null ->
                        "Price{newSubscriptionGroupedWithProratedMinimum=$newSubscriptionGroupedWithProratedMinimum}"
                    newSubscriptionBulkWithProration != null ->
                        "Price{newSubscriptionBulkWithProration=$newSubscriptionBulkWithProration}"
                    _json != null -> "Price{_unknown=$_json}"
                    else -> throw IllegalStateException("Invalid Price")
                }

            companion object {

                @JvmStatic
                fun ofNewSubscriptionUnit(newSubscriptionUnit: NewSubscriptionUnitPrice) =
                    Price(newSubscriptionUnit = newSubscriptionUnit)

                @JvmStatic
                fun ofNewSubscriptionPackage(newSubscriptionPackage: NewSubscriptionPackagePrice) =
                    Price(newSubscriptionPackage = newSubscriptionPackage)

                @JvmStatic
                fun ofNewSubscriptionMatrix(newSubscriptionMatrix: NewSubscriptionMatrixPrice) =
                    Price(newSubscriptionMatrix = newSubscriptionMatrix)

                @JvmStatic
                fun ofNewSubscriptionTiered(newSubscriptionTiered: NewSubscriptionTieredPrice) =
                    Price(newSubscriptionTiered = newSubscriptionTiered)

                @JvmStatic
                fun ofNewSubscriptionTieredBps(
                    newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice
                ) = Price(newSubscriptionTieredBps = newSubscriptionTieredBps)

                @JvmStatic
                fun ofNewSubscriptionBps(newSubscriptionBps: NewSubscriptionBpsPrice) =
                    Price(newSubscriptionBps = newSubscriptionBps)

                @JvmStatic
                fun ofNewSubscriptionBulkBps(newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice) =
                    Price(newSubscriptionBulkBps = newSubscriptionBulkBps)

                @JvmStatic
                fun ofNewSubscriptionBulk(newSubscriptionBulk: NewSubscriptionBulkPrice) =
                    Price(newSubscriptionBulk = newSubscriptionBulk)

                @JvmStatic
                fun ofNewSubscriptionThresholdTotalAmount(
                    newSubscriptionThresholdTotalAmount: NewSubscriptionThresholdTotalAmountPrice
                ) = Price(newSubscriptionThresholdTotalAmount = newSubscriptionThresholdTotalAmount)

                @JvmStatic
                fun ofNewSubscriptionTieredPackage(
                    newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice
                ) = Price(newSubscriptionTieredPackage = newSubscriptionTieredPackage)

                @JvmStatic
                fun ofNewSubscriptionTieredWithMinimum(
                    newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice
                ) = Price(newSubscriptionTieredWithMinimum = newSubscriptionTieredWithMinimum)

                @JvmStatic
                fun ofNewSubscriptionUnitWithPercent(
                    newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice
                ) = Price(newSubscriptionUnitWithPercent = newSubscriptionUnitWithPercent)

                @JvmStatic
                fun ofNewSubscriptionPackageWithAllocation(
                    newSubscriptionPackageWithAllocation: NewSubscriptionPackageWithAllocationPrice
                ) =
                    Price(
                        newSubscriptionPackageWithAllocation = newSubscriptionPackageWithAllocation
                    )

                @JvmStatic
                fun ofNewSubscriptionTierWithProration(
                    newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice
                ) = Price(newSubscriptionTierWithProration = newSubscriptionTierWithProration)

                @JvmStatic
                fun ofNewSubscriptionUnitWithProration(
                    newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice
                ) = Price(newSubscriptionUnitWithProration = newSubscriptionUnitWithProration)

                @JvmStatic
                fun ofNewSubscriptionGroupedAllocation(
                    newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice
                ) = Price(newSubscriptionGroupedAllocation = newSubscriptionGroupedAllocation)

                @JvmStatic
                fun ofNewSubscriptionGroupedWithProratedMinimum(
                    newSubscriptionGroupedWithProratedMinimum:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ) =
                    Price(
                        newSubscriptionGroupedWithProratedMinimum =
                            newSubscriptionGroupedWithProratedMinimum
                    )

                @JvmStatic
                fun ofNewSubscriptionBulkWithProration(
                    newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice
                ) = Price(newSubscriptionBulkWithProration = newSubscriptionBulkWithProration)
            }

            /**
             * An interface that defines how to map each variant of [Price] to a value of type [T].
             */
            interface Visitor<out T> {

                fun visitNewSubscriptionUnit(newSubscriptionUnit: NewSubscriptionUnitPrice): T

                fun visitNewSubscriptionPackage(
                    newSubscriptionPackage: NewSubscriptionPackagePrice
                ): T

                fun visitNewSubscriptionMatrix(newSubscriptionMatrix: NewSubscriptionMatrixPrice): T

                fun visitNewSubscriptionTiered(newSubscriptionTiered: NewSubscriptionTieredPrice): T

                fun visitNewSubscriptionTieredBps(
                    newSubscriptionTieredBps: NewSubscriptionTieredBpsPrice
                ): T

                fun visitNewSubscriptionBps(newSubscriptionBps: NewSubscriptionBpsPrice): T

                fun visitNewSubscriptionBulkBps(
                    newSubscriptionBulkBps: NewSubscriptionBulkBpsPrice
                ): T

                fun visitNewSubscriptionBulk(newSubscriptionBulk: NewSubscriptionBulkPrice): T

                fun visitNewSubscriptionThresholdTotalAmount(
                    newSubscriptionThresholdTotalAmount: NewSubscriptionThresholdTotalAmountPrice
                ): T

                fun visitNewSubscriptionTieredPackage(
                    newSubscriptionTieredPackage: NewSubscriptionTieredPackagePrice
                ): T

                fun visitNewSubscriptionTieredWithMinimum(
                    newSubscriptionTieredWithMinimum: NewSubscriptionTieredWithMinimumPrice
                ): T

                fun visitNewSubscriptionUnitWithPercent(
                    newSubscriptionUnitWithPercent: NewSubscriptionUnitWithPercentPrice
                ): T

                fun visitNewSubscriptionPackageWithAllocation(
                    newSubscriptionPackageWithAllocation: NewSubscriptionPackageWithAllocationPrice
                ): T

                fun visitNewSubscriptionTierWithProration(
                    newSubscriptionTierWithProration: NewSubscriptionTierWithProrationPrice
                ): T

                fun visitNewSubscriptionUnitWithProration(
                    newSubscriptionUnitWithProration: NewSubscriptionUnitWithProrationPrice
                ): T

                fun visitNewSubscriptionGroupedAllocation(
                    newSubscriptionGroupedAllocation: NewSubscriptionGroupedAllocationPrice
                ): T

                fun visitNewSubscriptionGroupedWithProratedMinimum(
                    newSubscriptionGroupedWithProratedMinimum:
                        NewSubscriptionGroupedWithProratedMinimumPrice
                ): T

                fun visitNewSubscriptionBulkWithProration(
                    newSubscriptionBulkWithProration: NewSubscriptionBulkWithProrationPrice
                ): T

                /**
                 * Maps an unknown variant of [Price] to a value of type [T].
                 *
                 * An instance of [Price] can contain an unknown variant if it was deserialized from
                 * data that doesn't match any known variant. For example, if the SDK is on an older
                 * version than the API, then the API may respond with new variants that the SDK is
                 * unaware of.
                 *
                 * @throws OrbInvalidDataException in the default implementation.
                 */
                fun unknown(json: JsonValue?): T {
                    throw OrbInvalidDataException("Unknown Price: $json")
                }
            }

            internal class Deserializer : BaseDeserializer<Price>(Price::class) {

                override fun ObjectCodec.deserialize(node: JsonNode): Price {
                    val json = JsonValue.fromJsonNode(node)
                    val modelType =
                        json.asObject().getOrNull()?.get("model_type")?.asString()?.getOrNull()

                    when (modelType) {
                        "unit" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionUnitPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionUnit = it, _json = json)
                                }
                        }
                        "package" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionPackagePrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionPackage = it, _json = json)
                                }
                        }
                        "matrix" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionMatrixPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionMatrix = it, _json = json)
                                }
                        }
                        "tiered" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTiered = it, _json = json)
                                }
                        }
                        "tiered_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionTieredBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredBps = it, _json = json)
                                }
                        }
                        "bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBps = it, _json = json)
                                }
                        }
                        "bulk_bps" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkBpsPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulkBps = it, _json = json)
                                }
                        }
                        "bulk" -> {
                            tryDeserialize(node, jacksonTypeRef<NewSubscriptionBulkPrice>()) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionBulk = it, _json = json)
                                }
                        }
                        "threshold_total_amount" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionThresholdTotalAmountPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionThresholdTotalAmount = it,
                                        _json = json,
                                    )
                                }
                        }
                        "tiered_package" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredPackagePrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionTieredPackage = it, _json = json)
                                }
                        }
                        "tiered_with_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTieredWithMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTieredWithMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "unit_with_percent" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithPercentPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(newSubscriptionUnitWithPercent = it, _json = json)
                                }
                        }
                        "package_with_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionPackageWithAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionPackageWithAllocation = it,
                                        _json = json,
                                    )
                                }
                        }
                        "tiered_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionTierWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionTierWithProration = it,
                                        _json = json,
                                    )
                                }
                        }
                        "unit_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionUnitWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionUnitWithProration = it,
                                        _json = json,
                                    )
                                }
                        }
                        "grouped_allocation" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedAllocationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedAllocation = it,
                                        _json = json,
                                    )
                                }
                        }
                        "grouped_with_prorated_minimum" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionGroupedWithProratedMinimumPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionGroupedWithProratedMinimum = it,
                                        _json = json,
                                    )
                                }
                        }
                        "bulk_with_proration" -> {
                            tryDeserialize(
                                    node,
                                    jacksonTypeRef<NewSubscriptionBulkWithProrationPrice>(),
                                ) {
                                    it.validate()
                                }
                                ?.let {
                                    return Price(
                                        newSubscriptionBulkWithProration = it,
                                        _json = json,
                                    )
                                }
                        }
                    }

                    return Price(_json = json)
                }
            }

            internal class Serializer : BaseSerializer<Price>(Price::class) {

                override fun serialize(
                    value: Price,
                    generator: JsonGenerator,
                    provider: SerializerProvider,
                ) {
                    when {
                        value.newSubscriptionUnit != null ->
                            generator.writeObject(value.newSubscriptionUnit)
                        value.newSubscriptionPackage != null ->
                            generator.writeObject(value.newSubscriptionPackage)
                        value.newSubscriptionMatrix != null ->
                            generator.writeObject(value.newSubscriptionMatrix)
                        value.newSubscriptionTiered != null ->
                            generator.writeObject(value.newSubscriptionTiered)
                        value.newSubscriptionTieredBps != null ->
                            generator.writeObject(value.newSubscriptionTieredBps)
                        value.newSubscriptionBps != null ->
                            generator.writeObject(value.newSubscriptionBps)
                        value.newSubscriptionBulkBps != null ->
                            generator.writeObject(value.newSubscriptionBulkBps)
                        value.newSubscriptionBulk != null ->
                            generator.writeObject(value.newSubscriptionBulk)
                        value.newSubscriptionThresholdTotalAmount != null ->
                            generator.writeObject(value.newSubscriptionThresholdTotalAmount)
                        value.newSubscriptionTieredPackage != null ->
                            generator.writeObject(value.newSubscriptionTieredPackage)
                        value.newSubscriptionTieredWithMinimum != null ->
                            generator.writeObject(value.newSubscriptionTieredWithMinimum)
                        value.newSubscriptionUnitWithPercent != null ->
                            generator.writeObject(value.newSubscriptionUnitWithPercent)
                        value.newSubscriptionPackageWithAllocation != null ->
                            generator.writeObject(value.newSubscriptionPackageWithAllocation)
                        value.newSubscriptionTierWithProration != null ->
                            generator.writeObject(value.newSubscriptionTierWithProration)
                        value.newSubscriptionUnitWithProration != null ->
                            generator.writeObject(value.newSubscriptionUnitWithProration)
                        value.newSubscriptionGroupedAllocation != null ->
                            generator.writeObject(value.newSubscriptionGroupedAllocation)
                        value.newSubscriptionGroupedWithProratedMinimum != null ->
                            generator.writeObject(value.newSubscriptionGroupedWithProratedMinimum)
                        value.newSubscriptionBulkWithProration != null ->
                            generator.writeObject(value.newSubscriptionBulkWithProration)
                        value._json != null -> generator.writeObject(value._json)
                        else -> throw IllegalStateException("Invalid Price")
                    }
                }
            }

            @NoAutoDetect
            class NewSubscriptionUnitPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_config")
                @ExcludeMissing
                private val unitConfig: JsonField<UnitConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitConfig(): UnitConfig = unitConfig.getRequired("unit_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_config")
                @ExcludeMissing
                fun _unitConfig(): JsonField<UnitConfig> = unitConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionUnitPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionUnitPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitConfig: JsonField<UnitConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionUnitPrice: NewSubscriptionUnitPrice) = apply {
                        cadence = newSubscriptionUnitPrice.cadence
                        itemId = newSubscriptionUnitPrice.itemId
                        modelType = newSubscriptionUnitPrice.modelType
                        name = newSubscriptionUnitPrice.name
                        unitConfig = newSubscriptionUnitPrice.unitConfig
                        billableMetricId = newSubscriptionUnitPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitPrice.conversionRate
                        currency = newSubscriptionUnitPrice.currency
                        externalPriceId = newSubscriptionUnitPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitPrice.metadata
                        referenceId = newSubscriptionUnitPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitConfig(unitConfig: UnitConfig) = unitConfig(JsonField.of(unitConfig))

                    fun unitConfig(unitConfig: JsonField<UnitConfig>) = apply {
                        this.unitConfig = unitConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitPrice =
                        NewSubscriptionUnitPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitConfig", unitConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT = of("unit")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT -> Value.UNIT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT -> Known.UNIT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    private val unitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Rate per unit of usage */
                    fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                    /** Rate per unit of usage */
                    @JsonProperty("unit_amount")
                    @ExcludeMissing
                    fun _unitAmount(): JsonField<String> = unitAmount

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        unitAmount()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitConfig]. */
                    class Builder internal constructor() {

                        private var unitAmount: JsonField<String>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitConfig: UnitConfig) = apply {
                            unitAmount = unitConfig.unitAmount
                            additionalProperties = unitConfig.additionalProperties.toMutableMap()
                        }

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: String) = unitAmount(JsonField.of(unitAmount))

                        /** Rate per unit of usage */
                        fun unitAmount(unitAmount: JsonField<String>) = apply {
                            this.unitAmount = unitAmount
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitConfig =
                            UnitConfig(
                                checkRequired("unitAmount", unitAmount),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitConfig && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(unitAmount, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitConfig{unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitConfig == other.unitConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitConfig=$unitConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_config")
                @ExcludeMissing
                private val packageConfig: JsonField<PackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun packageConfig(): PackageConfig = packageConfig.getRequired("package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("package_config")
                @ExcludeMissing
                fun _packageConfig(): JsonField<PackageConfig> = packageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    packageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageConfig: JsonField<PackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionPackagePrice: NewSubscriptionPackagePrice) =
                        apply {
                            cadence = newSubscriptionPackagePrice.cadence
                            itemId = newSubscriptionPackagePrice.itemId
                            modelType = newSubscriptionPackagePrice.modelType
                            name = newSubscriptionPackagePrice.name
                            packageConfig = newSubscriptionPackagePrice.packageConfig
                            billableMetricId = newSubscriptionPackagePrice.billableMetricId
                            billedInAdvance = newSubscriptionPackagePrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionPackagePrice.billingCycleConfiguration
                            conversionRate = newSubscriptionPackagePrice.conversionRate
                            currency = newSubscriptionPackagePrice.currency
                            externalPriceId = newSubscriptionPackagePrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionPackagePrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionPackagePrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionPackagePrice.invoicingCycleConfiguration
                            metadata = newSubscriptionPackagePrice.metadata
                            referenceId = newSubscriptionPackagePrice.referenceId
                            additionalProperties =
                                newSubscriptionPackagePrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageConfig(packageConfig: PackageConfig) =
                        packageConfig(JsonField.of(packageConfig))

                    fun packageConfig(packageConfig: JsonField<PackageConfig>) = apply {
                        this.packageConfig = packageConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackagePrice =
                        NewSubscriptionPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("packageConfig", packageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE = of("package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PACKAGE -> Value.PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PACKAGE -> Known.PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    private val packageAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    private val packageSize: JsonField<Long> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** A currency amount to rate usage by */
                    fun packageAmount(): String = packageAmount.getRequired("package_amount")

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    fun packageSize(): Long = packageSize.getRequired("package_size")

                    /** A currency amount to rate usage by */
                    @JsonProperty("package_amount")
                    @ExcludeMissing
                    fun _packageAmount(): JsonField<String> = packageAmount

                    /**
                     * An integer amount to represent package size. For example, 1000 here would
                     * divide usage by 1000 before multiplying by package_amount in rating
                     */
                    @JsonProperty("package_size")
                    @ExcludeMissing
                    fun _packageSize(): JsonField<Long> = packageSize

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        packageAmount()
                        packageSize()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [PackageConfig]. */
                    class Builder internal constructor() {

                        private var packageAmount: JsonField<String>? = null
                        private var packageSize: JsonField<Long>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(packageConfig: PackageConfig) = apply {
                            packageAmount = packageConfig.packageAmount
                            packageSize = packageConfig.packageSize
                            additionalProperties = packageConfig.additionalProperties.toMutableMap()
                        }

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: String) =
                            packageAmount(JsonField.of(packageAmount))

                        /** A currency amount to rate usage by */
                        fun packageAmount(packageAmount: JsonField<String>) = apply {
                            this.packageAmount = packageAmount
                        }

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: Long) = packageSize(JsonField.of(packageSize))

                        /**
                         * An integer amount to represent package size. For example, 1000 here would
                         * divide usage by 1000 before multiplying by package_amount in rating
                         */
                        fun packageSize(packageSize: JsonField<Long>) = apply {
                            this.packageSize = packageSize
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageConfig =
                            PackageConfig(
                                checkRequired("packageAmount", packageAmount),
                                checkRequired("packageSize", packageSize),
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageConfig && packageAmount == other.packageAmount && packageSize == other.packageSize && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(packageAmount, packageSize, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageConfig{packageAmount=$packageAmount, packageSize=$packageSize, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageConfig == other.packageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageConfig=$packageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionMatrixPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("matrix_config")
                @ExcludeMissing
                private val matrixConfig: JsonField<MatrixConfig> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun matrixConfig(): MatrixConfig = matrixConfig.getRequired("matrix_config")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("matrix_config")
                @ExcludeMissing
                fun _matrixConfig(): JsonField<MatrixConfig> = matrixConfig

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionMatrixPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    matrixConfig().validate()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionMatrixPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var matrixConfig: JsonField<MatrixConfig>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionMatrixPrice: NewSubscriptionMatrixPrice) =
                        apply {
                            cadence = newSubscriptionMatrixPrice.cadence
                            itemId = newSubscriptionMatrixPrice.itemId
                            matrixConfig = newSubscriptionMatrixPrice.matrixConfig
                            modelType = newSubscriptionMatrixPrice.modelType
                            name = newSubscriptionMatrixPrice.name
                            billableMetricId = newSubscriptionMatrixPrice.billableMetricId
                            billedInAdvance = newSubscriptionMatrixPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionMatrixPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionMatrixPrice.conversionRate
                            currency = newSubscriptionMatrixPrice.currency
                            externalPriceId = newSubscriptionMatrixPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionMatrixPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionMatrixPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionMatrixPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionMatrixPrice.metadata
                            referenceId = newSubscriptionMatrixPrice.referenceId
                            additionalProperties =
                                newSubscriptionMatrixPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun matrixConfig(matrixConfig: MatrixConfig) =
                        matrixConfig(JsonField.of(matrixConfig))

                    fun matrixConfig(matrixConfig: JsonField<MatrixConfig>) = apply {
                        this.matrixConfig = matrixConfig
                    }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionMatrixPrice =
                        NewSubscriptionMatrixPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("matrixConfig", matrixConfig),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class MatrixConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    private val defaultUnitAmount: JsonField<String> = JsonMissing.of(),
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    private val dimensions: JsonField<List<String?>> = JsonMissing.of(),
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    private val matrixValues: JsonField<List<MatrixValue>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    fun defaultUnitAmount(): String =
                        defaultUnitAmount.getRequired("default_unit_amount")

                    /** One or two event property values to evaluate matrix groups by */
                    fun dimensions(): List<String?> = dimensions.getRequired("dimensions")

                    /** Matrix values for specified matrix grouping keys */
                    fun matrixValues(): List<MatrixValue> =
                        matrixValues.getRequired("matrix_values")

                    /**
                     * Default per unit rate for any usage not bucketed into a specified
                     * matrix_value
                     */
                    @JsonProperty("default_unit_amount")
                    @ExcludeMissing
                    fun _defaultUnitAmount(): JsonField<String> = defaultUnitAmount

                    /** One or two event property values to evaluate matrix groups by */
                    @JsonProperty("dimensions")
                    @ExcludeMissing
                    fun _dimensions(): JsonField<List<String?>> = dimensions

                    /** Matrix values for specified matrix grouping keys */
                    @JsonProperty("matrix_values")
                    @ExcludeMissing
                    fun _matrixValues(): JsonField<List<MatrixValue>> = matrixValues

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): MatrixConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        defaultUnitAmount()
                        dimensions()
                        matrixValues().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [MatrixConfig]. */
                    class Builder internal constructor() {

                        private var defaultUnitAmount: JsonField<String>? = null
                        private var dimensions: JsonField<MutableList<String?>>? = null
                        private var matrixValues: JsonField<MutableList<MatrixValue>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(matrixConfig: MatrixConfig) = apply {
                            defaultUnitAmount = matrixConfig.defaultUnitAmount
                            dimensions = matrixConfig.dimensions.map { it.toMutableList() }
                            matrixValues = matrixConfig.matrixValues.map { it.toMutableList() }
                            additionalProperties = matrixConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: String) =
                            defaultUnitAmount(JsonField.of(defaultUnitAmount))

                        /**
                         * Default per unit rate for any usage not bucketed into a specified
                         * matrix_value
                         */
                        fun defaultUnitAmount(defaultUnitAmount: JsonField<String>) = apply {
                            this.defaultUnitAmount = defaultUnitAmount
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: List<String?>) =
                            dimensions(JsonField.of(dimensions))

                        /** One or two event property values to evaluate matrix groups by */
                        fun dimensions(dimensions: JsonField<List<String?>>) = apply {
                            this.dimensions = dimensions.map { it.toMutableList() }
                        }

                        /** One or two event property values to evaluate matrix groups by */
                        fun addDimension(dimension: String) = apply {
                            dimensions =
                                (dimensions ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(dimension)
                                }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: List<MatrixValue>) =
                            matrixValues(JsonField.of(matrixValues))

                        /** Matrix values for specified matrix grouping keys */
                        fun matrixValues(matrixValues: JsonField<List<MatrixValue>>) = apply {
                            this.matrixValues = matrixValues.map { it.toMutableList() }
                        }

                        /** Matrix values for specified matrix grouping keys */
                        fun addMatrixValue(matrixValue: MatrixValue) = apply {
                            matrixValues =
                                (matrixValues ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(matrixValue)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): MatrixConfig =
                            MatrixConfig(
                                checkRequired("defaultUnitAmount", defaultUnitAmount),
                                checkRequired("dimensions", dimensions).map { it.toImmutable() },
                                checkRequired("matrixValues", matrixValues).map {
                                    it.toImmutable()
                                },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class MatrixValue
                    @JsonCreator
                    private constructor(
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        private val dimensionValues: JsonField<List<String?>> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        fun dimensionValues(): List<String?> =
                            dimensionValues.getRequired("dimension_values")

                        /** Unit price for the specified dimension_values */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * One or two matrix keys to filter usage to this Matrix value by. For
                         * example, ["region", "tier"] could be used to filter cloud usage by a
                         * cloud region and an instance tier.
                         */
                        @JsonProperty("dimension_values")
                        @ExcludeMissing
                        fun _dimensionValues(): JsonField<List<String?>> = dimensionValues

                        /** Unit price for the specified dimension_values */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): MatrixValue = apply {
                            if (validated) {
                                return@apply
                            }

                            dimensionValues()
                            unitAmount()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [MatrixValue]. */
                        class Builder internal constructor() {

                            private var dimensionValues: JsonField<MutableList<String?>>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(matrixValue: MatrixValue) = apply {
                                dimensionValues =
                                    matrixValue.dimensionValues.map { it.toMutableList() }
                                unitAmount = matrixValue.unitAmount
                                additionalProperties =
                                    matrixValue.additionalProperties.toMutableMap()
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: List<String?>) =
                                dimensionValues(JsonField.of(dimensionValues))

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun dimensionValues(dimensionValues: JsonField<List<String?>>) = apply {
                                this.dimensionValues = dimensionValues.map { it.toMutableList() }
                            }

                            /**
                             * One or two matrix keys to filter usage to this Matrix value by. For
                             * example, ["region", "tier"] could be used to filter cloud usage by a
                             * cloud region and an instance tier.
                             */
                            fun addDimensionValue(dimensionValue: String) = apply {
                                dimensionValues =
                                    (dimensionValues ?: JsonField.of(mutableListOf())).apply {
                                        asKnown()
                                            .orElseThrow {
                                                IllegalStateException(
                                                    "Field was set to non-list type: ${javaClass.simpleName}"
                                                )
                                            }
                                            .add(dimensionValue)
                                    }
                            }

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Unit price for the specified dimension_values */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): MatrixValue =
                                MatrixValue(
                                    checkRequired("dimensionValues", dimensionValues).map {
                                        it.toImmutable()
                                    },
                                    checkRequired("unitAmount", unitAmount),
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is MatrixValue && dimensionValues == other.dimensionValues && unitAmount == other.unitAmount && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(dimensionValues, unitAmount, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "MatrixValue{dimensionValues=$dimensionValues, unitAmount=$unitAmount, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is MatrixConfig && defaultUnitAmount == other.defaultUnitAmount && dimensions == other.dimensions && matrixValues == other.matrixValues && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(defaultUnitAmount, dimensions, matrixValues, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "MatrixConfig{defaultUnitAmount=$defaultUnitAmount, dimensions=$dimensions, matrixValues=$matrixValues, additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val MATRIX = of("matrix")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        MATRIX
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        MATRIX,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            MATRIX -> Value.MATRIX
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            MATRIX -> Known.MATRIX
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionMatrixPrice && cadence == other.cadence && itemId == other.itemId && matrixConfig == other.matrixConfig && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, matrixConfig, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionMatrixPrice{cadence=$cadence, itemId=$itemId, matrixConfig=$matrixConfig, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_config")
                @ExcludeMissing
                private val tieredConfig: JsonField<TieredConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredConfig(): TieredConfig = tieredConfig.getRequired("tiered_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_config")
                @ExcludeMissing
                fun _tieredConfig(): JsonField<TieredConfig> = tieredConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredConfig: JsonField<TieredConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionTieredPrice: NewSubscriptionTieredPrice) =
                        apply {
                            cadence = newSubscriptionTieredPrice.cadence
                            itemId = newSubscriptionTieredPrice.itemId
                            modelType = newSubscriptionTieredPrice.modelType
                            name = newSubscriptionTieredPrice.name
                            tieredConfig = newSubscriptionTieredPrice.tieredConfig
                            billableMetricId = newSubscriptionTieredPrice.billableMetricId
                            billedInAdvance = newSubscriptionTieredPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionTieredPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionTieredPrice.conversionRate
                            currency = newSubscriptionTieredPrice.currency
                            externalPriceId = newSubscriptionTieredPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionTieredPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionTieredPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionTieredPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionTieredPrice.metadata
                            referenceId = newSubscriptionTieredPrice.referenceId
                            additionalProperties =
                                newSubscriptionTieredPrice.additionalProperties.toMutableMap()
                        }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredConfig(tieredConfig: TieredConfig) =
                        tieredConfig(JsonField.of(tieredConfig))

                    fun tieredConfig(tieredConfig: JsonField<TieredConfig>) = apply {
                        this.tieredConfig = tieredConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPrice =
                        NewSubscriptionTieredPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredConfig", tieredConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED = of("tiered")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED -> Value.TIERED
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED -> Known.TIERED
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Tiers for rating based on total usage quantities into the specified tier */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredConfig: TieredConfig) = apply {
                            tiers = tieredConfig.tiers.map { it.toMutableList() }
                            additionalProperties = tieredConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for rating based on total usage quantities into the specified tier
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredConfig =
                            TieredConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        private val firstUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        private val lastUnit: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Inclusive tier starting value */
                        fun firstUnit(): Double = firstUnit.getRequired("first_unit")

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        fun lastUnit(): Optional<Double> =
                            Optional.ofNullable(lastUnit.getNullable("last_unit"))

                        /** Inclusive tier starting value */
                        @JsonProperty("first_unit")
                        @ExcludeMissing
                        fun _firstUnit(): JsonField<Double> = firstUnit

                        /** Amount per unit */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /**
                         * Exclusive tier ending value. If null, this is treated as the last tier
                         */
                        @JsonProperty("last_unit")
                        @ExcludeMissing
                        fun _lastUnit(): JsonField<Double> = lastUnit

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            firstUnit()
                            unitAmount()
                            lastUnit()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var firstUnit: JsonField<Double>? = null
                            private var unitAmount: JsonField<String>? = null
                            private var lastUnit: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                firstUnit = tier.firstUnit
                                unitAmount = tier.unitAmount
                                lastUnit = tier.lastUnit
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: Double) = firstUnit(JsonField.of(firstUnit))

                            /** Inclusive tier starting value */
                            fun firstUnit(firstUnit: JsonField<Double>) = apply {
                                this.firstUnit = firstUnit
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double?) =
                                lastUnit(JsonField.ofNullable(lastUnit))

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: Double) = lastUnit(lastUnit as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun lastUnit(lastUnit: Optional<Double>) =
                                lastUnit(lastUnit.orElse(null) as Double?)

                            /**
                             * Exclusive tier ending value. If null, this is treated as the last
                             * tier
                             */
                            fun lastUnit(lastUnit: JsonField<Double>) = apply {
                                this.lastUnit = lastUnit
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("firstUnit", firstUnit),
                                    checkRequired("unitAmount", unitAmount),
                                    lastUnit,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && firstUnit == other.firstUnit && unitAmount == other.unitAmount && lastUnit == other.lastUnit && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(firstUnit, unitAmount, lastUnit, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{firstUnit=$firstUnit, unitAmount=$unitAmount, lastUnit=$lastUnit, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredConfig == other.tieredConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredConfig=$tieredConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                private val tieredBpsConfig: JsonField<TieredBpsConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredBpsConfig(): TieredBpsConfig =
                    tieredBpsConfig.getRequired("tiered_bps_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_bps_config")
                @ExcludeMissing
                fun _tieredBpsConfig(): JsonField<TieredBpsConfig> = tieredBpsConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredBpsConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredBpsPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredBpsConfig: JsonField<TieredBpsConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredBpsPrice: NewSubscriptionTieredBpsPrice
                    ) = apply {
                        cadence = newSubscriptionTieredBpsPrice.cadence
                        itemId = newSubscriptionTieredBpsPrice.itemId
                        modelType = newSubscriptionTieredBpsPrice.modelType
                        name = newSubscriptionTieredBpsPrice.name
                        tieredBpsConfig = newSubscriptionTieredBpsPrice.tieredBpsConfig
                        billableMetricId = newSubscriptionTieredBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredBpsPrice.conversionRate
                        currency = newSubscriptionTieredBpsPrice.currency
                        externalPriceId = newSubscriptionTieredBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredBpsPrice.metadata
                        referenceId = newSubscriptionTieredBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredBpsPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredBpsConfig(tieredBpsConfig: TieredBpsConfig) =
                        tieredBpsConfig(JsonField.of(tieredBpsConfig))

                    fun tieredBpsConfig(tieredBpsConfig: JsonField<TieredBpsConfig>) = apply {
                        this.tieredBpsConfig = tieredBpsConfig
                    }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredBpsPrice =
                        NewSubscriptionTieredBpsPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredBpsConfig", tieredBpsConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_BPS = of("tiered_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_BPS -> Value.TIERED_BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_BPS -> Known.TIERED_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                     * specified tiers
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredBpsConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredBpsConfig: TieredBpsConfig) = apply {
                            tiers = tieredBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties =
                                tieredBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for a Graduated BPS pricing model, where usage is bucketed into
                         * specified tiers
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredBpsConfig =
                            TieredBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        private val minimumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Per-event basis point rate */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Inclusive tier starting value */
                        fun minimumAmount(): String = minimumAmount.getRequired("minimum_amount")

                        /** Exclusive tier ending value */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** Per unit maximum to charge */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Per-event basis point rate */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /** Inclusive tier starting value */
                        @JsonProperty("minimum_amount")
                        @ExcludeMissing
                        fun _minimumAmount(): JsonField<String> = minimumAmount

                        /** Exclusive tier ending value */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /** Per unit maximum to charge */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            minimumAmount()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var bps: JsonField<Double>? = null
                            private var minimumAmount: JsonField<String>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                minimumAmount = tier.minimumAmount
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Per-event basis point rate */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Per-event basis point rate */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: String) =
                                minimumAmount(JsonField.of(minimumAmount))

                            /** Inclusive tier starting value */
                            fun minimumAmount(minimumAmount: JsonField<String>) = apply {
                                this.minimumAmount = minimumAmount
                            }

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Exclusive tier ending value */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            /** Per unit maximum to charge */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    checkRequired("minimumAmount", minimumAmount),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && minimumAmount == other.minimumAmount && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, minimumAmount, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, minimumAmount=$minimumAmount, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredBpsPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredBpsConfig == other.tieredBpsConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredBpsConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredBpsPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredBpsConfig=$tieredBpsConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bps_config")
                @ExcludeMissing
                private val bpsConfig: JsonField<BpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bpsConfig(): BpsConfig = bpsConfig.getRequired("bps_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bps_config")
                @ExcludeMissing
                fun _bpsConfig(): JsonField<BpsConfig> = bpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bpsConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBpsPrice]. */
                class Builder internal constructor() {

                    private var bpsConfig: JsonField<BpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBpsPrice: NewSubscriptionBpsPrice) = apply {
                        bpsConfig = newSubscriptionBpsPrice.bpsConfig
                        cadence = newSubscriptionBpsPrice.cadence
                        itemId = newSubscriptionBpsPrice.itemId
                        modelType = newSubscriptionBpsPrice.modelType
                        name = newSubscriptionBpsPrice.name
                        billableMetricId = newSubscriptionBpsPrice.billableMetricId
                        billedInAdvance = newSubscriptionBpsPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBpsPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBpsPrice.conversionRate
                        currency = newSubscriptionBpsPrice.currency
                        externalPriceId = newSubscriptionBpsPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBpsPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBpsPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBpsPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBpsPrice.metadata
                        referenceId = newSubscriptionBpsPrice.referenceId
                        additionalProperties =
                            newSubscriptionBpsPrice.additionalProperties.toMutableMap()
                    }

                    fun bpsConfig(bpsConfig: BpsConfig) = bpsConfig(JsonField.of(bpsConfig))

                    fun bpsConfig(bpsConfig: JsonField<BpsConfig>) = apply {
                        this.bpsConfig = bpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBpsPrice =
                        NewSubscriptionBpsPrice(
                            checkRequired("bpsConfig", bpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("bps")
                    @ExcludeMissing
                    private val bps: JsonField<Double> = JsonMissing.of(),
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Basis point take rate per event */
                    fun bps(): Double = bps.getRequired("bps")

                    /** Optional currency amount maximum to cap spend per event */
                    fun perUnitMaximum(): Optional<String> =
                        Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                    /** Basis point take rate per event */
                    @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                    /** Optional currency amount maximum to cap spend per event */
                    @JsonProperty("per_unit_maximum")
                    @ExcludeMissing
                    fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        bps()
                        perUnitMaximum()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BpsConfig]. */
                    class Builder internal constructor() {

                        private var bps: JsonField<Double>? = null
                        private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bpsConfig: BpsConfig) = apply {
                            bps = bpsConfig.bps
                            perUnitMaximum = bpsConfig.perUnitMaximum
                            additionalProperties = bpsConfig.additionalProperties.toMutableMap()
                        }

                        /** Basis point take rate per event */
                        fun bps(bps: Double) = bps(JsonField.of(bps))

                        /** Basis point take rate per event */
                        fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: String?) =
                            perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                            perUnitMaximum(perUnitMaximum.orElse(null))

                        /** Optional currency amount maximum to cap spend per event */
                        fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                            this.perUnitMaximum = perUnitMaximum
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BpsConfig =
                            BpsConfig(
                                checkRequired("bps", bps),
                                perUnitMaximum,
                                additionalProperties.toImmutable(),
                            )
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BpsConfig && bps == other.bps && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(bps, perUnitMaximum, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BpsConfig{bps=$bps, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BPS = of("bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BPS -> Value.BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BPS -> Known.BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBpsPrice && bpsConfig == other.bpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBpsPrice{bpsConfig=$bpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkBpsPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                private val bulkBpsConfig: JsonField<BulkBpsConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkBpsConfig(): BulkBpsConfig = bulkBpsConfig.getRequired("bulk_bps_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bulk_bps_config")
                @ExcludeMissing
                fun _bulkBpsConfig(): JsonField<BulkBpsConfig> = bulkBpsConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBulkBpsPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkBpsConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBulkBpsPrice]. */
                class Builder internal constructor() {

                    private var bulkBpsConfig: JsonField<BulkBpsConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkBpsPrice: NewSubscriptionBulkBpsPrice) =
                        apply {
                            bulkBpsConfig = newSubscriptionBulkBpsPrice.bulkBpsConfig
                            cadence = newSubscriptionBulkBpsPrice.cadence
                            itemId = newSubscriptionBulkBpsPrice.itemId
                            modelType = newSubscriptionBulkBpsPrice.modelType
                            name = newSubscriptionBulkBpsPrice.name
                            billableMetricId = newSubscriptionBulkBpsPrice.billableMetricId
                            billedInAdvance = newSubscriptionBulkBpsPrice.billedInAdvance
                            billingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.billingCycleConfiguration
                            conversionRate = newSubscriptionBulkBpsPrice.conversionRate
                            currency = newSubscriptionBulkBpsPrice.currency
                            externalPriceId = newSubscriptionBulkBpsPrice.externalPriceId
                            fixedPriceQuantity = newSubscriptionBulkBpsPrice.fixedPriceQuantity
                            invoiceGroupingKey = newSubscriptionBulkBpsPrice.invoiceGroupingKey
                            invoicingCycleConfiguration =
                                newSubscriptionBulkBpsPrice.invoicingCycleConfiguration
                            metadata = newSubscriptionBulkBpsPrice.metadata
                            referenceId = newSubscriptionBulkBpsPrice.referenceId
                            additionalProperties =
                                newSubscriptionBulkBpsPrice.additionalProperties.toMutableMap()
                        }

                    fun bulkBpsConfig(bulkBpsConfig: BulkBpsConfig) =
                        bulkBpsConfig(JsonField.of(bulkBpsConfig))

                    fun bulkBpsConfig(bulkBpsConfig: JsonField<BulkBpsConfig>) = apply {
                        this.bulkBpsConfig = bulkBpsConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkBpsPrice =
                        NewSubscriptionBulkBpsPrice(
                            checkRequired("bulkBpsConfig", bulkBpsConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkBpsConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /**
                     * Tiers for a bulk BPS pricing model where all usage is aggregated to a single
                     * tier based on total volume
                     */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkBpsConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkBpsConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkBpsConfig: BulkBpsConfig) = apply {
                            tiers = bulkBpsConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkBpsConfig.additionalProperties.toMutableMap()
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /**
                         * Tiers for a bulk BPS pricing model where all usage is aggregated to a
                         * single tier based on total volume
                         */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkBpsConfig =
                            BulkBpsConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("bps")
                        @ExcludeMissing
                        private val bps: JsonField<Double> = JsonMissing.of(),
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        private val maximumAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        private val perUnitMaximum: JsonField<String> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Basis points to rate on */
                        fun bps(): Double = bps.getRequired("bps")

                        /** Upper bound for tier */
                        fun maximumAmount(): Optional<String> =
                            Optional.ofNullable(maximumAmount.getNullable("maximum_amount"))

                        /** The maximum amount to charge for any one event */
                        fun perUnitMaximum(): Optional<String> =
                            Optional.ofNullable(perUnitMaximum.getNullable("per_unit_maximum"))

                        /** Basis points to rate on */
                        @JsonProperty("bps") @ExcludeMissing fun _bps(): JsonField<Double> = bps

                        /** Upper bound for tier */
                        @JsonProperty("maximum_amount")
                        @ExcludeMissing
                        fun _maximumAmount(): JsonField<String> = maximumAmount

                        /** The maximum amount to charge for any one event */
                        @JsonProperty("per_unit_maximum")
                        @ExcludeMissing
                        fun _perUnitMaximum(): JsonField<String> = perUnitMaximum

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            bps()
                            maximumAmount()
                            perUnitMaximum()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var bps: JsonField<Double>? = null
                            private var maximumAmount: JsonField<String> = JsonMissing.of()
                            private var perUnitMaximum: JsonField<String> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                bps = tier.bps
                                maximumAmount = tier.maximumAmount
                                perUnitMaximum = tier.perUnitMaximum
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Basis points to rate on */
                            fun bps(bps: Double) = bps(JsonField.of(bps))

                            /** Basis points to rate on */
                            fun bps(bps: JsonField<Double>) = apply { this.bps = bps }

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: String?) =
                                maximumAmount(JsonField.ofNullable(maximumAmount))

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: Optional<String>) =
                                maximumAmount(maximumAmount.orElse(null))

                            /** Upper bound for tier */
                            fun maximumAmount(maximumAmount: JsonField<String>) = apply {
                                this.maximumAmount = maximumAmount
                            }

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: String?) =
                                perUnitMaximum(JsonField.ofNullable(perUnitMaximum))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: Optional<String>) =
                                perUnitMaximum(perUnitMaximum.orElse(null))

                            /** The maximum amount to charge for any one event */
                            fun perUnitMaximum(perUnitMaximum: JsonField<String>) = apply {
                                this.perUnitMaximum = perUnitMaximum
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("bps", bps),
                                    maximumAmount,
                                    perUnitMaximum,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && bps == other.bps && maximumAmount == other.maximumAmount && perUnitMaximum == other.perUnitMaximum && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(bps, maximumAmount, perUnitMaximum, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{bps=$bps, maximumAmount=$maximumAmount, perUnitMaximum=$perUnitMaximum, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkBpsConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkBpsConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_BPS = of("bulk_bps")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK_BPS
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK_BPS,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK_BPS -> Value.BULK_BPS
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK_BPS -> Known.BULK_BPS
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkBpsPrice && bulkBpsConfig == other.bulkBpsConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkBpsConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkBpsPrice{bulkBpsConfig=$bulkBpsConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_config")
                @ExcludeMissing
                private val bulkConfig: JsonField<BulkConfig> = JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkConfig(): BulkConfig = bulkConfig.getRequired("bulk_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bulk_config")
                @ExcludeMissing
                fun _bulkConfig(): JsonField<BulkConfig> = bulkConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBulkPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBulkPrice]. */
                class Builder internal constructor() {

                    private var bulkConfig: JsonField<BulkConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(newSubscriptionBulkPrice: NewSubscriptionBulkPrice) = apply {
                        bulkConfig = newSubscriptionBulkPrice.bulkConfig
                        cadence = newSubscriptionBulkPrice.cadence
                        itemId = newSubscriptionBulkPrice.itemId
                        modelType = newSubscriptionBulkPrice.modelType
                        name = newSubscriptionBulkPrice.name
                        billableMetricId = newSubscriptionBulkPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkPrice.conversionRate
                        currency = newSubscriptionBulkPrice.currency
                        externalPriceId = newSubscriptionBulkPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionBulkPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionBulkPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkPrice.metadata
                        referenceId = newSubscriptionBulkPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkPrice.additionalProperties.toMutableMap()
                    }

                    fun bulkConfig(bulkConfig: BulkConfig) = bulkConfig(JsonField.of(bulkConfig))

                    fun bulkConfig(bulkConfig: JsonField<BulkConfig>) = apply {
                        this.bulkConfig = bulkConfig
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkPrice =
                        NewSubscriptionBulkPrice(
                            checkRequired("bulkConfig", bulkConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkConfig
                @JsonCreator
                private constructor(
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    private val tiers: JsonField<List<Tier>> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** Bulk tiers for rating based on total usage volume */
                    fun tiers(): List<Tier> = tiers.getRequired("tiers")

                    /** Bulk tiers for rating based on total usage volume */
                    @JsonProperty("tiers")
                    @ExcludeMissing
                    fun _tiers(): JsonField<List<Tier>> = tiers

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        tiers().forEach { it.validate() }
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkConfig]. */
                    class Builder internal constructor() {

                        private var tiers: JsonField<MutableList<Tier>>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkConfig: BulkConfig) = apply {
                            tiers = bulkConfig.tiers.map { it.toMutableList() }
                            additionalProperties = bulkConfig.additionalProperties.toMutableMap()
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: List<Tier>) = tiers(JsonField.of(tiers))

                        /** Bulk tiers for rating based on total usage volume */
                        fun tiers(tiers: JsonField<List<Tier>>) = apply {
                            this.tiers = tiers.map { it.toMutableList() }
                        }

                        /** Bulk tiers for rating based on total usage volume */
                        fun addTier(tier: Tier) = apply {
                            tiers =
                                (tiers ?: JsonField.of(mutableListOf())).apply {
                                    asKnown()
                                        .orElseThrow {
                                            IllegalStateException(
                                                "Field was set to non-list type: ${javaClass.simpleName}"
                                            )
                                        }
                                        .add(tier)
                                }
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkConfig =
                            BulkConfig(
                                checkRequired("tiers", tiers).map { it.toImmutable() },
                                additionalProperties.toImmutable(),
                            )
                    }

                    @NoAutoDetect
                    class Tier
                    @JsonCreator
                    private constructor(
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        private val unitAmount: JsonField<String> = JsonMissing.of(),
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        private val maximumUnits: JsonField<Double> = JsonMissing.of(),
                        @JsonAnySetter
                        private val additionalProperties: Map<String, JsonValue> =
                            immutableEmptyMap(),
                    ) {

                        /** Amount per unit */
                        fun unitAmount(): String = unitAmount.getRequired("unit_amount")

                        /** Upper bound for this tier */
                        fun maximumUnits(): Optional<Double> =
                            Optional.ofNullable(maximumUnits.getNullable("maximum_units"))

                        /** Amount per unit */
                        @JsonProperty("unit_amount")
                        @ExcludeMissing
                        fun _unitAmount(): JsonField<String> = unitAmount

                        /** Upper bound for this tier */
                        @JsonProperty("maximum_units")
                        @ExcludeMissing
                        fun _maximumUnits(): JsonField<Double> = maximumUnits

                        @JsonAnyGetter
                        @ExcludeMissing
                        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                        private var validated: Boolean = false

                        fun validate(): Tier = apply {
                            if (validated) {
                                return@apply
                            }

                            unitAmount()
                            maximumUnits()
                            validated = true
                        }

                        fun toBuilder() = Builder().from(this)

                        companion object {

                            @JvmStatic fun builder() = Builder()
                        }

                        /** A builder for [Tier]. */
                        class Builder internal constructor() {

                            private var unitAmount: JsonField<String>? = null
                            private var maximumUnits: JsonField<Double> = JsonMissing.of()
                            private var additionalProperties: MutableMap<String, JsonValue> =
                                mutableMapOf()

                            @JvmSynthetic
                            internal fun from(tier: Tier) = apply {
                                unitAmount = tier.unitAmount
                                maximumUnits = tier.maximumUnits
                                additionalProperties = tier.additionalProperties.toMutableMap()
                            }

                            /** Amount per unit */
                            fun unitAmount(unitAmount: String) =
                                unitAmount(JsonField.of(unitAmount))

                            /** Amount per unit */
                            fun unitAmount(unitAmount: JsonField<String>) = apply {
                                this.unitAmount = unitAmount
                            }

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double?) =
                                maximumUnits(JsonField.ofNullable(maximumUnits))

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: Double) =
                                maximumUnits(maximumUnits as Double?)

                            /** Upper bound for this tier */
                            @Suppress(
                                "USELESS_CAST"
                            ) // See https://youtrack.jetbrains.com/issue/KT-74228
                            fun maximumUnits(maximumUnits: Optional<Double>) =
                                maximumUnits(maximumUnits.orElse(null) as Double?)

                            /** Upper bound for this tier */
                            fun maximumUnits(maximumUnits: JsonField<Double>) = apply {
                                this.maximumUnits = maximumUnits
                            }

                            fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                                apply {
                                    this.additionalProperties.clear()
                                    putAllAdditionalProperties(additionalProperties)
                                }

                            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                                additionalProperties.put(key, value)
                            }

                            fun putAllAdditionalProperties(
                                additionalProperties: Map<String, JsonValue>
                            ) = apply { this.additionalProperties.putAll(additionalProperties) }

                            fun removeAdditionalProperty(key: String) = apply {
                                additionalProperties.remove(key)
                            }

                            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                                keys.forEach(::removeAdditionalProperty)
                            }

                            fun build(): Tier =
                                Tier(
                                    checkRequired("unitAmount", unitAmount),
                                    maximumUnits,
                                    additionalProperties.toImmutable(),
                                )
                        }

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is Tier && unitAmount == other.unitAmount && maximumUnits == other.maximumUnits && additionalProperties == other.additionalProperties /* spotless:on */
                        }

                        /* spotless:off */
                        private val hashCode: Int by lazy { Objects.hash(unitAmount, maximumUnits, additionalProperties) }
                        /* spotless:on */

                        override fun hashCode(): Int = hashCode

                        override fun toString() =
                            "Tier{unitAmount=$unitAmount, maximumUnits=$maximumUnits, additionalProperties=$additionalProperties}"
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkConfig && tiers == other.tiers && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(tiers, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkConfig{tiers=$tiers, additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK = of("bulk")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK -> Value.BULK
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK -> Known.BULK
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkPrice && bulkConfig == other.bulkConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkPrice{bulkConfig=$bulkConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionThresholdTotalAmountPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                private val thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun thresholdTotalAmountConfig(): ThresholdTotalAmountConfig =
                    thresholdTotalAmountConfig.getRequired("threshold_total_amount_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("threshold_total_amount_config")
                @ExcludeMissing
                fun _thresholdTotalAmountConfig(): JsonField<ThresholdTotalAmountConfig> =
                    thresholdTotalAmountConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionThresholdTotalAmountPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    thresholdTotalAmountConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionThresholdTotalAmountPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionThresholdTotalAmountPrice:
                            NewSubscriptionThresholdTotalAmountPrice
                    ) = apply {
                        cadence = newSubscriptionThresholdTotalAmountPrice.cadence
                        itemId = newSubscriptionThresholdTotalAmountPrice.itemId
                        modelType = newSubscriptionThresholdTotalAmountPrice.modelType
                        name = newSubscriptionThresholdTotalAmountPrice.name
                        thresholdTotalAmountConfig =
                            newSubscriptionThresholdTotalAmountPrice.thresholdTotalAmountConfig
                        billableMetricId = newSubscriptionThresholdTotalAmountPrice.billableMetricId
                        billedInAdvance = newSubscriptionThresholdTotalAmountPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionThresholdTotalAmountPrice.conversionRate
                        currency = newSubscriptionThresholdTotalAmountPrice.currency
                        externalPriceId = newSubscriptionThresholdTotalAmountPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionThresholdTotalAmountPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionThresholdTotalAmountPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionThresholdTotalAmountPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionThresholdTotalAmountPrice.metadata
                        referenceId = newSubscriptionThresholdTotalAmountPrice.referenceId
                        additionalProperties =
                            newSubscriptionThresholdTotalAmountPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: ThresholdTotalAmountConfig
                    ) = thresholdTotalAmountConfig(JsonField.of(thresholdTotalAmountConfig))

                    fun thresholdTotalAmountConfig(
                        thresholdTotalAmountConfig: JsonField<ThresholdTotalAmountConfig>
                    ) = apply { this.thresholdTotalAmountConfig = thresholdTotalAmountConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionThresholdTotalAmountPrice =
                        NewSubscriptionThresholdTotalAmountPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("thresholdTotalAmountConfig", thresholdTotalAmountConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val THRESHOLD_TOTAL_AMOUNT = of("threshold_total_amount")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        THRESHOLD_TOTAL_AMOUNT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        THRESHOLD_TOTAL_AMOUNT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Value.THRESHOLD_TOTAL_AMOUNT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            THRESHOLD_TOTAL_AMOUNT -> Known.THRESHOLD_TOTAL_AMOUNT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class ThresholdTotalAmountConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): ThresholdTotalAmountConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [ThresholdTotalAmountConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(thresholdTotalAmountConfig: ThresholdTotalAmountConfig) =
                            apply {
                                additionalProperties =
                                    thresholdTotalAmountConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): ThresholdTotalAmountConfig =
                            ThresholdTotalAmountConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ThresholdTotalAmountConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "ThresholdTotalAmountConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionThresholdTotalAmountPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && thresholdTotalAmountConfig == other.thresholdTotalAmountConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, thresholdTotalAmountConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionThresholdTotalAmountPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, thresholdTotalAmountConfig=$thresholdTotalAmountConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredPackagePrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                private val tieredPackageConfig: JsonField<TieredPackageConfig> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredPackageConfig(): TieredPackageConfig =
                    tieredPackageConfig.getRequired("tiered_package_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_package_config")
                @ExcludeMissing
                fun _tieredPackageConfig(): JsonField<TieredPackageConfig> = tieredPackageConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredPackagePrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredPackageConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredPackagePrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredPackageConfig: JsonField<TieredPackageConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredPackagePrice: NewSubscriptionTieredPackagePrice
                    ) = apply {
                        cadence = newSubscriptionTieredPackagePrice.cadence
                        itemId = newSubscriptionTieredPackagePrice.itemId
                        modelType = newSubscriptionTieredPackagePrice.modelType
                        name = newSubscriptionTieredPackagePrice.name
                        tieredPackageConfig = newSubscriptionTieredPackagePrice.tieredPackageConfig
                        billableMetricId = newSubscriptionTieredPackagePrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredPackagePrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredPackagePrice.conversionRate
                        currency = newSubscriptionTieredPackagePrice.currency
                        externalPriceId = newSubscriptionTieredPackagePrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionTieredPackagePrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionTieredPackagePrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredPackagePrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredPackagePrice.metadata
                        referenceId = newSubscriptionTieredPackagePrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredPackagePrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredPackageConfig(tieredPackageConfig: TieredPackageConfig) =
                        tieredPackageConfig(JsonField.of(tieredPackageConfig))

                    fun tieredPackageConfig(tieredPackageConfig: JsonField<TieredPackageConfig>) =
                        apply {
                            this.tieredPackageConfig = tieredPackageConfig
                        }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredPackagePrice =
                        NewSubscriptionTieredPackagePrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredPackageConfig", tieredPackageConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_PACKAGE = of("tiered_package")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_PACKAGE
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_PACKAGE,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_PACKAGE -> Value.TIERED_PACKAGE
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_PACKAGE -> Known.TIERED_PACKAGE
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredPackageConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredPackageConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredPackageConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredPackageConfig: TieredPackageConfig) = apply {
                            additionalProperties =
                                tieredPackageConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredPackageConfig =
                            TieredPackageConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredPackageConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredPackageConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredPackagePrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredPackageConfig == other.tieredPackageConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredPackageConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredPackagePrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredPackageConfig=$tieredPackageConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTieredWithMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                private val tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredWithMinimumConfig(): TieredWithMinimumConfig =
                    tieredWithMinimumConfig.getRequired("tiered_with_minimum_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_with_minimum_config")
                @ExcludeMissing
                fun _tieredWithMinimumConfig(): JsonField<TieredWithMinimumConfig> =
                    tieredWithMinimumConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTieredWithMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredWithMinimumConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTieredWithMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTieredWithMinimumPrice: NewSubscriptionTieredWithMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionTieredWithMinimumPrice.cadence
                        itemId = newSubscriptionTieredWithMinimumPrice.itemId
                        modelType = newSubscriptionTieredWithMinimumPrice.modelType
                        name = newSubscriptionTieredWithMinimumPrice.name
                        tieredWithMinimumConfig =
                            newSubscriptionTieredWithMinimumPrice.tieredWithMinimumConfig
                        billableMetricId = newSubscriptionTieredWithMinimumPrice.billableMetricId
                        billedInAdvance = newSubscriptionTieredWithMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTieredWithMinimumPrice.conversionRate
                        currency = newSubscriptionTieredWithMinimumPrice.currency
                        externalPriceId = newSubscriptionTieredWithMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTieredWithMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTieredWithMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTieredWithMinimumPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTieredWithMinimumPrice.metadata
                        referenceId = newSubscriptionTieredWithMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionTieredWithMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithMinimumConfig(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                        tieredWithMinimumConfig(JsonField.of(tieredWithMinimumConfig))

                    fun tieredWithMinimumConfig(
                        tieredWithMinimumConfig: JsonField<TieredWithMinimumConfig>
                    ) = apply { this.tieredWithMinimumConfig = tieredWithMinimumConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTieredWithMinimumPrice =
                        NewSubscriptionTieredWithMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithMinimumConfig", tieredWithMinimumConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_MINIMUM = of("tiered_with_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_WITH_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_WITH_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Value.TIERED_WITH_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_MINIMUM -> Known.TIERED_WITH_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredWithMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithMinimumConfig: TieredWithMinimumConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithMinimumConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithMinimumConfig =
                            TieredWithMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithMinimumConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTieredWithMinimumPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithMinimumConfig == other.tieredWithMinimumConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithMinimumConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTieredWithMinimumPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithMinimumConfig=$tieredWithMinimumConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithPercentPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                private val unitWithPercentConfig: JsonField<UnitWithPercentConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitWithPercentConfig(): UnitWithPercentConfig =
                    unitWithPercentConfig.getRequired("unit_with_percent_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_with_percent_config")
                @ExcludeMissing
                fun _unitWithPercentConfig(): JsonField<UnitWithPercentConfig> =
                    unitWithPercentConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionUnitWithPercentPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitWithPercentConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionUnitWithPercentPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithPercentConfig: JsonField<UnitWithPercentConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithPercentPrice: NewSubscriptionUnitWithPercentPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithPercentPrice.cadence
                        itemId = newSubscriptionUnitWithPercentPrice.itemId
                        modelType = newSubscriptionUnitWithPercentPrice.modelType
                        name = newSubscriptionUnitWithPercentPrice.name
                        unitWithPercentConfig =
                            newSubscriptionUnitWithPercentPrice.unitWithPercentConfig
                        billableMetricId = newSubscriptionUnitWithPercentPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithPercentPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithPercentPrice.conversionRate
                        currency = newSubscriptionUnitWithPercentPrice.currency
                        externalPriceId = newSubscriptionUnitWithPercentPrice.externalPriceId
                        fixedPriceQuantity = newSubscriptionUnitWithPercentPrice.fixedPriceQuantity
                        invoiceGroupingKey = newSubscriptionUnitWithPercentPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithPercentPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithPercentPrice.metadata
                        referenceId = newSubscriptionUnitWithPercentPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithPercentPrice.additionalProperties.toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithPercentConfig(unitWithPercentConfig: UnitWithPercentConfig) =
                        unitWithPercentConfig(JsonField.of(unitWithPercentConfig))

                    fun unitWithPercentConfig(
                        unitWithPercentConfig: JsonField<UnitWithPercentConfig>
                    ) = apply { this.unitWithPercentConfig = unitWithPercentConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithPercentPrice =
                        NewSubscriptionUnitWithPercentPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithPercentConfig", unitWithPercentConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PERCENT = of("unit_with_percent")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT_WITH_PERCENT
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT_WITH_PERCENT,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PERCENT -> Value.UNIT_WITH_PERCENT
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PERCENT -> Known.UNIT_WITH_PERCENT
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithPercentConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithPercentConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitWithPercentConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithPercentConfig: UnitWithPercentConfig) = apply {
                            additionalProperties =
                                unitWithPercentConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithPercentConfig =
                            UnitWithPercentConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithPercentConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithPercentConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithPercentPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithPercentConfig == other.unitWithPercentConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithPercentConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithPercentPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithPercentConfig=$unitWithPercentConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionPackageWithAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                private val packageWithAllocationConfig: JsonField<PackageWithAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun packageWithAllocationConfig(): PackageWithAllocationConfig =
                    packageWithAllocationConfig.getRequired("package_with_allocation_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("package_with_allocation_config")
                @ExcludeMissing
                fun _packageWithAllocationConfig(): JsonField<PackageWithAllocationConfig> =
                    packageWithAllocationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionPackageWithAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    packageWithAllocationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionPackageWithAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var packageWithAllocationConfig:
                        JsonField<PackageWithAllocationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionPackageWithAllocationPrice:
                            NewSubscriptionPackageWithAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionPackageWithAllocationPrice.cadence
                        itemId = newSubscriptionPackageWithAllocationPrice.itemId
                        modelType = newSubscriptionPackageWithAllocationPrice.modelType
                        name = newSubscriptionPackageWithAllocationPrice.name
                        packageWithAllocationConfig =
                            newSubscriptionPackageWithAllocationPrice.packageWithAllocationConfig
                        billableMetricId =
                            newSubscriptionPackageWithAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionPackageWithAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionPackageWithAllocationPrice.conversionRate
                        currency = newSubscriptionPackageWithAllocationPrice.currency
                        externalPriceId = newSubscriptionPackageWithAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionPackageWithAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionPackageWithAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionPackageWithAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionPackageWithAllocationPrice.metadata
                        referenceId = newSubscriptionPackageWithAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionPackageWithAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: PackageWithAllocationConfig
                    ) = packageWithAllocationConfig(JsonField.of(packageWithAllocationConfig))

                    fun packageWithAllocationConfig(
                        packageWithAllocationConfig: JsonField<PackageWithAllocationConfig>
                    ) = apply { this.packageWithAllocationConfig = packageWithAllocationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionPackageWithAllocationPrice =
                        NewSubscriptionPackageWithAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired(
                                "packageWithAllocationConfig",
                                packageWithAllocationConfig,
                            ),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val PACKAGE_WITH_ALLOCATION = of("package_with_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        PACKAGE_WITH_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        PACKAGE_WITH_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Value.PACKAGE_WITH_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            PACKAGE_WITH_ALLOCATION -> Known.PACKAGE_WITH_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class PackageWithAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): PackageWithAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [PackageWithAllocationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            packageWithAllocationConfig: PackageWithAllocationConfig
                        ) = apply {
                            additionalProperties =
                                packageWithAllocationConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): PackageWithAllocationConfig =
                            PackageWithAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is PackageWithAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "PackageWithAllocationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionPackageWithAllocationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && packageWithAllocationConfig == other.packageWithAllocationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, packageWithAllocationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionPackageWithAllocationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, packageWithAllocationConfig=$packageWithAllocationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionTierWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                private val tieredWithProrationConfig: JsonField<TieredWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun tieredWithProrationConfig(): TieredWithProrationConfig =
                    tieredWithProrationConfig.getRequired("tiered_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("tiered_with_proration_config")
                @ExcludeMissing
                fun _tieredWithProrationConfig(): JsonField<TieredWithProrationConfig> =
                    tieredWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionTierWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    tieredWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionTierWithProrationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var tieredWithProrationConfig: JsonField<TieredWithProrationConfig>? =
                        null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionTierWithProrationPrice: NewSubscriptionTierWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionTierWithProrationPrice.cadence
                        itemId = newSubscriptionTierWithProrationPrice.itemId
                        modelType = newSubscriptionTierWithProrationPrice.modelType
                        name = newSubscriptionTierWithProrationPrice.name
                        tieredWithProrationConfig =
                            newSubscriptionTierWithProrationPrice.tieredWithProrationConfig
                        billableMetricId = newSubscriptionTierWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionTierWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionTierWithProrationPrice.conversionRate
                        currency = newSubscriptionTierWithProrationPrice.currency
                        externalPriceId = newSubscriptionTierWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionTierWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionTierWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionTierWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionTierWithProrationPrice.metadata
                        referenceId = newSubscriptionTierWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionTierWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: TieredWithProrationConfig
                    ) = tieredWithProrationConfig(JsonField.of(tieredWithProrationConfig))

                    fun tieredWithProrationConfig(
                        tieredWithProrationConfig: JsonField<TieredWithProrationConfig>
                    ) = apply { this.tieredWithProrationConfig = tieredWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionTierWithProrationPrice =
                        NewSubscriptionTierWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("tieredWithProrationConfig", tieredWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val TIERED_WITH_PRORATION = of("tiered_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        TIERED_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        TIERED_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            TIERED_WITH_PRORATION -> Value.TIERED_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            TIERED_WITH_PRORATION -> Known.TIERED_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class TieredWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): TieredWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [TieredWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(tieredWithProrationConfig: TieredWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    tieredWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): TieredWithProrationConfig =
                            TieredWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is TieredWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "TieredWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionTierWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && tieredWithProrationConfig == other.tieredWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, tieredWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionTierWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, tieredWithProrationConfig=$tieredWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionUnitWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                private val unitWithProrationConfig: JsonField<UnitWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                fun unitWithProrationConfig(): UnitWithProrationConfig =
                    unitWithProrationConfig.getRequired("unit_with_proration_config")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                @JsonProperty("unit_with_proration_config")
                @ExcludeMissing
                fun _unitWithProrationConfig(): JsonField<UnitWithProrationConfig> =
                    unitWithProrationConfig

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionUnitWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    itemId()
                    modelType()
                    name()
                    unitWithProrationConfig().validate()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionUnitWithProrationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var unitWithProrationConfig: JsonField<UnitWithProrationConfig>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionUnitWithProrationPrice: NewSubscriptionUnitWithProrationPrice
                    ) = apply {
                        cadence = newSubscriptionUnitWithProrationPrice.cadence
                        itemId = newSubscriptionUnitWithProrationPrice.itemId
                        modelType = newSubscriptionUnitWithProrationPrice.modelType
                        name = newSubscriptionUnitWithProrationPrice.name
                        unitWithProrationConfig =
                            newSubscriptionUnitWithProrationPrice.unitWithProrationConfig
                        billableMetricId = newSubscriptionUnitWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionUnitWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionUnitWithProrationPrice.conversionRate
                        currency = newSubscriptionUnitWithProrationPrice.currency
                        externalPriceId = newSubscriptionUnitWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionUnitWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionUnitWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionUnitWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionUnitWithProrationPrice.metadata
                        referenceId = newSubscriptionUnitWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionUnitWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    fun unitWithProrationConfig(unitWithProrationConfig: UnitWithProrationConfig) =
                        unitWithProrationConfig(JsonField.of(unitWithProrationConfig))

                    fun unitWithProrationConfig(
                        unitWithProrationConfig: JsonField<UnitWithProrationConfig>
                    ) = apply { this.unitWithProrationConfig = unitWithProrationConfig }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionUnitWithProrationPrice =
                        NewSubscriptionUnitWithProrationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            checkRequired("unitWithProrationConfig", unitWithProrationConfig),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val UNIT_WITH_PRORATION = of("unit_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        UNIT_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        UNIT_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            UNIT_WITH_PRORATION -> Value.UNIT_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            UNIT_WITH_PRORATION -> Known.UNIT_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class UnitWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): UnitWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [UnitWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(unitWithProrationConfig: UnitWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    unitWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): UnitWithProrationConfig =
                            UnitWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is UnitWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "UnitWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionUnitWithProrationPrice && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && unitWithProrationConfig == other.unitWithProrationConfig && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, itemId, modelType, name, unitWithProrationConfig, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionUnitWithProrationPrice{cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, unitWithProrationConfig=$unitWithProrationConfig, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedAllocationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                private val groupedAllocationConfig: JsonField<GroupedAllocationConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                fun groupedAllocationConfig(): GroupedAllocationConfig =
                    groupedAllocationConfig.getRequired("grouped_allocation_config")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                @JsonProperty("grouped_allocation_config")
                @ExcludeMissing
                fun _groupedAllocationConfig(): JsonField<GroupedAllocationConfig> =
                    groupedAllocationConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionGroupedAllocationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    groupedAllocationConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionGroupedAllocationPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var groupedAllocationConfig: JsonField<GroupedAllocationConfig>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedAllocationPrice: NewSubscriptionGroupedAllocationPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedAllocationPrice.cadence
                        groupedAllocationConfig =
                            newSubscriptionGroupedAllocationPrice.groupedAllocationConfig
                        itemId = newSubscriptionGroupedAllocationPrice.itemId
                        modelType = newSubscriptionGroupedAllocationPrice.modelType
                        name = newSubscriptionGroupedAllocationPrice.name
                        billableMetricId = newSubscriptionGroupedAllocationPrice.billableMetricId
                        billedInAdvance = newSubscriptionGroupedAllocationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionGroupedAllocationPrice.conversionRate
                        currency = newSubscriptionGroupedAllocationPrice.currency
                        externalPriceId = newSubscriptionGroupedAllocationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedAllocationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedAllocationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedAllocationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedAllocationPrice.metadata
                        referenceId = newSubscriptionGroupedAllocationPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedAllocationPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    fun groupedAllocationConfig(groupedAllocationConfig: GroupedAllocationConfig) =
                        groupedAllocationConfig(JsonField.of(groupedAllocationConfig))

                    fun groupedAllocationConfig(
                        groupedAllocationConfig: JsonField<GroupedAllocationConfig>
                    ) = apply { this.groupedAllocationConfig = groupedAllocationConfig }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedAllocationPrice =
                        NewSubscriptionGroupedAllocationPrice(
                            checkRequired("cadence", cadence),
                            checkRequired("groupedAllocationConfig", groupedAllocationConfig),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedAllocationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedAllocationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedAllocationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(groupedAllocationConfig: GroupedAllocationConfig) =
                            apply {
                                additionalProperties =
                                    groupedAllocationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedAllocationConfig =
                            GroupedAllocationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedAllocationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedAllocationConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val GROUPED_ALLOCATION = of("grouped_allocation")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_ALLOCATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_ALLOCATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_ALLOCATION -> Value.GROUPED_ALLOCATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_ALLOCATION -> Known.GROUPED_ALLOCATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedAllocationPrice && cadence == other.cadence && groupedAllocationConfig == other.groupedAllocationConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedAllocationConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedAllocationPrice{cadence=$cadence, groupedAllocationConfig=$groupedAllocationConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionGroupedWithProratedMinimumPrice
            @JsonCreator
            private constructor(
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                private val groupedWithProratedMinimumConfig:
                    JsonField<GroupedWithProratedMinimumConfig> =
                    JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                fun groupedWithProratedMinimumConfig(): GroupedWithProratedMinimumConfig =
                    groupedWithProratedMinimumConfig.getRequired(
                        "grouped_with_prorated_minimum_config"
                    )

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                @JsonProperty("grouped_with_prorated_minimum_config")
                @ExcludeMissing
                fun _groupedWithProratedMinimumConfig():
                    JsonField<GroupedWithProratedMinimumConfig> = groupedWithProratedMinimumConfig

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionGroupedWithProratedMinimumPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    cadence()
                    groupedWithProratedMinimumConfig().validate()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionGroupedWithProratedMinimumPrice]. */
                class Builder internal constructor() {

                    private var cadence: JsonField<Cadence>? = null
                    private var groupedWithProratedMinimumConfig:
                        JsonField<GroupedWithProratedMinimumConfig>? =
                        null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionGroupedWithProratedMinimumPrice:
                            NewSubscriptionGroupedWithProratedMinimumPrice
                    ) = apply {
                        cadence = newSubscriptionGroupedWithProratedMinimumPrice.cadence
                        groupedWithProratedMinimumConfig =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .groupedWithProratedMinimumConfig
                        itemId = newSubscriptionGroupedWithProratedMinimumPrice.itemId
                        modelType = newSubscriptionGroupedWithProratedMinimumPrice.modelType
                        name = newSubscriptionGroupedWithProratedMinimumPrice.name
                        billableMetricId =
                            newSubscriptionGroupedWithProratedMinimumPrice.billableMetricId
                        billedInAdvance =
                            newSubscriptionGroupedWithProratedMinimumPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice.billingCycleConfiguration
                        conversionRate =
                            newSubscriptionGroupedWithProratedMinimumPrice.conversionRate
                        currency = newSubscriptionGroupedWithProratedMinimumPrice.currency
                        externalPriceId =
                            newSubscriptionGroupedWithProratedMinimumPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionGroupedWithProratedMinimumPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionGroupedWithProratedMinimumPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionGroupedWithProratedMinimumPrice
                                .invoicingCycleConfiguration
                        metadata = newSubscriptionGroupedWithProratedMinimumPrice.metadata
                        referenceId = newSubscriptionGroupedWithProratedMinimumPrice.referenceId
                        additionalProperties =
                            newSubscriptionGroupedWithProratedMinimumPrice.additionalProperties
                                .toMutableMap()
                    }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                    ) =
                        groupedWithProratedMinimumConfig(
                            JsonField.of(groupedWithProratedMinimumConfig)
                        )

                    fun groupedWithProratedMinimumConfig(
                        groupedWithProratedMinimumConfig:
                            JsonField<GroupedWithProratedMinimumConfig>
                    ) = apply {
                        this.groupedWithProratedMinimumConfig = groupedWithProratedMinimumConfig
                    }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionGroupedWithProratedMinimumPrice =
                        NewSubscriptionGroupedWithProratedMinimumPrice(
                            checkRequired("cadence", cadence),
                            checkRequired(
                                "groupedWithProratedMinimumConfig",
                                groupedWithProratedMinimumConfig,
                            ),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                @NoAutoDetect
                class GroupedWithProratedMinimumConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): GroupedWithProratedMinimumConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [GroupedWithProratedMinimumConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            groupedWithProratedMinimumConfig: GroupedWithProratedMinimumConfig
                        ) = apply {
                            additionalProperties =
                                groupedWithProratedMinimumConfig.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): GroupedWithProratedMinimumConfig =
                            GroupedWithProratedMinimumConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is GroupedWithProratedMinimumConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "GroupedWithProratedMinimumConfig{additionalProperties=$additionalProperties}"
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField
                        val GROUPED_WITH_PRORATED_MINIMUM = of("grouped_with_prorated_minimum")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        GROUPED_WITH_PRORATED_MINIMUM
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        GROUPED_WITH_PRORATED_MINIMUM,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Value.GROUPED_WITH_PRORATED_MINIMUM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            GROUPED_WITH_PRORATED_MINIMUM -> Known.GROUPED_WITH_PRORATED_MINIMUM
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionGroupedWithProratedMinimumPrice && cadence == other.cadence && groupedWithProratedMinimumConfig == other.groupedWithProratedMinimumConfig && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(cadence, groupedWithProratedMinimumConfig, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionGroupedWithProratedMinimumPrice{cadence=$cadence, groupedWithProratedMinimumConfig=$groupedWithProratedMinimumConfig, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }

            @NoAutoDetect
            class NewSubscriptionBulkWithProrationPrice
            @JsonCreator
            private constructor(
                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                private val bulkWithProrationConfig: JsonField<BulkWithProrationConfig> =
                    JsonMissing.of(),
                @JsonProperty("cadence")
                @ExcludeMissing
                private val cadence: JsonField<Cadence> = JsonMissing.of(),
                @JsonProperty("item_id")
                @ExcludeMissing
                private val itemId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("model_type")
                @ExcludeMissing
                private val modelType: JsonField<ModelType> = JsonMissing.of(),
                @JsonProperty("name")
                @ExcludeMissing
                private val name: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                private val billableMetricId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                private val billedInAdvance: JsonField<Boolean> = JsonMissing.of(),
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                private val billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                private val conversionRate: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("currency")
                @ExcludeMissing
                private val currency: JsonField<String> = JsonMissing.of(),
                @JsonProperty("external_price_id")
                @ExcludeMissing
                private val externalPriceId: JsonField<String> = JsonMissing.of(),
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                private val fixedPriceQuantity: JsonField<Double> = JsonMissing.of(),
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                private val invoiceGroupingKey: JsonField<String> = JsonMissing.of(),
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                private val invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration> =
                    JsonMissing.of(),
                @JsonProperty("metadata")
                @ExcludeMissing
                private val metadata: JsonField<Metadata> = JsonMissing.of(),
                @JsonProperty("reference_id")
                @ExcludeMissing
                private val referenceId: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun bulkWithProrationConfig(): BulkWithProrationConfig =
                    bulkWithProrationConfig.getRequired("bulk_with_proration_config")

                /** The cadence to bill for this price on. */
                fun cadence(): Cadence = cadence.getRequired("cadence")

                /** The id of the item the plan will be associated with. */
                fun itemId(): String = itemId.getRequired("item_id")

                fun modelType(): ModelType = modelType.getRequired("model_type")

                /** The name of the price. */
                fun name(): String = name.getRequired("name")

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                fun billableMetricId(): Optional<String> =
                    Optional.ofNullable(billableMetricId.getNullable("billable_metric_id"))

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                fun billedInAdvance(): Optional<Boolean> =
                    Optional.ofNullable(billedInAdvance.getNullable("billed_in_advance"))

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                fun billingCycleConfiguration(): Optional<BillingCycleConfiguration> =
                    Optional.ofNullable(
                        billingCycleConfiguration.getNullable("billing_cycle_configuration")
                    )

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                fun conversionRate(): Optional<Double> =
                    Optional.ofNullable(conversionRate.getNullable("conversion_rate"))

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                fun currency(): Optional<String> =
                    Optional.ofNullable(currency.getNullable("currency"))

                /** An alias for the price. */
                fun externalPriceId(): Optional<String> =
                    Optional.ofNullable(externalPriceId.getNullable("external_price_id"))

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                fun fixedPriceQuantity(): Optional<Double> =
                    Optional.ofNullable(fixedPriceQuantity.getNullable("fixed_price_quantity"))

                /** The property used to group this price on an invoice */
                fun invoiceGroupingKey(): Optional<String> =
                    Optional.ofNullable(invoiceGroupingKey.getNullable("invoice_grouping_key"))

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                fun invoicingCycleConfiguration(): Optional<InvoicingCycleConfiguration> =
                    Optional.ofNullable(
                        invoicingCycleConfiguration.getNullable("invoicing_cycle_configuration")
                    )

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                fun metadata(): Optional<Metadata> =
                    Optional.ofNullable(metadata.getNullable("metadata"))

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                fun referenceId(): Optional<String> =
                    Optional.ofNullable(referenceId.getNullable("reference_id"))

                @JsonProperty("bulk_with_proration_config")
                @ExcludeMissing
                fun _bulkWithProrationConfig(): JsonField<BulkWithProrationConfig> =
                    bulkWithProrationConfig

                /** The cadence to bill for this price on. */
                @JsonProperty("cadence")
                @ExcludeMissing
                fun _cadence(): JsonField<Cadence> = cadence

                /** The id of the item the plan will be associated with. */
                @JsonProperty("item_id") @ExcludeMissing fun _itemId(): JsonField<String> = itemId

                @JsonProperty("model_type")
                @ExcludeMissing
                fun _modelType(): JsonField<ModelType> = modelType

                /** The name of the price. */
                @JsonProperty("name") @ExcludeMissing fun _name(): JsonField<String> = name

                /**
                 * The id of the billable metric for the price. Only needed if the price is
                 * usage-based.
                 */
                @JsonProperty("billable_metric_id")
                @ExcludeMissing
                fun _billableMetricId(): JsonField<String> = billableMetricId

                /**
                 * If the Price represents a fixed cost, the price will be billed in-advance if this
                 * is true, and in-arrears if this is false.
                 */
                @JsonProperty("billed_in_advance")
                @ExcludeMissing
                fun _billedInAdvance(): JsonField<Boolean> = billedInAdvance

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @JsonProperty("billing_cycle_configuration")
                @ExcludeMissing
                fun _billingCycleConfiguration(): JsonField<BillingCycleConfiguration> =
                    billingCycleConfiguration

                /** The per unit conversion rate of the price currency to the invoicing currency. */
                @JsonProperty("conversion_rate")
                @ExcludeMissing
                fun _conversionRate(): JsonField<Double> = conversionRate

                /**
                 * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                 * price is billed.
                 */
                @JsonProperty("currency")
                @ExcludeMissing
                fun _currency(): JsonField<String> = currency

                /** An alias for the price. */
                @JsonProperty("external_price_id")
                @ExcludeMissing
                fun _externalPriceId(): JsonField<String> = externalPriceId

                /**
                 * If the Price represents a fixed cost, this represents the quantity of units
                 * applied.
                 */
                @JsonProperty("fixed_price_quantity")
                @ExcludeMissing
                fun _fixedPriceQuantity(): JsonField<Double> = fixedPriceQuantity

                /** The property used to group this price on an invoice */
                @JsonProperty("invoice_grouping_key")
                @ExcludeMissing
                fun _invoiceGroupingKey(): JsonField<String> = invoiceGroupingKey

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @JsonProperty("invoicing_cycle_configuration")
                @ExcludeMissing
                fun _invoicingCycleConfiguration(): JsonField<InvoicingCycleConfiguration> =
                    invoicingCycleConfiguration

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @JsonProperty("metadata")
                @ExcludeMissing
                fun _metadata(): JsonField<Metadata> = metadata

                /**
                 * A transient ID that can be used to reference this price when adding adjustments
                 * in the same API call.
                 */
                @JsonProperty("reference_id")
                @ExcludeMissing
                fun _referenceId(): JsonField<String> = referenceId

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): NewSubscriptionBulkWithProrationPrice = apply {
                    if (validated) {
                        return@apply
                    }

                    bulkWithProrationConfig().validate()
                    cadence()
                    itemId()
                    modelType()
                    name()
                    billableMetricId()
                    billedInAdvance()
                    billingCycleConfiguration().ifPresent { it.validate() }
                    conversionRate()
                    currency()
                    externalPriceId()
                    fixedPriceQuantity()
                    invoiceGroupingKey()
                    invoicingCycleConfiguration().ifPresent { it.validate() }
                    metadata().ifPresent { it.validate() }
                    referenceId()
                    validated = true
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    @JvmStatic fun builder() = Builder()
                }

                /** A builder for [NewSubscriptionBulkWithProrationPrice]. */
                class Builder internal constructor() {

                    private var bulkWithProrationConfig: JsonField<BulkWithProrationConfig>? = null
                    private var cadence: JsonField<Cadence>? = null
                    private var itemId: JsonField<String>? = null
                    private var modelType: JsonField<ModelType>? = null
                    private var name: JsonField<String>? = null
                    private var billableMetricId: JsonField<String> = JsonMissing.of()
                    private var billedInAdvance: JsonField<Boolean> = JsonMissing.of()
                    private var billingCycleConfiguration: JsonField<BillingCycleConfiguration> =
                        JsonMissing.of()
                    private var conversionRate: JsonField<Double> = JsonMissing.of()
                    private var currency: JsonField<String> = JsonMissing.of()
                    private var externalPriceId: JsonField<String> = JsonMissing.of()
                    private var fixedPriceQuantity: JsonField<Double> = JsonMissing.of()
                    private var invoiceGroupingKey: JsonField<String> = JsonMissing.of()
                    private var invoicingCycleConfiguration:
                        JsonField<InvoicingCycleConfiguration> =
                        JsonMissing.of()
                    private var metadata: JsonField<Metadata> = JsonMissing.of()
                    private var referenceId: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    @JvmSynthetic
                    internal fun from(
                        newSubscriptionBulkWithProrationPrice: NewSubscriptionBulkWithProrationPrice
                    ) = apply {
                        bulkWithProrationConfig =
                            newSubscriptionBulkWithProrationPrice.bulkWithProrationConfig
                        cadence = newSubscriptionBulkWithProrationPrice.cadence
                        itemId = newSubscriptionBulkWithProrationPrice.itemId
                        modelType = newSubscriptionBulkWithProrationPrice.modelType
                        name = newSubscriptionBulkWithProrationPrice.name
                        billableMetricId = newSubscriptionBulkWithProrationPrice.billableMetricId
                        billedInAdvance = newSubscriptionBulkWithProrationPrice.billedInAdvance
                        billingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.billingCycleConfiguration
                        conversionRate = newSubscriptionBulkWithProrationPrice.conversionRate
                        currency = newSubscriptionBulkWithProrationPrice.currency
                        externalPriceId = newSubscriptionBulkWithProrationPrice.externalPriceId
                        fixedPriceQuantity =
                            newSubscriptionBulkWithProrationPrice.fixedPriceQuantity
                        invoiceGroupingKey =
                            newSubscriptionBulkWithProrationPrice.invoiceGroupingKey
                        invoicingCycleConfiguration =
                            newSubscriptionBulkWithProrationPrice.invoicingCycleConfiguration
                        metadata = newSubscriptionBulkWithProrationPrice.metadata
                        referenceId = newSubscriptionBulkWithProrationPrice.referenceId
                        additionalProperties =
                            newSubscriptionBulkWithProrationPrice.additionalProperties
                                .toMutableMap()
                    }

                    fun bulkWithProrationConfig(bulkWithProrationConfig: BulkWithProrationConfig) =
                        bulkWithProrationConfig(JsonField.of(bulkWithProrationConfig))

                    fun bulkWithProrationConfig(
                        bulkWithProrationConfig: JsonField<BulkWithProrationConfig>
                    ) = apply { this.bulkWithProrationConfig = bulkWithProrationConfig }

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: Cadence) = cadence(JsonField.of(cadence))

                    /** The cadence to bill for this price on. */
                    fun cadence(cadence: JsonField<Cadence>) = apply { this.cadence = cadence }

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: String) = itemId(JsonField.of(itemId))

                    /** The id of the item the plan will be associated with. */
                    fun itemId(itemId: JsonField<String>) = apply { this.itemId = itemId }

                    fun modelType(modelType: ModelType) = modelType(JsonField.of(modelType))

                    fun modelType(modelType: JsonField<ModelType>) = apply {
                        this.modelType = modelType
                    }

                    /** The name of the price. */
                    fun name(name: String) = name(JsonField.of(name))

                    /** The name of the price. */
                    fun name(name: JsonField<String>) = apply { this.name = name }

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: String?) =
                        billableMetricId(JsonField.ofNullable(billableMetricId))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: Optional<String>) =
                        billableMetricId(billableMetricId.orElse(null))

                    /**
                     * The id of the billable metric for the price. Only needed if the price is
                     * usage-based.
                     */
                    fun billableMetricId(billableMetricId: JsonField<String>) = apply {
                        this.billableMetricId = billableMetricId
                    }

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean?) =
                        billedInAdvance(JsonField.ofNullable(billedInAdvance))

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: Boolean) =
                        billedInAdvance(billedInAdvance as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun billedInAdvance(billedInAdvance: Optional<Boolean>) =
                        billedInAdvance(billedInAdvance.orElse(null) as Boolean?)

                    /**
                     * If the Price represents a fixed cost, the price will be billed in-advance if
                     * this is true, and in-arrears if this is false.
                     */
                    fun billedInAdvance(billedInAdvance: JsonField<Boolean>) = apply {
                        this.billedInAdvance = billedInAdvance
                    }

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: BillingCycleConfiguration?
                    ) = billingCycleConfiguration(JsonField.ofNullable(billingCycleConfiguration))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: Optional<BillingCycleConfiguration>
                    ) = billingCycleConfiguration(billingCycleConfiguration.orElse(null))

                    /**
                     * For custom cadence: specifies the duration of the billing period in days or
                     * months.
                     */
                    fun billingCycleConfiguration(
                        billingCycleConfiguration: JsonField<BillingCycleConfiguration>
                    ) = apply { this.billingCycleConfiguration = billingCycleConfiguration }

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double?) =
                        conversionRate(JsonField.ofNullable(conversionRate))

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: Double) =
                        conversionRate(conversionRate as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun conversionRate(conversionRate: Optional<Double>) =
                        conversionRate(conversionRate.orElse(null) as Double?)

                    /**
                     * The per unit conversion rate of the price currency to the invoicing currency.
                     */
                    fun conversionRate(conversionRate: JsonField<Double>) = apply {
                        this.conversionRate = conversionRate
                    }

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: String?) = currency(JsonField.ofNullable(currency))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: Optional<String>) = currency(currency.orElse(null))

                    /**
                     * An ISO 4217 currency string, or custom pricing unit identifier, in which this
                     * price is billed.
                     */
                    fun currency(currency: JsonField<String>) = apply { this.currency = currency }

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: String?) =
                        externalPriceId(JsonField.ofNullable(externalPriceId))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: Optional<String>) =
                        externalPriceId(externalPriceId.orElse(null))

                    /** An alias for the price. */
                    fun externalPriceId(externalPriceId: JsonField<String>) = apply {
                        this.externalPriceId = externalPriceId
                    }

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double?) =
                        fixedPriceQuantity(JsonField.ofNullable(fixedPriceQuantity))

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: Double) =
                        fixedPriceQuantity(fixedPriceQuantity as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    @Suppress("USELESS_CAST") // See https://youtrack.jetbrains.com/issue/KT-74228
                    fun fixedPriceQuantity(fixedPriceQuantity: Optional<Double>) =
                        fixedPriceQuantity(fixedPriceQuantity.orElse(null) as Double?)

                    /**
                     * If the Price represents a fixed cost, this represents the quantity of units
                     * applied.
                     */
                    fun fixedPriceQuantity(fixedPriceQuantity: JsonField<Double>) = apply {
                        this.fixedPriceQuantity = fixedPriceQuantity
                    }

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: String?) =
                        invoiceGroupingKey(JsonField.ofNullable(invoiceGroupingKey))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: Optional<String>) =
                        invoiceGroupingKey(invoiceGroupingKey.orElse(null))

                    /** The property used to group this price on an invoice */
                    fun invoiceGroupingKey(invoiceGroupingKey: JsonField<String>) = apply {
                        this.invoiceGroupingKey = invoiceGroupingKey
                    }

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: InvoicingCycleConfiguration?
                    ) =
                        invoicingCycleConfiguration(
                            JsonField.ofNullable(invoicingCycleConfiguration)
                        )

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: Optional<InvoicingCycleConfiguration>
                    ) = invoicingCycleConfiguration(invoicingCycleConfiguration.orElse(null))

                    /**
                     * Within each billing cycle, specifies the cadence at which invoices are
                     * produced. If unspecified, a single invoice is produced per billing cycle.
                     */
                    fun invoicingCycleConfiguration(
                        invoicingCycleConfiguration: JsonField<InvoicingCycleConfiguration>
                    ) = apply { this.invoicingCycleConfiguration = invoicingCycleConfiguration }

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Metadata?) = metadata(JsonField.ofNullable(metadata))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: Optional<Metadata>) = metadata(metadata.orElse(null))

                    /**
                     * User-specified key/value pairs for the resource. Individual keys can be
                     * removed by setting the value to `null`, and the entire metadata mapping can
                     * be cleared by setting `metadata` to `null`.
                     */
                    fun metadata(metadata: JsonField<Metadata>) = apply { this.metadata = metadata }

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: String?) =
                        referenceId(JsonField.ofNullable(referenceId))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: Optional<String>) =
                        referenceId(referenceId.orElse(null))

                    /**
                     * A transient ID that can be used to reference this price when adding
                     * adjustments in the same API call.
                     */
                    fun referenceId(referenceId: JsonField<String>) = apply {
                        this.referenceId = referenceId
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): NewSubscriptionBulkWithProrationPrice =
                        NewSubscriptionBulkWithProrationPrice(
                            checkRequired("bulkWithProrationConfig", bulkWithProrationConfig),
                            checkRequired("cadence", cadence),
                            checkRequired("itemId", itemId),
                            checkRequired("modelType", modelType),
                            checkRequired("name", name),
                            billableMetricId,
                            billedInAdvance,
                            billingCycleConfiguration,
                            conversionRate,
                            currency,
                            externalPriceId,
                            fixedPriceQuantity,
                            invoiceGroupingKey,
                            invoicingCycleConfiguration,
                            metadata,
                            referenceId,
                            additionalProperties.toImmutable(),
                        )
                }

                @NoAutoDetect
                class BulkWithProrationConfig
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BulkWithProrationConfig = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BulkWithProrationConfig]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(bulkWithProrationConfig: BulkWithProrationConfig) =
                            apply {
                                additionalProperties =
                                    bulkWithProrationConfig.additionalProperties.toMutableMap()
                            }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BulkWithProrationConfig =
                            BulkWithProrationConfig(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BulkWithProrationConfig && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BulkWithProrationConfig{additionalProperties=$additionalProperties}"
                }

                /** The cadence to bill for this price on. */
                class Cadence
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val ANNUAL = of("annual")

                        @JvmField val SEMI_ANNUAL = of("semi_annual")

                        @JvmField val MONTHLY = of("monthly")

                        @JvmField val QUARTERLY = of("quarterly")

                        @JvmField val ONE_TIME = of("one_time")

                        @JvmField val CUSTOM = of("custom")

                        @JvmStatic fun of(value: String) = Cadence(JsonField.of(value))
                    }

                    /** An enum containing [Cadence]'s known values. */
                    enum class Known {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                    }

                    /**
                     * An enum containing [Cadence]'s known values, as well as an [_UNKNOWN] member.
                     *
                     * An instance of [Cadence] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        ANNUAL,
                        SEMI_ANNUAL,
                        MONTHLY,
                        QUARTERLY,
                        ONE_TIME,
                        CUSTOM,
                        /**
                         * An enum member indicating that [Cadence] was instantiated with an unknown
                         * value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            ANNUAL -> Value.ANNUAL
                            SEMI_ANNUAL -> Value.SEMI_ANNUAL
                            MONTHLY -> Value.MONTHLY
                            QUARTERLY -> Value.QUARTERLY
                            ONE_TIME -> Value.ONE_TIME
                            CUSTOM -> Value.CUSTOM
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            ANNUAL -> Known.ANNUAL
                            SEMI_ANNUAL -> Known.SEMI_ANNUAL
                            MONTHLY -> Known.MONTHLY
                            QUARTERLY -> Known.QUARTERLY
                            ONE_TIME -> Known.ONE_TIME
                            CUSTOM -> Known.CUSTOM
                            else -> throw OrbInvalidDataException("Unknown Cadence: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Cadence && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                class ModelType
                @JsonCreator
                private constructor(private val value: JsonField<String>) : Enum {

                    /**
                     * Returns this class instance's raw value.
                     *
                     * This is usually only useful if this instance was deserialized from data that
                     * doesn't match any known member, and you want to know that value. For example,
                     * if the SDK is on an older version than the API, then the API may respond with
                     * new members that the SDK is unaware of.
                     */
                    @com.fasterxml.jackson.annotation.JsonValue
                    fun _value(): JsonField<String> = value

                    companion object {

                        @JvmField val BULK_WITH_PRORATION = of("bulk_with_proration")

                        @JvmStatic fun of(value: String) = ModelType(JsonField.of(value))
                    }

                    /** An enum containing [ModelType]'s known values. */
                    enum class Known {
                        BULK_WITH_PRORATION
                    }

                    /**
                     * An enum containing [ModelType]'s known values, as well as an [_UNKNOWN]
                     * member.
                     *
                     * An instance of [ModelType] can contain an unknown value in a couple of cases:
                     * - It was deserialized from data that doesn't match any known member. For
                     *   example, if the SDK is on an older version than the API, then the API may
                     *   respond with new members that the SDK is unaware of.
                     * - It was constructed with an arbitrary value using the [of] method.
                     */
                    enum class Value {
                        BULK_WITH_PRORATION,
                        /**
                         * An enum member indicating that [ModelType] was instantiated with an
                         * unknown value.
                         */
                        _UNKNOWN,
                    }

                    /**
                     * Returns an enum member corresponding to this class instance's value, or
                     * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                     *
                     * Use the [known] method instead if you're certain the value is always known or
                     * if you want to throw for the unknown case.
                     */
                    fun value(): Value =
                        when (this) {
                            BULK_WITH_PRORATION -> Value.BULK_WITH_PRORATION
                            else -> Value._UNKNOWN
                        }

                    /**
                     * Returns an enum member corresponding to this class instance's value.
                     *
                     * Use the [value] method instead if you're uncertain the value is always known
                     * and don't want to throw for the unknown case.
                     *
                     * @throws OrbInvalidDataException if this class instance's value is a not a
                     *   known member.
                     */
                    fun known(): Known =
                        when (this) {
                            BULK_WITH_PRORATION -> Known.BULK_WITH_PRORATION
                            else -> throw OrbInvalidDataException("Unknown ModelType: $value")
                        }

                    fun asString(): String = _value().asStringOrThrow()

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is ModelType && value == other.value /* spotless:on */
                    }

                    override fun hashCode() = value.hashCode()

                    override fun toString() = value.toString()
                }

                /**
                 * For custom cadence: specifies the duration of the billing period in days or
                 * months.
                 */
                @NoAutoDetect
                class BillingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): BillingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [BillingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(billingCycleConfiguration: BillingCycleConfiguration) =
                            apply {
                                duration = billingCycleConfiguration.duration
                                durationUnit = billingCycleConfiguration.durationUnit
                                additionalProperties =
                                    billingCycleConfiguration.additionalProperties.toMutableMap()
                            }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): BillingCycleConfiguration =
                            BillingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is BillingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "BillingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * Within each billing cycle, specifies the cadence at which invoices are produced.
                 * If unspecified, a single invoice is produced per billing cycle.
                 */
                @NoAutoDetect
                class InvoicingCycleConfiguration
                @JsonCreator
                private constructor(
                    @JsonProperty("duration")
                    @ExcludeMissing
                    private val duration: JsonField<Long> = JsonMissing.of(),
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    private val durationUnit: JsonField<DurationUnit> = JsonMissing.of(),
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
                ) {

                    /** The duration of the billing period. */
                    fun duration(): Long = duration.getRequired("duration")

                    /** The unit of billing period duration. */
                    fun durationUnit(): DurationUnit = durationUnit.getRequired("duration_unit")

                    /** The duration of the billing period. */
                    @JsonProperty("duration")
                    @ExcludeMissing
                    fun _duration(): JsonField<Long> = duration

                    /** The unit of billing period duration. */
                    @JsonProperty("duration_unit")
                    @ExcludeMissing
                    fun _durationUnit(): JsonField<DurationUnit> = durationUnit

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): InvoicingCycleConfiguration = apply {
                        if (validated) {
                            return@apply
                        }

                        duration()
                        durationUnit()
                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [InvoicingCycleConfiguration]. */
                    class Builder internal constructor() {

                        private var duration: JsonField<Long>? = null
                        private var durationUnit: JsonField<DurationUnit>? = null
                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(
                            invoicingCycleConfiguration: InvoicingCycleConfiguration
                        ) = apply {
                            duration = invoicingCycleConfiguration.duration
                            durationUnit = invoicingCycleConfiguration.durationUnit
                            additionalProperties =
                                invoicingCycleConfiguration.additionalProperties.toMutableMap()
                        }

                        /** The duration of the billing period. */
                        fun duration(duration: Long) = duration(JsonField.of(duration))

                        /** The duration of the billing period. */
                        fun duration(duration: JsonField<Long>) = apply { this.duration = duration }

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: DurationUnit) =
                            durationUnit(JsonField.of(durationUnit))

                        /** The unit of billing period duration. */
                        fun durationUnit(durationUnit: JsonField<DurationUnit>) = apply {
                            this.durationUnit = durationUnit
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): InvoicingCycleConfiguration =
                            InvoicingCycleConfiguration(
                                checkRequired("duration", duration),
                                checkRequired("durationUnit", durationUnit),
                                additionalProperties.toImmutable(),
                            )
                    }

                    /** The unit of billing period duration. */
                    class DurationUnit
                    @JsonCreator
                    private constructor(private val value: JsonField<String>) : Enum {

                        /**
                         * Returns this class instance's raw value.
                         *
                         * This is usually only useful if this instance was deserialized from data
                         * that doesn't match any known member, and you want to know that value. For
                         * example, if the SDK is on an older version than the API, then the API may
                         * respond with new members that the SDK is unaware of.
                         */
                        @com.fasterxml.jackson.annotation.JsonValue
                        fun _value(): JsonField<String> = value

                        companion object {

                            @JvmField val DAY = of("day")

                            @JvmField val MONTH = of("month")

                            @JvmStatic fun of(value: String) = DurationUnit(JsonField.of(value))
                        }

                        /** An enum containing [DurationUnit]'s known values. */
                        enum class Known {
                            DAY,
                            MONTH,
                        }

                        /**
                         * An enum containing [DurationUnit]'s known values, as well as an
                         * [_UNKNOWN] member.
                         *
                         * An instance of [DurationUnit] can contain an unknown value in a couple of
                         * cases:
                         * - It was deserialized from data that doesn't match any known member. For
                         *   example, if the SDK is on an older version than the API, then the API
                         *   may respond with new members that the SDK is unaware of.
                         * - It was constructed with an arbitrary value using the [of] method.
                         */
                        enum class Value {
                            DAY,
                            MONTH,
                            /**
                             * An enum member indicating that [DurationUnit] was instantiated with
                             * an unknown value.
                             */
                            _UNKNOWN,
                        }

                        /**
                         * Returns an enum member corresponding to this class instance's value, or
                         * [Value._UNKNOWN] if the class was instantiated with an unknown value.
                         *
                         * Use the [known] method instead if you're certain the value is always
                         * known or if you want to throw for the unknown case.
                         */
                        fun value(): Value =
                            when (this) {
                                DAY -> Value.DAY
                                MONTH -> Value.MONTH
                                else -> Value._UNKNOWN
                            }

                        /**
                         * Returns an enum member corresponding to this class instance's value.
                         *
                         * Use the [value] method instead if you're uncertain the value is always
                         * known and don't want to throw for the unknown case.
                         *
                         * @throws OrbInvalidDataException if this class instance's value is a not a
                         *   known member.
                         */
                        fun known(): Known =
                            when (this) {
                                DAY -> Known.DAY
                                MONTH -> Known.MONTH
                                else ->
                                    throw OrbInvalidDataException("Unknown DurationUnit: $value")
                            }

                        fun asString(): String = _value().asStringOrThrow()

                        override fun equals(other: Any?): Boolean {
                            if (this === other) {
                                return true
                            }

                            return /* spotless:off */ other is DurationUnit && value == other.value /* spotless:on */
                        }

                        override fun hashCode() = value.hashCode()

                        override fun toString() = value.toString()
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is InvoicingCycleConfiguration && duration == other.duration && durationUnit == other.durationUnit && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(duration, durationUnit, additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() =
                        "InvoicingCycleConfiguration{duration=$duration, durationUnit=$durationUnit, additionalProperties=$additionalProperties}"
                }

                /**
                 * User-specified key/value pairs for the resource. Individual keys can be removed
                 * by setting the value to `null`, and the entire metadata mapping can be cleared by
                 * setting `metadata` to `null`.
                 */
                @NoAutoDetect
                class Metadata
                @JsonCreator
                private constructor(
                    @JsonAnySetter
                    private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap()
                ) {

                    @JsonAnyGetter
                    @ExcludeMissing
                    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                    private var validated: Boolean = false

                    fun validate(): Metadata = apply {
                        if (validated) {
                            return@apply
                        }

                        validated = true
                    }

                    fun toBuilder() = Builder().from(this)

                    companion object {

                        @JvmStatic fun builder() = Builder()
                    }

                    /** A builder for [Metadata]. */
                    class Builder internal constructor() {

                        private var additionalProperties: MutableMap<String, JsonValue> =
                            mutableMapOf()

                        @JvmSynthetic
                        internal fun from(metadata: Metadata) = apply {
                            additionalProperties = metadata.additionalProperties.toMutableMap()
                        }

                        fun additionalProperties(additionalProperties: Map<String, JsonValue>) =
                            apply {
                                this.additionalProperties.clear()
                                putAllAdditionalProperties(additionalProperties)
                            }

                        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                            additionalProperties.put(key, value)
                        }

                        fun putAllAdditionalProperties(
                            additionalProperties: Map<String, JsonValue>
                        ) = apply { this.additionalProperties.putAll(additionalProperties) }

                        fun removeAdditionalProperty(key: String) = apply {
                            additionalProperties.remove(key)
                        }

                        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                            keys.forEach(::removeAdditionalProperty)
                        }

                        fun build(): Metadata = Metadata(additionalProperties.toImmutable())
                    }

                    override fun equals(other: Any?): Boolean {
                        if (this === other) {
                            return true
                        }

                        return /* spotless:off */ other is Metadata && additionalProperties == other.additionalProperties /* spotless:on */
                    }

                    /* spotless:off */
                    private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
                    /* spotless:on */

                    override fun hashCode(): Int = hashCode

                    override fun toString() = "Metadata{additionalProperties=$additionalProperties}"
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is NewSubscriptionBulkWithProrationPrice && bulkWithProrationConfig == other.bulkWithProrationConfig && cadence == other.cadence && itemId == other.itemId && modelType == other.modelType && name == other.name && billableMetricId == other.billableMetricId && billedInAdvance == other.billedInAdvance && billingCycleConfiguration == other.billingCycleConfiguration && conversionRate == other.conversionRate && currency == other.currency && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && invoiceGroupingKey == other.invoiceGroupingKey && invoicingCycleConfiguration == other.invoicingCycleConfiguration && metadata == other.metadata && referenceId == other.referenceId && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(bulkWithProrationConfig, cadence, itemId, modelType, name, billableMetricId, billedInAdvance, billingCycleConfiguration, conversionRate, currency, externalPriceId, fixedPriceQuantity, invoiceGroupingKey, invoicingCycleConfiguration, metadata, referenceId, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "NewSubscriptionBulkWithProrationPrice{bulkWithProrationConfig=$bulkWithProrationConfig, cadence=$cadence, itemId=$itemId, modelType=$modelType, name=$name, billableMetricId=$billableMetricId, billedInAdvance=$billedInAdvance, billingCycleConfiguration=$billingCycleConfiguration, conversionRate=$conversionRate, currency=$currency, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, invoiceGroupingKey=$invoiceGroupingKey, invoicingCycleConfiguration=$invoicingCycleConfiguration, metadata=$metadata, referenceId=$referenceId, additionalProperties=$additionalProperties}"
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is ReplacePrice && replacesPriceId == other.replacesPriceId && allocationPrice == other.allocationPrice && discounts == other.discounts && externalPriceId == other.externalPriceId && fixedPriceQuantity == other.fixedPriceQuantity && maximumAmount == other.maximumAmount && minimumAmount == other.minimumAmount && price == other.price && priceId == other.priceId && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(replacesPriceId, allocationPrice, discounts, externalPriceId, fixedPriceQuantity, maximumAmount, minimumAmount, price, priceId, additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() =
            "ReplacePrice{replacesPriceId=$replacesPriceId, allocationPrice=$allocationPrice, discounts=$discounts, externalPriceId=$externalPriceId, fixedPriceQuantity=$fixedPriceQuantity, maximumAmount=$maximumAmount, minimumAmount=$minimumAmount, price=$price, priceId=$priceId, additionalProperties=$additionalProperties}"
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is SubscriptionSchedulePlanChangeParams && subscriptionId == other.subscriptionId && body == other.body && additionalHeaders == other.additionalHeaders && additionalQueryParams == other.additionalQueryParams /* spotless:on */
    }

    override fun hashCode(): Int = /* spotless:off */ Objects.hash(subscriptionId, body, additionalHeaders, additionalQueryParams) /* spotless:on */

    override fun toString() =
        "SubscriptionSchedulePlanChangeParams{subscriptionId=$subscriptionId, body=$body, additionalHeaders=$additionalHeaders, additionalQueryParams=$additionalQueryParams}"
}
